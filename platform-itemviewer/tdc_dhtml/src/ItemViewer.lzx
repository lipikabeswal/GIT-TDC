<canvas bgcolor="0x6691B4" 
        proxied="false" 
        debug="false"
        accessible="true" >

    <debug x="0" y="0" width="80%" height="400"/>

    <include href="ctbmodules"/>

    <script src="lzmodules/lfc/focuspatch.js">
    </script>
	<attribute name="focusobj" />
	
    <handler name="onfocus">
       Debug.write("NK XXX canvas has focus");
    </handler>

    <script src="lzmodules/lfc/browserpatch.js">
    </script>

   <!--  <resource name="waitcursor" src="redmond/resources/lzwaitcursor_rsc.swf"/> -->

    <script><![CDATA[
        function printBigString( s ) {
            Debug.write( '==========' );
            if (s == null) return;
            for ( var i = 0; i < s.length; i += 100 ) {
                Debug.write(s.substring( i, i + 100 ) );
            }
        }
    ]]></script>
    <script><![CDATA[
        function round( s ) {
            var prev = Math.floor(s);
            var next = Math.ceil(s);
            var toNext = next - s;
            var toPrev = s - prev;
            var result = prev;
            if(toNext < toPrev){
            	result = next;
            }
            return result;
        }
    ]]></script>
    <script><![CDATA[
    	/**
    	 * This method trims the blank spaces ' ' or new lines '\n' from the front
    	 * and end of a string
    	 * @param str - The string that is to be parsed
    	 * @return str - The parsed string after it has been trimmed    
    	 */
        function trim( str ) {
        	if(str == null){
        		str = '';
        		return str;
        	}
            while (str.substr(0,1) == ' ' || str.substr(0,1)=='\n') {
               str = str.substr(1, str.length);
            }
            while (str.substr(str.length-1, str.length) == ' '|| str.substr(str.length-1, str.length) =='\n') {
               str = str.substr(0,str.length-1);
            }
            return str;		
        }
    ]]></script>

    <attribute name="Copyrite" type="string" value="CTB/McGraw-Hill" />
	<attribute name="copyriteColor" type="color" value="0x527DA4" />
	<attribute name="basefontsize" type="number" value="12" />
	<attribute name="readable" value="false" type="boolean" />
    <attribute name="focusclass" value="null"/>
    <attribute name="footnotedata"/>
    <attribute name="itemxml"/>
	<attribute name="currentCursor" value="null"/>
	<attribute name="eliminatorRsrc" value="$once{lz.Browser.getInitArg('eliminatorResource')}" type="string" />
	<attribute name="useDefaultEliminator" type="boolean" value="true" />
    
	<method name="setCrFocus">
		var fo = canvas.focusobj;
		if(typeof fo == 'object'){
			fo.onfocus.sendEvent();
		}
	</method>
    <handler name="onfootnotedata" args="data">
        gFootNotePopup.show(data);
    </handler>
    <handler name="onitemxml" args="data">
        Debug.write('data'+data);
    </handler>

	<handler name="oninit">
    	//Debug.write("HTML Embed Setting:" + Stage.showMenu);
    	//Stage.showMenu = false;
    	//Debug.write("Active Setting:" + Stage.showMenu);
  	</handler>
	

    <method name="init">
    Debug.warn("*****************init**************");
       super.init();
       var folder = lz.Browser.getInitArg('folder');
       if (folder) this.setAttribute("folder", folder);
       var user = lz.Browser.getInitArg('user');
       if (user) this.setAttribute("user", user);
       var itemNum = lz.Browser.getInitArg('itemNum');
       if (itemNum) this.setAttribute("itemNum", itemNum);
       Debug.warn("*****************init**************"+itemNum);
       //canvas.setDefaultContextMenu(null);
       var cmenu = new LzContextMenu();
       cmenu.hideBuiltInItems();
       cmenu.setAttribute('delegate',new lz.Delegate(this,'doNothing'));
	   canvas.setDefaultContextMenu(cmenu);
	   //Stage.showMenu = false;
	   //dshowClient.register( this, 'itemuiready' );
		canvas.setScale();
		gController.loadItem();
    </method>
    
    <method name="doNothing">
    </method>

	<method name="setScale"><![CDATA[
		canvas.setAttribute('xscalefactor',canvas.titleView.mainView.scalingView.xscale);
		canvas.setAttribute('yscalefactor',canvas.titleView.mainView.scalingView.yscale);
		setScaleFactor(canvas.xscalefactor,canvas.yscalefactor);
		
	]]>
	</method>

<!--  this view tests whether or not the eliminator resource is available -->
	<view name="eliminatorTester" visible="false" height="0" width="0">
		<handler name="oninit">
			canvas.setAttribute('medialoadtimeout', 3000);
			var eliminatorUrl = lz.Browser.getInitArg('eliminatorResource');
			this.setSource(eliminatorUrl);
			var folderUrl = lz.Browser.getInitArg('folder');
			if (folderUrl) {
			   canvas.folder = folderUrl;
			}
		</handler>
		<handler name="onload">
			canvas.setAttribute('medialoadtimeout', 30000);
			canvas.setAttribute('useDefaultEliminator', false);
			this.unload();
		</handler>
		
	</view>
	<view name="titleView" width="100%" height="100%" >
	<view name="mainView"  width="100%" height="100%">

    <view name="scalingView"
          stretches="both"
         height="${canvas.width/canvas.height &lt; 1.33 
                     ? this.width * 600/800 : canvas.height}" 
		width="${canvas.width/canvas.height &lt;1.33 
                     ? canvas.width 
                     : this.height * 800/600}"		     
		     xscale="${this.height/600}" yscale="${this.height/600}" 
          valign="middle" align="center">


        <view name="gView" width="800" height="600">

            <ItemInterface id="gItemInterface" width="800" height="600"
                        visible="true"/>
        </view>

    </view>
</view>
</view>


</canvas>
