<library>

    <include href="cache/ComponentCache.lzx"/>

    <class name="Question">

        <attribute name="doaccomlayout" value="true"/>

        <attribute name="_LEFTPANELWIDTH" type="number" value="788"/>
        <attribute name="_LEFTPANELPADDING" type="number" value="12"/>
        <attribute name="_MAX_HEIGHT" type="number" value="453" />
        <attribute name="_SCROLLBAR_WIDTH" type="number" value="14" />
        <attribute name="_ACCOMMODATED_TAB_HEIGHT" type="number" value="42" />
        <attribute name="directionsHeight" type="number" value="0" />
        <attribute name="leftPanelWidth" type="number" value="0" />
        
        <ComponentCache name="cache"/>

		<method name="setGrFocus" >
			for(var i in this.subviews){
				var sv = this.subviews[i];
				if(sv instanceof lz.BaseCachablePanel){
					sv.setGrFocus();
				}
			}
			canvas.setCrFocus();
		</method>
		
        <handler name="ondata" args="data"><![CDATA[
            if (data) {
            	this.setAttribute("directionsHeight", 0);
            	this.setAttribute("leftPanelWidth", _LEFTPANELWIDTH);
                if (gController.hasFontAccommodation && doaccomlayout) {
                    this.convertToAccLayout(data);
                    data = this.datapath.p;
                }

                for (var i in this.subviews) {
    
                    if (this.subviews [i] instanceof CachableComponent &&
                        this.subviews [i].visible) {
                        this.cache.returnComponent (this.subviews [i]);
                    }
                }
        
                var subnodes = data.childNodes;
                for (var i = 0; i < subnodes.length; i++) {
                    if ( subnodes[i] instanceof lz.DataElement ) {
                        this.cache.getComponent (subnodes [i]);
                    }
                }

                if ( dsitem == data.ownerDocument ) {
                    gController.setAttribute( 'trackingcomponents', true );
                }
            }
        ]]></handler>

        <!-- Figure out if we need one or two columns -->

        <method name="convertToAccLayout"><![CDATA[
            var issinglecol = true;
    
            var xarr = this.datapath.xpathQuery("*/@x");
            if (!(xarr instanceof Array)) xarr = [xarr];

            for (var i = 0; i < xarr.length; i++) {
                if (Number(xarr[i]) > 200 ) {
                    issinglecol = false;
                    break;
                }
            }
        
            if (issinglecol) {
                this.convertToSingleCol();
            } else {
                this.convertToDoubleCol();
            }
        ]]></method>


        <!-- Make into a single column layout-->
        <method name="convertToSingleCol"><![CDATA[
            var panelarr = this.datapath.p.childNodes;

            //create top level panel node
            var dntoppanel = new lz.DataElement("panel", {x        : 0, 
                                                         y        : 79,
                                                         width    : 794,
                                                         height   : 453,
                                                         layout   : "vertical",
                                                         enablehl : false});
            
            dntoppanel.setChildNodes(panelarr);

            //change all subnodes according to new layout requirements
            this.convertNodes(panelarr, 780, true);

            this.datapath.p.setChildNodes([dntoppanel]);
        ]]></method>


        <!-- Make into a double column layout -->
        <method name="convertToDoubleCol"><![CDATA[
            var leftchildarr = [];
            var rightchildarr = [];
            var leftwidth = 0;
            var rightwidth = 0;
            var dirheight = 0;

            //create the left panel, the right panel, and the wrapper panel for
            //the two
            var dntwopanel = new lz.DataElement("panel", {
                x            : 0, 
                y            : 79,
                left_padding : this._LEFTPANELPADDING,
                width        : this._LEFTPANELWIDTH,
                height       : 453,
                layout       : "horizontal",
                enablehl     : false});

            var dnleftpanel = new lz.DataElement("panel", {x       : 0, 
                                                         y        : 0,
                                                         height   : 453,
                                                         layout   : "vertical",
                                                         enablehl : false});
            var dnrightpanel = new lz.DataElement("panel", {x      : 0, 
                                                         y        : 0,
                                                         height   : 453,
                                                         layout   : "vertical",
                                                         enablehl : false});

            //figure out what nodes should be in the left col and the right col,
            //also search for the directions node.
            var dndir = null;
            var childarr = this.datapath.p.childNodes;
            for (var i =0; i < childarr.length; i++) {

                if (childarr[i].getAttr("stereotype") == "directions") {
                    //directions node found, 
                    dndir = childarr[i];
                    this.convertNodes([dndir], this._LEFTPANELWIDTH, false);
                    dndir.setAttr("y", 79);

                    //plop dndir data into sizer to find out the panel's size
                	gController.setAttribute("isSizer", true);
                    this.sizer.doReturnToCache();
                    this.sizer.datapath.setPointer(dndir);
                    dirheight = sizer.height;
                    this.setAttribute("directionsHeight", dirheight);
                    gController.setAttribute("isSizer", false);

                } else {
                    //figure out if left or right col and col width
                    if (Number(childarr[i].getAttr("x")) < 200) {
                        if (leftwidth == 0) {
                            leftwidth = Number(childarr[i].getAttr("width")); 
                        }
                        leftchildarr.push(childarr[i]);
                    } else {
                        rightchildarr.push(childarr[i]);
                    }
                }
            }

            rightwidth = this._LEFTPANELWIDTH - leftwidth - this._LEFTPANELPADDING;
			this.setAttribute("leftPanelWidth", leftwidth);
            dnleftpanel.setAttr("width", leftwidth);
            dnrightpanel.setAttr("width", rightwidth);

            //if we have a directions area move/size the left and right cols
            //accordingly
            if (dirheight) {
                var tpheight = 453 - dirheight;
                dntwopanel.setAttr("y", dirheight + 79);
                dntwopanel.setAttr("height", tpheight);
                dnleftpanel.setAttr("height", tpheight);
                dnrightpanel.setAttr("height", tpheight);
            }            

            //convert subnodes to the new state of the world
            this.convertNodes(leftchildarr, leftwidth - _SCROLLBAR_WIDTH, false);
            this.convertNodes(rightchildarr, rightwidth - _SCROLLBAR_WIDTH, false);

            //rearrange subnodes
            dnleftpanel.setChildNodes(leftchildarr);
            dnrightpanel.setChildNodes(rightchildarr);

            dntwopanel.setChildNodes([dnleftpanel, dnrightpanel]);

            var topchildarr = [dntwopanel];
            if (dndir) {
                topchildarr = [dndir, dntwopanel];
            }

            //finalize
            this.datapath.p.setChildNodes(topchildarr);
        ]]></method>


        <!-- Convert subnodes to the new layout-->
        <method name="convertNodes" args="dnarr, nw, single"><![CDATA[   
            var dn;
            for (var i = 0; i < dnarr.length; i++) {

                dn = dnarr[i];
                if (!(dn instanceof lz.DataElement)) break;

                //don't bother changing table, image and cr nodes.  They
                //need to have a specified width and height
                if (dn.nodeName == gCompTypes.WIDGET_TABLE ||
                    dn.nodeName == gCompTypes.WIDGET_IMAGE ||
                    dn.nodeName == gCompTypes.WIDGET_MULTI_LINE_ANSWER ||
                    dn.nodeName == gCompTypes.WIDGET_SINGLE_LINE_ANSWER ) {
                    continue;
                }
                
                if (dn.nodeName == gCompTypes.WIDGET_SCROLLING_TEXT_PANEL) {
                	adjustScrollingTextHeights(dn);
                	continue;
                }

                if (dn.nodeName == gCompTypes.WIDGET_STIMULUS_TABS_PANEL) {
                	adjustStimulusTabsHeights(dn);
                	continue;
                }

                //set height to "" to indicate it should size to its contents.
                //Don't do this for answer areas other wise there won't be any padding
                //around the answer choices
                if (dn.attributes["height"] && 
                        dn.nodeName != gCompTypes.WIDGET_ANSWER_AREA_ABSOLUTE_PANEL) {
                    dn.attributes.height = "";
                }

                //get rid of x and y.  They will be set by the layouts.
                if (dn.attributes["x"]) dn.removeAttr("x");
                if (dn.attributes["y"]) dn.removeAttr("y");

                var xVal = 0;
                if(dn.hasAttr("x")) {
                    xVal = Number(dn.getAttr("x")) 
                        + Number(dn.getAttr("left_padding"));
                }
                
				if(single){
                    dn.attributes.width = nw - xVal;
				}
				else if(dn.hasAttr("width")){
                     dn.attributes.width = Math.min(dn.attributes["width"], nw - xVal);
                }
        
                //don't bother with to convert certain node types' children
                if (!dn.hasChildNodes() || 
                    dn.nodeName == gCompTypes.WIDGET_ANSWER_AREA_ABSOLUTE_PANEL ||
                    dn.attributes["layout"] == "horizontal") {
                    continue;
                }

                //convert children
                var cn = dn.childNodes;
                if(cn != null){
                	if(dn.nodeName == gCompTypes.WIDGET_ANSWER_AREA_PANEL
                	   && dn.attributes["layout"] == "vertical"){
                		this.convertVerticalAnswerAreaNodes(cn, dn.attributes.width - _SCROLLBAR_WIDTH);
                	}
                	else if(dn.nodeName == gCompTypes.WIDGET_STIMULUS_TABS_PANEL){
						adjustStimulusTabsHeights(dn);
                	}
                 	else{
                		this.convertNodes(cn, dn.attributes.width - _SCROLLBAR_WIDTH, single);
                	}
                }
            }

        ]]></method>

		<method name="adjustScrollingTextHeights" args="node"><![CDATA[  
			var newH = _MAX_HEIGHT - directionsHeight;
			node.setAttr('height', newH);
			node.setAttr('width', leftPanelWidth);
			node.setAttr('x', 0);
			var scrollingText = node.childNodes;
		 ]]></method>

		<method name="adjustStimulusTabsHeights" args="node"><![CDATA[  
			var newH = _MAX_HEIGHT - directionsHeight;
			node.setAttr('height', newH);
			node.setAttr('width', leftPanelWidth);
			node.setAttr('x', 0);
			var stimulusTabs = node.childNodes;
			for (var i=0; i<stimulusTabs.length; i++){
				var scrollingText = stimulusTabs[i].childNodes;
//				scrollingText.setAttr('width', leftPanelWidth);
				for(var j=0; j<scrollingText.length; j++){
					scrollingText[j].setAttr('height', newH - _ACCOMMODATED_TAB_HEIGHT);
				}
			}
		 ]]></method>
		
        <method name="convertVerticalAnswerAreaNodes" args="dnarr, nw"><![CDATA[   
//Debug.write("***************** convertVerticalAnswerAreaNodes *******************************");
			// dnarr contains answer_choice_widgets 
			var selectorWidth = 50;  // probably need to measure it in the future - this is for larger font only
            var answerChoiceWidgetNode;
            for (var i = 0; i < dnarr.length; i++) {
            	answerChoiceWidgetNode = dnarr[i];
            	if(answerChoiceWidgetNode.nodeName == gCompTypes.WIDGET_ANSWER_CHOICE){
            		answerChoiceWidgetNode.attributes.width = nw;
            		var spacing = new Number(answerChoiceWidgetNode.attributes.spacing);
            		childarr = answerChoiceWidgetNode.childNodes;
            		var childNode;
            		for(var j=0; j < childarr.length; j++){
            			childNode = childarr[j];
            			if(childNode.nodeName == gCompTypes.WIDGET_TEXT){
            				var tw = nw - selectorWidth - spacing;
            				childNode.attributes.width = tw;
            			}
            		}
            	}
            }
        ]]></method>


        <!-- User to figure out how large the directions area is -->
        <CachablePanel name="sizer" visible="false"/>

    </class>

</library>