<library>
	<include href="CachableComponent.lzx"/>
	<include href="../../../resources/resources.lzx"/>
	<!-- ************************************
         CachableRecorder
         
         A cachable recoder.  
         *************************************-->
    <script>
	    //var iceblue1 = 0x328693;
	    var iceblue1 = 0x6F0F0F;
	    var gold4 = 0x3F1F0F; //0xF8E496
	</script>     
	
	<class name="CachableRecorder" extends="CachableComponent"
		   comptype="${gCompTypes.WIDGET_RECORDER}" aaactive="true" aasilent="false">
	<attribute name="blinkerDel" value="$once{new lz.Delegate(this,'blinker')}"/>
	<attribute name="countDownDel" value="$once{new lz.Delegate(this,'countDownTimer')}"/>
	<attribute name="defaultTotalTime" value="25"/>
	<attribute name="totalTime" value="25"/>
	<attribute name="recordStarted" type="boolean" value="false"/>
	<attribute name="increment" type="boolean" value="0"/>

	<attribute name="width" value="250" /> 
	<attribute name="height" value="150" />
	<attribute name="bgcolor" value="0x6F0F0F"/><!-- iceblue -->
	
	<attribute name="recordButton" />
	<attribute name="stopButton" />
	<attribute name="resetButton" />
	<attribute name="submitButton" />
	<attribute name="bar" />
	<attribute name="barfilled" />
	<attribute name="timertext" />
	<attribute name="red" />
	<attribute name="green" />
	
    <dataset name="audioDset" 
			 ondata="classroot.handleResponseData(this.data)"
			 type="http"
			 request="false">
	</dataset>	

 	<method name="init">
		super.init();
		setReferences();
	</method>

	<handler name="oninit">
		timertext.setText(this.totalTime);
	</handler>

	<handler name="ondata" args="data"><![CDATA[
		this.reset();
Debug.write("data...."+data);
		if(data.getAttr('x')) {
			this.setAttribute('x', Number(data.getAttr('x')));
		}
		if(data.getAttr('y')) {
			this.setAttribute('y', Number(data.getAttr('y')));
		}
		if(data.getAttr('width')) {
			this.setAttribute('width', Number(data.getAttr('width')));
		}
		if(data.getAttr('height')) {
			this.setAttribute('height', Number(data.getAttr('height')));
		}
		doneLoading();
	]]>
	</handler>

	<method name="doReturnToCache"><![CDATA[
           var contsubviews = this.tabs.contents.tabcontents.subviews;
           for (var i in contsubviews) {
               if (contsubviews [i] instanceof CachableComponent) {
                   this.cache.returnComponent (contsubviews [i]);
               }
           }
       ]]></method>

	<view name="main" align="center" valign="middle" width="${parent.width - 3}" height="${parent.height - 3}">
		<simplelayout />
		<view name="header" width="100%" height="12%" bgcolor="${gold4}" >
			<simplelayout axis="x"/>
			<view resource="../../../resources/components/recorder/microphone_red.gif" stretches="both" width="22" height="20"  />
			<text valign="middle" font="Arial" fontsize="12" fontstyle="bold" fgcolor="white">Sound Recorder</text>
		</view>
		<view name="content" width="100%" height="88%" bgcolor="white">
			<simplelayout />	
			<view name="recorddisplay" align="left" width="100%">
				<simplelayout axis="x" spacing="10"/>
				<view name="recordicons" width="100" height="60">
					<view name="red" opacity=".6" visible="false" resource="../../../resources/components/recorder/Bullet-red.png" stretches="both" width="30" height="30" align="center" valign="middle" ></view>
					<view name="green" opacity=".6"  visible="false" resource="../../../resources/components/recorder/Bullet-green.png" stretches="both" width="${red.width}" height="${red.height}" align="center" valign="middle" />
				</view>
				<view name="recordtimer" width="180" height="60">				
					<simplelayout axis="x" spacing="3"/>
					<text fontsize="11" align="right" valign="middle" resize="true" font="Arial" fontstyle="bold">Remaining Time:</text>
					<text name="timertext" align="left" valign="middle" fontsize="20" fgcolor="green" resize="true" font="Arial" fontstyle="bold"></text>
				</view>
			</view>		
			<view name="bar" align="center" width="80%" height="10" bgcolor="0xcccccc">
				<view name="barfilled"  width="0" height="100%" bgcolor="0x328693" />
			</view>
			<view name="justforspace" align="center" width="100%" height="10%" />
			<view name="widgetbuttons" width="100%" height="13%" bgcolor="green">
				<view name="whitewrapper" height="100%" bgcolor="white" x="26">
				<simplelayout axis="x" spacing="65"/>
					<view name="buttons">
						<simplelayout axis="x" spacing="6"/>
						<basebutton resource="button_record" name="recordButton" width="23" height="23" stretches="both" align="left" onclick="classroot.startblinker()" />
						<basebutton resource="button_stop" name="stopButton" width="23" height="23" stretches="both" enabled="false" onclick="classroot.stopblinker()" />
						<basebutton resource="button_reset" name="resetButton" width="23" height="23" stretches="both" onclick="classroot.reset()" />
					</view>
					<view name="submit">
						<basebutton resource="button_submit" name="submitButton" width="50" height="20" stretches="both" enabled="false" onclick="classroot.submit()" />
					</view>
				</view>
			</view>
		</view>
	</view>

	<method name="startblinker">
		//Debug.write("startblinker");
	
		if(!this.recordStarted) {	
			sendRequest("record");
			this.increment = bar.width / this.defaultTotalTime;
			this.recordStarted = true;		
			recordButton.setAttribute("enabled", false);
			green.setVisible(false);
		}
		
	</method>
	
	<method name="blinker">
Debug.write("blinker : ",red.visible);
		red.setVisible(true);
	</method>
	
	<method name="stopblinker">
Debug.write("stopblinker");
		red.setVisible(false);
		lz.Timer.removeTimer(blinkerDel); 
		if(this.recordStarted) {
			sendRequest("stop");
			green.setVisible(true);
			recordButton.setAttribute("enabled", true);
			this.recordStarted = false;
			stopCountDownTimer();
			stopButton.setAttribute("enabled", false);
			submitButton.setAttribute("enabled", true);	
		}
	</method>
	
	<method name="startCountDownTimer">
//Debug.write("startCountDownTimer");	
		countDownTimer();
		green.setVisible(false);
		submitButton.setAttribute("enabled", false);			
	</method>
	
	<method name="countDownTimer">
	<![CDATA[	
		this.totalTime -= 1; 	
		fillBarWithTime(increment);	
//Debug.write("countDownTimer", this.totalTime);	
		if(this.totalTime == 0) {
			timertext.setText(this.totalTime);
			stopblinker();
			recordButton.setAttribute("enabled", false);
			resetButton.setAttribute("enabled", false);
			stopButton.setAttribute("enabled", false);
			submitButton.setAttribute("enabled", true);
			return;
		}
	
		if(this.totalTime <= 15) {
			timertext.setAttribute("fgcolor",red);
//Debug.write(this.totalTime);
		}else{
			timertext.setAttribute("fgcolor",green);
		}
		timertext.setText(this.totalTime);
		lz.Timer.resetTimer(countDownDel, 1000);
	]]>
	</method>
	
	<method name="stopCountDownTimer">
//Debug.write("stopCountDownTimer");	
		lz.Timer.removeTimer(countDownDel);
	</method>
	
	<method name="fillBarWithTime" args="timeInSecs">
//Debug.write("fillBarWithTime...", timeInSecs);
		barfilled.setAttribute("width",  barfilled.width + increment);
	</method>
	
	<method name="submit">
		stopblinker();
		recordButton.setAttribute("enabled", false);
		resetButton.setAttribute("enabled", false);
		stopButton.setAttribute("enabled", false);
		submitButton.setAttribute("enabled", false);
	</method>

	<method name="sendRequest" args="method">
Debug.write("sendRequest....", method);
         var d = audioDset;
         var p = new lz.Param();
         p.addValue( "method", method, true);
         d.setQueryString( p );
         d.setAttribute("reqtype","POST"); 
         d.doRequest();
 	</method>
	 	
	<method name="handleResponseData" args="d">
Debug.write("ondata....", d.childNodes[0].data);
		if(d.childNodes[0].data =='RECORDING_START'){
			startCountDownTimer();
			blinker();
			stopButton.setAttribute("enabled", true);
		}
	</method>

	<handler name="oninit">
		var base = lz.Browser.getInitArg( 'servletUrl' );
		audioDset.setSrc(base + '/SoundRecorder.do');
Debug.write(base + '/SoundRecorder.do');        	
	</handler>
        
	<method name="enable"><![CDATA[
		record
	]]></method>
	
	<method name="disable"><![CDATA[
		
	]]></method>

	<method name="reset">
		stopblinker();
		this.totalTime = this.defaultTotalTime;
		recordButton.setAttribute("enabled", true);
		submitButton.setAttribute("enabled", false);
		green.setVisible(false);
		timertext.setText(this.totalTime);		
		timertext.setAttribute("fgcolor",green);
		
		barfilled.setWidth(0);
		increment = 0;
	</method>

	<method name="setReferences">
		this.recordButton	= main.content.widgetbuttons.whitewrapper.buttons.recordButton;
		this.stopButton 	= main.content.widgetbuttons.whitewrapper.buttons.stopButton;
		this.resetButton 	= main.content.widgetbuttons.whitewrapper.buttons.resetButton;
		this.submitButton 	= main.content.widgetbuttons.whitewrapper.buttons.submitButton;
		this.bar 			
		this.barfilled
		this.timertext
		this.red
		this.green
		
	</method>
</class>
</library>