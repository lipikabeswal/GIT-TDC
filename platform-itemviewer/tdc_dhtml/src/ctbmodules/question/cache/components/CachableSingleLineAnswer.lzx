<library>
    <include href="CachableComponent.lzx"/>

    <!-- ===============
         ==
         == CachableSingleLineAnswer
         ==
         ==  A cachable answer input.  Contains a editinput field
         ==  and will also set the width, height, and text of the
         ==  text 
         ==
         =============== -->

    <class name="CachableSingleLineAnswer" extends="CachableComponent" 
           comptype="$once{gCompTypes.WIDGET_SINGLE_LINE_ANSWER}" aaactive="true" 
           aasilent="false" clickable="true" showhandcursor="false" > 

        <attribute name="hasAltText" value="false"/>
		<attribute name="altText" type="string" />
		<attribute name="hasReadableText" type="boolean" value="true"/>
        
        <attribute name="lmargin" type="number" value="5"/>
        <attribute name="rmargin" type="number" value="5"/>
        <attribute name="maxlength" type="number" value="50"/>
        <attribute name="char_limit" type="number" value="50"/>
        <attribute name="halign" type="string" value="left"/>
        <attribute name="type" type="string"/>
        <attribute name="xmls" type="string"/>
        <attribute name="widget_id" value="" type="string"/>
        <attribute name="editTextWidth" type="number" value="100"/>
        <!-- ===============
             = METHODS
             =============== -->
		<method name="enable">
			this.answer.enable();
		</method>
        <handler name="ondata" args="data"><![CDATA[
            if (data.getAttr("width")){
//Debug.write("CachableSingleLineAnswer", "got width", data.getAttr('width'));
                this.setAttribute('editTextWidth', Number(data.getAttr("width")));
            }
            if(data.getAttr('acc_width') && gController.hasFontAccommodation){
//Debug.write("CachableSingleLineAnswer", "got acc_width", data.getAttr('acc_width'));
                this.setAttribute('editTextWidth', Number(data.getAttr("acc_width")));
            }
 			if (data.getAttr("char_limit")){
                this.setAttribute("char_limit", Number(data.getAttr("char_limit"))); 
            }
			if (data.getAttr("halign")){ 
                this.setAttribute("halign", data.getAttr("halign"));
            } 
			if (data.getAttr("lmargin")){
                this.setAttribute("lmargin", data.getAttr("lmargin"));
            } 
			if (data.getAttr("rmargin")){
                this.setAttribute("rmargin", data.getAttr("rmargin"));
            }
            this.setAttribute("showhandcursor", false);
            doneLoading();
        ]]></handler>

		<method name="setAnswer" args="txt">
			this.answer.setAnswer(txt);
		</method>
		
		<method name="read">
			var txt = answer.getSelectedText();
			if(txt.length == 0){
				txt = gReadableText.getReadableTextForCharacter(' ');
			}
			gReadableText.read(txt);
		</method>
		<method name="setSelectionVars">
			answer.setSelectionVars();
		</method>
		
        <!-- ===============
             = VIEWS
             =============== -->

		<simplelayout axis="x" spacing="5" />
       
        <ctb_edittext name="answer" 
                      maxlength="${classroot.char_limit}" 
                      width="${classroot.editTextWidth}" height="${classroot.height+3}"
                      widget_id="${classroot.widget_id}"
                      fontsize="${classroot['fontsize'] ? classroot.fontsize : 12}">
           <method name="init">
               super.init();
                /*this.style.setAttribute("textfieldcolor", gController.answerBgColor);
                this.style.setAttribute("textcolor", gController.answerFontColor);*/
				//this.field.onfocus.sendEvent();
           </method>
        </ctb_edittext>
 		<basebutton resource="read_btn" 
 		            name="readBtn"
 		            visible="${canvas.readable}">
			<handler name="onclick">
                classroot.read();
			</handler>
			<handler name="onmouseover">
				classroot.setSelectionVars();
			</handler>
		</basebutton>
    </class>
</library>
