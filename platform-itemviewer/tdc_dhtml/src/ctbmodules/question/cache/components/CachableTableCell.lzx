<library>


    <class name="CachableTableCell" extends="CachableComponent"
           comptype="$once{gCompTypes.WIDGET_TABLE_CELL}"
           defaultplacement="wrapper" fontsize="12">

        <handler name="ondata" args="data"><![CDATA[

            //size/pos
            this.setAttribute("x", data.attributes.x);
            this.setAttribute("y", data.attributes.y);

            this.setAttribute("width", data.attributes.width);
            this.setAttribute("height", data.attributes.height);

            //color
            var isaccom = panel.isaccom;
            if (data.hasAttr("bgcolor") && !isaccom) {
                this.setAttribute("bgcolor", data.attributes.bgcolor);
            } else {
                this.setAttribute("bgcolor", this.panel.bgcolor);
            }

            if (data.hasAttr("fgcolor") && !isaccom) {
                this.setAttribute("fontcolor", Number(data.attributes.fgcolor));
            }else {
                this.setAttribute("fontcolor", this.panel.fontcolor);
            }

            // Increase fontsize of text
            if (parent.autoenlarge == "fixed" && this.fontsize < 16 && gController.hasFontAccommodation) {
               var style = gController.getAccomStyleForType(parent.parent.stereotype);
               this.setAttribute("fontsize", this.fontsize * style['font_magnification']);
            }

            //alignment
            var align = data.getAttr("halign");        
            var valign = data.getAttr("valign");

            for (var i in data.childNodes) {
                //pass align down (really only for text so that it justifies
                //how this cell is aligned)
                data.childNodes[i].attributes.halign = align;

                //we want the cell to override any subchild's valign
                //since the cell may need to contain multiple widgets
                data.childNodes[i].removeAttr("valign");
            }

            //init subnodes
            this._initSubnodes();

            //update layout
			this.wrapper.dynlayout.update();

            //finally set wrapper alignment now that our children
            //have sizes
            this.wrapper.setAlign(align);
            this.wrapper.setValign(valign);

            this.doneLoading();
        ]]></handler>

        <method name="_initSubnodes"><![CDATA[
            var subnodes = this.datapath.p.childNodes;
            if (subnodes == null) return;
            for (var i = 0; i < subnodes.length; i++) {
                if ( subnodes[i] instanceof lz.DataElement ) {
                    subnodes[i].removeAttr("enlargeable");
                    var newcomp = this.cache.getComponent (subnodes [i]);
                    this.wrapper.dynlayout.addSubview (newcomp);
                }
            }
        ]]></method>

        <method name="doReturnToCache"><![CDATA[
            var contsubviews = this.wrapper.subviews;
            for (var i in contsubviews) {

                if (contsubviews [i] instanceof CachableComponent &&
                        contsubviews [i].visible) {
                    this.cache.returnComponent (contsubviews [i]);
                }
            }
            this.wrapper.dynlayout.clearSubviews ();
        ]]></method>

        
        <view name="wrapper">
            <DynamicSimplelayout name="dynlayout" axis="y"/>
        </view>
    </class>

</library>
