<?xml version="1.0" encoding="utf-8"?>
<library>

    <!-- =========================================
         =
         = Highlight
         =
         = Area to render and create/delete highlighted areas
         =
         ========================================= -->
    <class name="Highlight">


        <!-- ===========================
             attributes
             =========================== -->
        <attribute name="clickarea" value="$once {classroot}"/>

        <!-- which stereotype -->
        <attribute name="stereotype"/>

        <!-- passageId only valid if we're a scrolling passage -->
        <attribute name="passageId" type="string" value="-1"/>

        <!-- for scrolling highlights -->
        <attribute name="vscroll" value="null"/>
        <attribute name="hscroll" value="null"/>

        <attribute name="scrollport"/>

        <!-- dps -->
        <attribute name="hlstatus" value="$once{new lz.datapointer()}"/>
        <attribute name="eraserstatus" value="$once{new lz.datapointer()}"/>        
        <attribute name="hlstate" value="$once{new lz.datapointer()}"/>
		<attribute name="hp" value="$once{new lz.datapointer()}"/>

        <!-- ===========================
             event handlers
             =========================== -->
        <!-- init datapointers -->
        <handler name="oninit">
            this.hlstatus.setAttribute ('rerunxpath', true);
            this.eraserstatus.setAttribute ('rerunxpath', true);
            this.hlstate.setAttribute ('rerunxpath', true);

            this.hlstatus.setXPath ('dsstudentdata:/testing_client_model/current_item/item_model/manipulatives/global/@highlighter');
            this.eraserstatus.setXPath ('dsstudentdata:/testing_client_model/current_item/item_model/manipulatives/global/@eraser');
            this.hlstate.setXPath ('dsstudentdata:/testing_client_model/current_item/item_model/manipulatives/global/highlighter');
            
        </handler>

        <!-- show highlight cursor -->
        <handler name="onmouseover" reference="clickarea"><![CDATA[
            if (this.hlstatus.data == 'sel' && this.visible) {
                gController.setCurrentCursor('highlighter_cursor');
            } 
        ]]></handler>

        <!-- restore cursor -->
        <handler name="onmouseout" reference="clickarea">
            if (this.visible) {
                gController.clearAndRestoreCurrentCursor();
            }
        </handler>

        <!-- init livesel -->
        <handler name="onmousedown" reference="clickarea"><![CDATA[
            if (this.hlstatus.data == 'sel' && this.visible) {
            	gController.setCurrentCursor('highlighter_cursor');
                this.livesel.setAttribute ('x', this.getMouse ('x'));
                this.livesel.setAttribute ('y', this.getMouse ('y'));
                this.livesel.setAttribute ('width', 0);
                this.livesel.setAttribute ('height', 0);
                this.livesel.setAttribute ('visible', true);

                this.livesel.resizer.apply ();
            }
        ]]></handler>

        <!-- add new highlightarea node -->
        <handler name="onmouseup" reference="clickarea"><![CDATA[
            if (this.hlstatus.data == 'sel' && this.visible) {
                this.livesel.setAttribute ('visible', false);
                this.livesel.resizer.remove ();

                var dnstate = this.hlstate.data;

                //add a highlightarea node
                var attrs = {x: this.livesel.x,
                             y: this.livesel.y,
                             width: this.getMouse ('x') - this.livesel.x,
                             height: this.getMouse ('y') - this.livesel.y,
                             passageId: this.passageId,
                             stereotype: this.stereotype};

                var dnarea = 
                dnstate.appendChild (new lz.DataElement ('highlightarea', 
                                                        attrs,[]));

            }
        ]]></handler>


        <handler name="ondata" args="data" reference="hlstatus">
            //we're only clickable if we're in highlight mode
            this.clickarea.setAttribute ('clickable', data == 'sel');
        </handler>



        <!-- change highlights datapath to find highlight nodes of the new 
             stereotype -->
        <handler name="ondata" reference="hlstate">
        	this.highlights.datapath.setXPath ("dsstudentdata:/testing_client_model/current_item/item_model/manipulatives/global/highlighter/highlightarea[@stereotype='"+this.stereotype+"'][@passageId='"+this.passageId+"']");
        </handler>

		<method name="deleteHighlights" args="mousex, mousey"><![CDATA[
			var highlightareas = this.hlstate.xpathQuery("highlightarea[@stereotype='"+this.stereotype+"'][@passageId='"+this.passageId+"']");
            if ( highlightareas instanceof lz.DataElement ) {
				hp.setPointer(highlightareas);
                hp.deleteNode();
            } 
            else if ( highlightareas instanceof Array ) {
                for(var i = 0; i < highlightareas.length; i++){
                	var theHighlight = highlightareas[i];
                	
                	var minx = theHighlight.getAttr('x');
                	var miny = theHighlight.getAttr('y');
                	var maxx = minx + theHighlight.getAttr('width');
                	var maxy = miny + theHighlight.getAttr('height');
                	var temp;
                	if(minx > maxx){
                		temp = maxx;
                		maxx = minx;
                		minx = temp;
                	}
                	if(miny > maxy){
                		temp = maxy;
                		maxy = miny;
                		miny = temp;
                	}
                	if((mousex <= maxx) && 
                	   (mousex >= minx) && 
                	   (mousey >= miny) && 
                	   (mousey <= maxy)){
						hp.setPointer(theHighlight);
                 		hp.deleteNode();
                	}
                }
            }
		]]></method>


        <!-- ===========================
             views
             =========================== -->
        <!-- view to shown when a user is first creating a hightlight -->
        <drawview name="livesel" visible="false">

            <handler name="oninit">
                this.setAttribute ('strokeStyle', 0x999999);
                this.setAttribute ('lineWidth', 2);
            </handler>

            <resizestate name="resizer">

                <attribute name="minheight" value="${-this.y + 1}"/>
                <attribute name="minwidth" value="${-this.x + 1}"/>
                
                <attribute name="maxheight" value="${classroot.height - this.y - 1}"/>
                <attribute name="maxwidth" value="${classroot.width - this.x - 1}"/>
               

                <!-- constraints for width and height taking into account the min and maxes -->
                <attribute name="width"
                           value="${(this.immediateparent.getMouse ( 'x' ) - this.xroffset) > this.maxwidth ? 
                                  this.maxwidth : 
                                  Math.max((this.immediateparent.getMouse( 'x' )- this.xroffset), this.minwidth)}" />

                <attribute name="height"
                           value="${(this.immediateparent.getMouse ( 'y' ) - this.yroffset) > this.maxheight ? 
                                  this.maxheight : 
                                  Math.max((this.immediateparent.getMouse( 'y' )- this.yroffset), this.minheight)}" />
                
                <!-- handle highlight when scrolling -->
                <handler name="onwidth">
                    this._draw ();
                    this._scrollHighlight ('x');
                </handler>

                <handler name="onheight">
                    this._draw ();
                    this._scrollHighlight ('y');
                </handler>

                <method name="_scrollHighlight" args="axis"><![CDATA[
                    var dim = axis == 'x' ? 'width' : 'height';
                    var scroll = axis == 'x' ? classroot.hscroll : classroot.vscroll;

                    if (!scroll) return;

                    if (scroll.scrollable && scroll.axis == axis) {
                        var target = scroll.scrolltarget;
                        var diff =  classroot.scrollport.getMouse (axis) - classroot.scrollport [dim];

                        //scroll down/right
                        if (diff > 0){

                            if (target [axis] - diff > (classroot.scrollport [dim] - target [dim])) {
                                target.setAttribute (axis, target [axis] - diff);
                            } else {
                                target.setAttribute (axis, classroot.scrollport [dim] - target [dim]);
                            }
                        }
                        
                        //scroll up/left
                        diff = classroot.scrollport.getMouse (axis);
                        if (diff < 0) {
                            if (target [axis] - diff < 0) {
                                target.setAttribute (axis, target [axis] - diff);
                            } else {
                                target.setAttribute (axis, 0);
                            }
                        }                           
                    }
                ]]></method>

                <!-- render the square -->
                <method name="_draw"><![CDATA[
                    this.clear ();
                    this.beginPath();

                    this.lineTo (this.width, 0);
                    this.lineTo (this.width, this.height);
                    this.lineTo (0, this.height);
                    this.lineTo (0, 0);
                    this.closePath();

                    this.stroke ();
                ]]></method>

            </resizestate>
        </drawview>

        <!-- the stored highlighted areas -->
        <view name="highlights" bgcolor="yellow" opacity=".3"
              clickable="false">
            <datapath pooling="true"/>
            
            <handler name="ondata" args="data">
                //init attributes
                if (data) {
                    this.setAttribute ('x', data.getAttr ('x'));
                    this.setAttribute ('y', data.getAttr ('y'));

                    this.setAttribute ('width', data.getAttr ('width'));
                    this.setAttribute ('height', data.getAttr ('height'));
                } 
            </handler>

            <handler name="ondata" args="data" reference="classroot.eraserstatus">
                //we're only clickable if the erase tool is selected
                this.setAttribute ('clickable', data == 'sel');
            </handler>

            <handler name="onmousedown">
                //do delete
                var mousex = classroot.getMouse ('x');
                var mousey = classroot.getMouse ('y');
                classroot.deleteHighlights(mousex, mousey);
                gController.clearAndRestoreCurrentCursor();
            </handler>

            <handler name="onmouseover">
                gController.setCurrentCursor('eraser_cursor');
            </handler>

            <handler name="onmouseout">
                gController.clearAndRestoreCurrentCursor();
            </handler>

        </view>
        
    </class>

</library>