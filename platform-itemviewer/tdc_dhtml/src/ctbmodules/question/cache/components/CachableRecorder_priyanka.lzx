<library>
	<include href="CachableComponent.lzx" />
	<include href="../../../resources/resources.lzx" />
	<!-- ************************************
		CachableRecorder
		
		A cachable recoder.  
		*************************************-->
	<script>
	    //var iceblue1 = 0x328693;
	    var iceblue1 = 0x6F0F0F;
	    var gold4 = 0x3F1F0F; //0xF8E496
	</script>

	<class name="CachableRecorder" extends="CachableComponent"
		comptype="${gCompTypes.WIDGET_RECORDER}" aaactive="true"
		aasilent="false">
		<attribute name="blinkerDel"
			value="$once{new lz.Delegate(this,'blinker')}" />
		<attribute name="countDownDel"
			value="$once{new lz.Delegate(this,'countDownTimer')}" />
		<attribute name="defaultTotalTime" value="90" />
		<attribute name="totalTime" value="90" />
		<attribute name="recordStarted" type="boolean" value="false" />
		<attribute name="increment" type="boolean" value="0" />

		<attribute name="width" value="250" />
		<attribute name="height" value="150" />
		<attribute name="bgcolor" value="0x6F0F0F" /><!-- iceblue -->

		<attribute name="recordButton" />
		<attribute name="stopButton" />
		<attribute name="resetButton" />
		<attribute name="submitButton" />
		<attribute name="bar" />
		<attribute name="barfilled" />
		<attribute name="timertext" />
		<attribute name="red" />
		<attribute name="green" />
		<attribute name="allow_revisit" type="boolean" value="false" />
		<attribute name="widget_id" value="widget10000000000"
			type="string" />
		<attribute name="leveldel" value="$once{new lz.Delegate(this, 'updateLevel')}"/>	
		<attribute name="level" type="number" value="0"/>
			
			
		<dataset name="audioDset"
			ondata="classroot.handleResponseData(this.data)" type="http"
			onerror="classroot.requestError(this)" request="false">
		</dataset>

		<method name="init">
		super.init();
		setReferences();
		//this.leveldel.register(lz.Idle, "onidle");
		this.updateLevel();
		
	</method>

		<handler name="oninit">
			this.timertext.setText(this.totalTime);
		</handler>

		<handler name="ondata" args="data"><![CDATA[
		this.reset();
		Debug.write("data...."+data);
		if(data.getAttr('x')) {
			this.setAttribute('x', Number(data.getAttr('x')));
		}
		if(data.getAttr('y')) {
			this.setAttribute('y', Number(data.getAttr('y')));
		}
		if(data.getAttr('width')) {
			this.setAttribute('width', Number(data.getAttr('width')));
		}
		if(data.getAttr('height')) {
			this.setAttribute('height', Number(data.getAttr('height')));
		}
		
		if(data.getAttr('id')){
		this.setAttribute('widget_id', data.getAttr('id'));
		}
		
		if(data.getAttr('allow_revisit')){
		this.setAttribute('allow_revisit', data.getAttr('allow_revisit'));
		}
		var answered = false;
		gController.addAudioItem({"widget_id" : this.widget_id, "answered" : answered});
		gController.setAttribute('blockFileName' , true);
		doneLoading();
		
		
		
	]]>
	</handler>

		<method name="doReturnToCache"><![CDATA[
           var contsubviews = this.tabs.contents.tabcontents.subviews;
           for (var i in contsubviews) {
               if (contsubviews [i] instanceof CachableComponent) {
                   this.cache.returnComponent (contsubviews [i]);
               }
           }
           this.stopblinker('stop');
       ]]></method>

		<view name="main" align="center" valign="middle"
			width="${parent.width - 3}" height="${parent.height - 3}">
			<simplelayout />
			<view name="header" width="100%" height="12%"
				bgcolor="${gold4}">
				<simplelayout axis="x" />
				<view
					resource="heading_microphone"
					stretches="both" width="22" height="20" />
				<text valign="middle" font="Arial" fontsize="12"
					fontstyle="bold" fgcolor="white">
					Sound Recorder
				</text>
			</view>
			<view name="content" width="100%" height="88%"
				bgcolor="white">
				<simplelayout />
				<view name="recorddisplay" align="left" width="100%">
					<simplelayout axis="x" spacing="10" />
					<view width="5" height="5">
</view>
					<view name="recordicons" width="100" height="60">

   						<view y="8" width="8" resource="volume_meter" height="61">       
							<view name="volumebar" x="0" y="0" width="8" bgcolor="0x000000" height="${parent.height - classroot.level * 1.5}">
							</view>
						</view>

						<view name="red" opacity=".6" visible="false"
							resource="record_bullet_red"
							stretches="both" width="30" height="30" align="center"
							valign="middle">
						</view>
						<view name="green" opacity=".6" visible="false"
							resource="record_bullet_green"
							stretches="both" width="${parent.red.width}"
							height="${parent.red.height}" align="center" valign="middle" />
					</view>
					<view name="recordtimer" width="180" height="60">
						<simplelayout axis="x" spacing="3" />
						<text fontsize="11" align="right"
							valign="middle" resize="true" font="Arial" fontstyle="bold">
							Remaining Time:
						</text>
						<text name="timertext" align="left"
							valign="middle" fontsize="20" fgcolor="green" resize="true"
							font="Arial" fontstyle="bold">
						</text>
					</view>

				</view>
				<view name="bar" align="center" width="80%" height="10"
					bgcolor="0xcccccc">
					<view name="barfilled" width="0" height="100%"
						bgcolor="0x328693" />
				</view>
				<view name="justforspace" align="center" width="100%"
					height="10%" />
				<view name="widgetbuttons" width="100%" height="13%">
					<view name="whitewrapper" height="100%"
						bgcolor="white" x="26">
						<simplelayout axis="x" spacing="65" />
						<view name="buttons">
							<simplelayout axis="x" spacing="6" />
							<basebutton resource="button_record"
								name="recordButton" width="23" height="23" stretches="both"
								align="left" onclick="classroot.startblinker('record')" />
							<basebutton resource="button_stop"
								name="stopButton" width="23" height="23" stretches="both"
								enabled="false" onclick="classroot.stopblinker('stop')" />
							<basebutton resource="button_reset"
								name="resetButton" width="23" height="23" stretches="both"
								enabled="false" onclick="classroot.reset('reset')" />
						</view>
						<view name="submit">
							<basebutton resource="button_submit"
								name="submitButton" width="50" height="20" stretches="both"
								enabled="false" onclick="classroot.submit('submit')" />
						</view>
					</view>
					
			
				</view>
				
			</view>
			<view name="overLay" bgcolor="red" opacity=".5"
					width="${parent.width - 3}" height="${parent.height - 3}" 
					x="${parent.x}" y="${parent.y}" visible="false" clickable="false">
					<text>Please attach mic!!</text>
			</view>
		</view>
		
		

		<method name="startblinker" args="methodname">
//Debug.write("startblinker");
	
		if(!this.recordStarted) {	
			sendRequest(methodname);
			
			this.increment = bar.width / this.defaultTotalTime;
			this.recordStarted = true;		
			this.recordButton.setAttribute("enabled", false);
			this.green.setVisible(false);
			gController.updateAudioField(this.widget_id, true);
			
		}		
	</method>

	<method name="blinker">
//Debug.write("blinker : ",red.visible);
		this.red.setVisible(true);
	</method>

	<method name="stopblinker" args="methodname">
//Debug.write("stopblinker called : ",methodname, this.recordStarted);
		this.red.setVisible(false);
		lz.Timer.removeTimer(blinkerDel); 
		if(this.recordStarted || methodname == 'reset') {
		Debug.write("in if stopblinker called : ",methodname, this.recordStarted);
			sendRequest(methodname);
			this.green.setVisible(true);
			this.recordButton.setAttribute("enabled", true);
			this.recordStarted = false;
			this.stopCountDownTimer();
			this.stopButton.setAttribute("enabled", false);
			this.submitButton.setAttribute("enabled", true);	
		}
	</method>

	<method name="startCountDownTimer">
//Debug.write("startCountDownTimer");	
		countDownTimer();
		this.green.setVisible(false);
		this.submitButton.setAttribute("enabled", false);			
	</method>

		<method name="countDownTimer">
	<![CDATA[	
		this.totalTime -= 1; 	
		fillBarWithTime(increment);	
		this.resetButton.setAttribute("enabled", true);
//Debug.write("countDownTimer", this.totalTime);	
		if(this.totalTime == 0) {
			this.timertext.setText(this.totalTime);
			stopblinker();
			this.recordButton.setAttribute("enabled", false);
			this.resetButton.setAttribute("enabled", false);
			this.stopButton.setAttribute("enabled", false);
			this.submitButton.setAttribute("enabled", true);
			return;
		}
	
		if(this.totalTime <= 15) {
			this.timertext.setAttribute("fgcolor",red);
//Debug.write(this.totalTime);
		}else{
			this.timertext.setAttribute("fgcolor",green);
		}
		this.timertext.setText(this.totalTime);
		lz.Timer.resetTimer(countDownDel, 1000);
	]]>
	</method>

		<method name="stopCountDownTimer">
//Debug.write("stopCountDownTimer");	
		lz.Timer.removeTimer(countDownDel);
		this.leveldel.unregisterAll();
		
	</method>

		<method name="fillBarWithTime" args="timeInSecs">
//Debug.write("fillBarWithTime...", timeInSecs);
		this.barfilled.setAttribute("width",  barfilled.width + increment);
	</method>

		<method name="submit" args="methodname">
		stopblinker(methodname);
		this.recordButton.setAttribute("enabled", false);
		this.resetButton.setAttribute("enabled", false);
		this.stopButton.setAttribute("enabled", false);
		this.submitButton.setAttribute("enabled", false);
	 	gController.setAttribute('blockFileName', false);
		gController.save();
	//	gController.setAttribute('blockFileName', true);
	//  gController.resetAudioFields();
	
	</method>

		<method name="sendRequest" args="method">
         var d = audioDset;
         var p = new lz.Param();
         p.addValue( "method", method, true);
         p.addValue( "filename", gController.generateAudioFileName(),true);
         d.setQueryString( p );
         d.setAttribute("reqtype","POST"); 
         d.doRequest();
 	</method>

		<method name="handleResponseData" args="d">
		if(d.childNodes[0].data =='RECORDING_START'){
			startCountDownTimer();
			blinker();
			this.stopButton.setAttribute("enabled", true);
		}
		gCommunicator.finishCall(d,audioDset);
	</method>

		<handler name="oninit">
		var base = lz.Browser.getInitArg( 'servletUrl' );
		audioDset.setSrc(base + '/SoundRecorder.do');
      	
	</handler>

		<method name="enable"><![CDATA[
		
	]]></method>

		<method name="disable"><![CDATA[
		
	]]></method>

		<method name="reset" args="methodname">
//Debug.write("reset called : ", methodname);
		stopblinker(methodname);
		this.totalTime = this.defaultTotalTime;
		this.recordButton.setAttribute("enabled", true);
		this.submitButton.setAttribute("enabled", false);
		this.green.setVisible(false);
		this.timertext.setText(this.totalTime);		
		this.timertext.setAttribute("fgcolor",green);		
		this.barfilled.setWidth(0);
		this.increment = 0;
		gController.updateAudioField(this.widget_id, false);
	</method>

		<method name="setReferences">
	//Debug.write("setReferences....");
		this.recordButton	= main.content.widgetbuttons.whitewrapper.buttons.recordButton;
		this.stopButton 	= main.content.widgetbuttons.whitewrapper.buttons.stopButton;
		this.resetButton 	= main.content.widgetbuttons.whitewrapper.buttons.resetButton;
		this.submitButton 	= main.content.widgetbuttons.whitewrapper.submit.submitButton;
		this.bar 			= main.content.bar;
		this.barfilled		= main.content.bar.barfilled;
		this.timertext		= main.content.recorddisplay.recordtimer.timertext;
		this.red			= main.content.recorddisplay.recordicons.red;
		this.green			= main.content.recorddisplay.recordicons.green;
		
	</method>

		<method name="requestError" args="ds">
//Debug.write("request error : ", ds);
			_returnError(ds);
		</method>
		<method name="_returnError" args="ds">
//Debug.write("_returnError : ", ds);
			if(gScreens.isOnFeedbackScreen()){
				gCommunicator.finishCall(gXmlHelper.getFeedbackErrorXml(),ds);
			}
			else{
				gCommunicator.finishCall(gXmlHelper.getErrorXml(),ds);
			}
		</method>

	
		<!-- Volumeter Prototype -->
		<method name="updateLevel"><![CDATA[
			
	    var myMic = Microphone.get();

	    this.mc = this.getMCRef();
	 	mc.attachAudio(myMic);
        var level = myMic.activityLevel;
        //Debug.write("activity level : "+ level);
        if(level > 0){
			//Debug.write("mic connected");
			main.overLay.setAttribute("visible",false)
		}else{
			//Debug.write("mic not connected");
			main.overLay.setAttribute("visible",true)
		}
	
		//myMic.onActivity = function(active){
			//_root.Debug.write("if activity" + active);
		
			//if(active){
			//	Debug.write("if activity" + active);
			//}else{
			//	Debug.write("else activity" + active);
			//}
		
		//}		

	//  Debug.write("level :" + myMic.activityLevel);
            if (level < 0) {
                level = 1;
            }
            if (level != this.level) {
				if(level <= 100 && level >50){
					this.setAttribute("level", 50);
				}else{
                	this.setAttribute("level", level);
				}
            }
		
		 //this.volumeMeter.setAttribute('height',this.level * 1.5);

         lz.Timer.resetTimer(leveldel, 100); 
       ]]> </method>

	</class>
</library>