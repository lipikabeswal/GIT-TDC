<library>

    <include href="CachableComponent.lzx"/>

    <class name="CachableScrollingText" extends="CachableComponent"
           comptype="$once{gCompTypes.WIDGET_SCROLLING_TEXT}"
           defaultplacement="scrollcontents">
        <attribute name="TEXT_LEFT_PADDING" type="number" value="6"/>
        <attribute name="TEXT_RIGHT_PADDING" type="number" value="0"/>
        <attribute name="passageId" type="string" value="-1" />
        
        <method event="ondata" args="data">
            if (data.hasAttr ('width')) {
                this.setAttribute ('width', Number (data.getAttr ('width')));
            }
            if (data.hasAttr ('height')) {
                this.setAttribute ('height', Number (data.getAttr ('height')));
            }
            if (data.hasAttr ('id')) {
            	var id = data.getAttr ('id');
                this.setAttribute ('passageId', id);
                this.parent.setAttribute("passageId", id);
            }
 
            this._initSubnodes ();

			this.contents.textarea.scrollarea.scrollcontents.dynlayout.update();
			doneLoading();
        </method>
        

        <method name="doReturnToCache"><![CDATA[
            gFootNotePopup.setAttribute("scrolltext", null);
            this.panel.setAttribute ('enablehl', true);

            var contsubviews = this.contents.textarea.scrollarea.scrollcontents.subviews;
            for (var i in contsubviews) {
                if (contsubviews [i] instanceof CachableComponent &&
                        contsubviews [i].visible) {
                    //contsubviews[i].destroy();
                    this.cache.returnComponent (contsubviews [i]);
                    
                }
            }
            this.contents.textarea.scrollarea.scrollcontents.dynlayout.clearSubviews ();
        ]]></method>


        <method name="_initSubnodes"><![CDATA[
            this.panel.setAttribute ('enablehl', false);
            var dynlayout = this.contents.textarea.scrollarea.scrollcontents.dynlayout;
            var subnodes = this.datapath.p.childNodes;
            var newcomp = null;
            for (var i = 0; i < subnodes.length; i++) 
            {
        
                if ( subnodes[i] instanceof LzDataElement ) 
                {
        
                    newcomp = this.cache.getComponent (subnodes [i]);
        
                    if(newcomp instanceof CachableTextField)
                    {
                        newcomp.setAttribute("leftPadding", TEXT_LEFT_PADDING);
                        newcomp.setAttribute("rightPadding", TEXT_RIGHT_PADDING);
                    }
        
                    dynlayout.addSubview (newcomp);
        
                }
        
            }
        ]]></method>

        <resizelayout axis="y"/>
        <view name="contents" options="releasetolayout" width="100%">
            <resizelayout axis="x"/>
            <view name="textarea" options="releasetolayout"
                  height="100%" clip="true">
                <resizelayout axis="x"/>
                <view name="scrollarea" options="releasetolayout">
                    <view name="scrollcontents">
                        <DynamicSimplelayout name="dynlayout" axis="y"/>
                    </view>
                    <Highlight name="highlighter" 
                               width="${parent.scrollcontents.width}" 
                               height="${parent.scrollcontents.height}"
                               stereotype="${classroot.panel.stereotype}"
                               vscroll="$once{parent.parent.scroll}"
                               passageId="${classroot.passageId}" 
                               scrollport="$once{parent.parent}"/>
                </view>
                <vscrollbar name="scroll"
                            visible="${this.scrollable}"
                            pagesize="${this.height}" />
            </view>
        </view>


        <!-- border  -->
        <drawview width="100%" height="100%" options="ignorelayout">
            <method event="onwidth">
                this.draw ();
            </method>
            <method event="onheight">
                this.draw ();
            </method>

            <method name="draw">
                this.clear ();
                this.beginPath ();
                
                //has to be .5 so is draws right inside the border of the view
                this.moveTo (.5,.5);
                this.lineTo (this.width - .5, .5);
                this.lineTo (this.width - .5, this.height - .5);
                this.lineTo (.5, this.height - .5);
                this.lineTo (.5, .5);

                this.strokeStyle = Number(gController.questionFontColor);
                this.strokeWidth = 1;
                this.stroke ();
            </method>
        </drawview>

    </class>

</library>
