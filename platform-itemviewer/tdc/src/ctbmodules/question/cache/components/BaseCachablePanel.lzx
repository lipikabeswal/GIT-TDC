<library>
	<include href="CachableComponent.lzx"/>
    <include href="lib/Highlight.lzx"/>

	<!-- ************************************
         BaseCachablePanel
         
         Base class for a cachable panel.  
         *************************************-->

	<class name="BaseCachablePanel" extends="CachableComponent" 
           comptype="$once {gCompTypes.WIDGET_PANEL}"
           defaultplacement="contents" panel="${this}"
           bgcolor="white" fontcolor="black" 
           width="${this.wrapper.width}" height="${this.wrapper.height}">

        <attribute name="stereotype" value="$path{'@stereotype'}"/>
        <attribute name="enablehl" value="true"/>
        <attribute name="isaccom" value="false"/>
        <attribute name="passageId" type="string" value="-1" />
        <attribute name="dp" value="$once{new LzDatapointer()}" />

        <attribute name="growtocontents" value="false"/>
        <!-- ================================
             method
             ================================= -->

		<method name="setGrFocus">
			for(var i in wrapper.scrollcontainer.offsetwrapper.contents.subviews){
				var sv = wrapper.scrollcontainer.offsetwrapper.contents.subviews[i];
				if(sv instanceof CachableGriddedResponse ||
				   sv instanceof BaseCachablePanel){
					sv.setGrFocus();
				}
			}
		</method>
		
        <method event="oninit">
            this.setAttribute ('alignto', this.wrapper.scrollcontainer);
        </method>
        <!--
            When the data changes reset all of our properties/info
        -->

		<method event="ondata" name="initComp" args="data"><![CDATA[
            if (!data) return;
			Debug.write();
			

			setPassageIdFromData(data);
            var contents = this.wrapper.scrollcontainer.offsetwrapper.contents;

            //width and height
			if (data.hasAttr ('width')) {
				//Debug.write("help");
				this.wrapper.setAttribute ('width', Number (data.getAttr ('width')));
            }

			if (data.hasAttr ('height')) {
                var nh = data.getAttr("height");
                this.setAttribute("growtocontents", nh == "");
                if (nh == "") {
                    nh = null;
                } else {
                    nh = Number(nh);
                }
				this.wrapper.setAttribute ('height', nh);
            }

            //x and y of component
			if (data.hasAttr ('x')){
				this.setAttribute ('x', Number (data.getAttr ('x')));
			}
			if (data.hasAttr ('y')) {
    			this.setAttribute ('y', Number (data.getAttr ('y')));
			}
            
            // x and y offsets for contents
			contents.setAttribute ('x', 0);
			contents.setAttribute ('y', 0);

			if (data.hasAttr ('left_padding')){
				contents.setAttribute ('x', Number (data.getAttr ('left_padding')));
			}
			if (data.hasAttr ('top_padding')) {
    			contents.setAttribute ('y', Number (data.getAttr ('top_padding')));
			}

			if (data.hasAttr ('enablehl')) {
				this.setAttribute('enablehl', data.getAttr('enablehl'));
			}
			
            
            var isaccom = false;
            if (style) {
                if (style ['bgcolor']) {
                    this.setAttribute ('bgcolor', style.bgcolor);
                    isaccom = true;
                }
                else if (!(this instanceof CachableAnswerAreaPanel || this instanceof CachableAnswerAreaAbsolutePanel)){
					this.setAttribute('bgcolor', gController.questionBgColor);
                }
                if (style ['font_color']) {
                    this.setAttribute ('fontcolor', Number (style.font_color));
                }
                if (style ['font_magnification']) {
                    this.setAttribute ('fontsize', style.font_magnification * canvas.basefontsize);
                   // this is not working - it's leaving the fontsize at 11 instead of 12
                   // this.setAttribute ('fontsize', style.font_magnification * canvas.fontsize);
                } else {
                    this.setAttribute ('fontsize', canvas.basefontsize);
                }
            }
            else if(!(this instanceof CachableAnswerAreaPanel || this instanceof CachableAnswerAreaAbsolutePanel)){
				this.setAttribute('bgcolor', gController.questionBgColor);
            }
            
            this.setAttribute("isaccom", isaccom);

            //make subviews
            this._initSubnodes ();

            doneLoading();
            
            //inform gFootNotePopup footnotes
            if((this instanceof CachableScrollingTextPanel) 
                || this instanceof CachableTabsPanel) 
            {
                gFootNotePopup.setAttribute("scrolltext", this);
            }                
        ]]></method>

		<!-- 
		  	Method which randomizes all distractors of a SR item.
		  	It, actually updates the datanode containing the distractor data.	 
		-->
		<method name="applyRandomDistractors" args="dnode"><![CDATA[
			var itemtype = dnode.ownerDocument.getPointer().xpathQuery('element_package/item_model/interaction/@type');

			if(itemtype == 'choice' &&
				(dnode.nodeName == "answer_area_panel" || 
			    	dnode.nodeName == "answer_choices_absolute_positioned_panel")) {

				var dp;
				var answidget = [];
				var selwidget = [];
				var numOfOptions = 0;
				var eid = 0;
				var arrIndex = 0;
				var option;
				var tempArr = [];
				var randomIndex;
				var rationaleNode;
				var tempNodeArr = [];
				var tempNode = null;
				var ansWidNode = null;
								
				dp = new LzDatapointer();
				dp.setPointer(dnode);
				rationaleNode = dp.xpathQuery('answer_choice_widget/rationale');

			 	if(rationaleNode != null) {
			 		gController.itemHasRationalNode = true;
			 		return;
			 	}
			 	else {
			 		gController.itemHasRationalNode = false;
			 	}

				answidget = dp.xpathQuery("answer_choice_widget");
				selwidget = dp.xpathQuery("answer_choice_widget/selector_widget");
				numOfOptions = selwidget.length;

				eid = dnode.ownerDocument.getPointer().xpathQuery('element_package/item_model/@eid');
				arrIndex = gController.getItemNumber(eid) <= gController.newModBase ? 
															gController.getItemNumber(eid): 
																gController.getItemNumber(eid) - gController.modBase;
	//Debug.write("arrIndex,eid,itemnumber : ", arrIndex,eid,gController.getItemNumber(eid));	
				randomIndex = gController.getElementFromRandomIndexArray(arrIndex - 1);
	//Debug.write("randomIndex : ", randomIndex);	
	            gController.setAttribute("assignedRandomDistractorIndex",
	            	gController.getElementFromDistractorArray(randomIndex,numOfOptions).split(""));

	//Debug.write("assignedRandomDistractorIndex : ", gController.assignedRandomDistractorIndex);	

				for(var i = 0; i < selwidget.length; i++) {
					option = gController.assignedRandomDistractorIndex[i];

					if(option != null && option != "undefined") {	
						selwidget[i].setAttr("randomIdentifier", option);
					}
					else {
						selwidget[i].setAttr("randomIdentifier", selwidget[i].getAttr("identifier"));
					}
				}

				for(var i = 0; i < answidget.length; i++) {
					tempArr[i] = answidget[i].serialize();
				}

				//sort the anwser widgets ascending by 'randomIdentifier' 
				tempArr.sort(sortNodes);
				
				for(var i = 0; i < tempArr.length; i++) {
					tempNode = LzDataNode.stringToLzData(tempArr[i]);
					ansWidNode = answidget[i];

					if(ansWidNode.hasAttr("x")) {
							tempNode.setAttr("x",ansWidNode.getAttr("x"));
					}

					if(ansWidNode.hasAttr("y")) {
							tempNode.setAttr("y",ansWidNode.getAttr("y"));
					}
					tempNodeArr[i] = tempNode; 
				}
				dnode.setChildNodes(tempNodeArr);
			}		
		]]></method>
		
       <method name="setPassageIdFromData" args="data"><![CDATA[
            var id = data.getAttr('id');
            if(id == null || typeof(id)=="undefined"){
            	id = "-1";
            }
            this.setAttribute("passageId", id);
         ]]></method>

        <method name="doReturnToCache"><![CDATA[
            var contsubviews = this.wrapper.scrollcontainer.offsetwrapper.contents.subviews;
            this.setAttribute('enablehl', true);
            for (var i in contsubviews) {

                if (contsubviews [i] instanceof CachableComponent &&
                        contsubviews [i].visible) {
                    this.cache.returnComponent (contsubviews [i]);
                }
            }
        ]]></method>

		<method name="scrollToShow" args="theView"><![CDATA[
			var panelMinX = this.x;
			var panelMaxX = this.x + this.width - wrapper.vscroll.width;
			var colMinX = theView.getAttributeRelative('x', this);
			var colMaxX = colMinX + theView.width;
			var scrollRight = panelMinX - colMinX;
			var scrollLeft = colMaxX - panelMaxX;
			var oldStepSize = wrapper.hscroll.stepsize;
			if(scrollRight > 0){
				wrapper.hscroll.setAttribute('stepsize', scrollRight);
				wrapper.hscroll.step(-1);
				wrapper.hscroll.setAttribute('stepsize', oldStepSize);
			}
			else if(scrollLeft > 0){
				wrapper.hscroll.setAttribute('stepsize', scrollLeft);
				wrapper.hscroll.step(1);
				wrapper.hscroll.setAttribute('stepsize', oldStepSize);
			}
		]]></method>

        <!-- ================================
             Views
             ================================= -->

        <view name="wrapper" clip="true">
            <view name="scrollcontainer"
                  width="${this.offsetwrapper.width &gt; parent.width
                         ? this.offsetwrapper.width : parent.width}"
                  height="${this.offsetwrapper.height &gt; parent.height || classroot.growtocontents
                          ? (this.offsetwrapper.height + 
                              (classroot.growtocontents &amp;&amp; classroot.comptype == gCompTypes.WIDGET_ANSWER_AREA_PANEL ? this.offsetwrapper.contents.y : 0)): 
                          parent.height}">
                <view name="offsetwrapper">
                    <view name="contents"/>
                </view>
                <Highlight name="highlighter" 
                           width="100%" height="100%"
                           stereotype="${classroot.stereotype}"
                           passageId="${classroot.passageId}" 
						   vscroll="$once{classroot.parent instanceof BaseCachablePanel ? classroot.parent.wrapper.vscroll : parent.parent.vscroll}"
                           hscroll="$once{classroot.parent instanceof BaseCachablePanel ? classroot.parent.wrapper.hscroll : parent.parent.hscroll}"
                           scrollport="$once{classroot.parent instanceof BaseCachablePanel ? classroot.parent.wrapper : parent.parent}"                           options="ignorelayout" 
                           visible="${classroot.enablehl}"/>
            </view>
            <vscrollbar name="vscroll"
                        height="${parent.hscroll.visible ? 
                                  ( classroot.growtocontents ? parent.scrollcontainer.height - parent.hscroll.height :
                                    parent.scrollcontainer.height) :
                                  (classroot.growtocontents ? parent.scrollcontainer.height : parent.height)}"
                        pagesize="${this.height}"
                        visible="${this.scrollable &amp;&amp; !classroot.growtocontents}"/>
            <hscrollbar name="hscroll" visible="${this.scrollable}"
                        width="${parent.vscroll.visible ? 
                               classroot.width - parent.vscroll.width :
                               classroot.width}"
                        pagesize="${this.width}"/>
        </view>


        <!-- for when layouts correctly take into account scrollbars
            
            view name="wrapper" clip="true" bgcolor="red"
              width="${classroot.vscroll.visible 
                     ? classroot.width - classroot.vscroll.width : classroot.width}"
              height="${parent.hscroll.visible 
                      ? parent.height - parent.hscroll.height : parent.height}">

            <view name="scrollcontainer"
                  width="${this.offsetwrapper.width &gt; parent.width
                         ? this.offsetwrapper.width : parent.width}"
                  height="${this.offsetwrapper.height &gt; parent.height
                          ? this.offsetwrapper.height : parent.height}">

                <view name="offsetwrapper">
                    <view name="contents"/>
                </view>

                <Highlight name="highlighter" width="100%" height="100%" 
                           stereotype="${classroot.stereotype}"
                           scrollbar="$once{classroot.vscroll}"
                           scrollport="$once{parent.parent}"
                           options="ignorelayout"/>
            </view>
        </view>

        <vscrollbar name="vscroll" visible="${this.scrollable}" align="right"
                    height="${parent.hscroll.visible ?
                            classroot.height - parent.hscroll.height :
                            classroot.height}"
                    scrolltarget="${classroot.wrapper.scrollcontainer}"/>
        <hscrollbar name="hscroll" visible="${this.scrollable}" valign="bottom"
                    width="${parent.vscroll.visible ?
                            classroot.width - parent.vscroll.width :
                            classroot.width}"
                    scrolltarget="${classroot.wrapper.scrollcontainer}"/-->

        <!-- border when scrolling -->

        <drawview width="100%" 
                  height="100%"
                  visible="${(classroot.wrapper.vscroll.visible
                           || classroot.wrapper.hscroll.visible)
                           &amp;&amp; !classroot.growtocontents}">

            <method event="onwidth">
                this.draw ();
            </method>
            <method event="onheight">
                this.draw ();
            </method>

            <method name="draw">
                this.clear ();
                this.beginPath ();
                
                //has to be .5 so is draws exactly inside the border of the view
                this.moveTo (.5,.5);
                this.lineTo (this.width - .5, .5);
                this.lineTo (this.width - .5, this.height - .5);
                this.lineTo (.5, this.height - .5);
                this.lineTo (.5, .5);

                this.strokeStyle = Number(gController.questionFontColor);
                this.strokeWidth = 1;
                this.stroke ();
            </method>

        </drawview>

    </class>
</library>