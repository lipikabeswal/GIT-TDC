<library>
	<include href="CachableComponent.lzx" />
	<include href="../../../resources/resources.lzx" />
	<!-- ************************************
		CachableRecorder
		
		A Cachable Recorder Widget for recording student's 
		voice as a response to an Audio item.  
		*************************************-->

	<class name="CachableRecorder" extends="CachableComponent"
		comptype="${gCompTypes.WIDGET_RECORDER}" aaactive="true"
		aasilent="false">
		<attribute name="blinkerDel"
			value="$once{new LzDelegate(this,'blinker')}" />
		<attribute name="countDownDel"
			value="$once{new LzDelegate(this,'countDownTimer')}" />
		<attribute name="defaultTotalTime" value="90" />
		<attribute name="totalTime" value="90" />
		<attribute name="recordStarted" type="boolean" value="false" />
		<attribute name="increment" type="boolean" value="0" />

		<attribute name="width" value="250" />
		<attribute name="height" value="120" />
		<attribute name="bgcolor" value="0x6F0F0F" /><!-- iceblue -->

		<attribute name="recordButton" />
		<attribute name="stopButton" />
		<attribute name="resetButton" />
		<attribute name="submitButton" />
		<attribute name="bar" />
		<attribute name="barfilled" />
		<attribute name="timertext" />
		<attribute name="meterContainer" />
		<attribute name="volumeMeter" />
		<attribute name="micNotConnected" />
		<attribute name="recordIconsView" />
		<attribute name="attachMic" />
		<attribute name="whitewrapperOverLay" />
		<attribute name="recordStatus" />
		<attribute name="widgetbuttons" />
		<attribute name="red" />
		<attribute name="green" />
		<attribute name="allow_revisit" type="boolean" value="false" />
		<attribute name="widget_id" value="widget10000000000"
			type="string" />
		<attribute name="leveldel"
			value="$once{new LzDelegate(this, 'updateLevel')}" />
		<attribute name="level" type="number" value="0" />
		<attribute name="activityArray" value="$once{new Array()}" />
		<attribute name="countlevel" type="number" value="0" />

		<dataset name="audioDset"
			ondata="classroot.handleResponseData(this.data)" type="http"
			onerror="classroot.requestError(this)" request="false">
		</dataset>

		<method name="init">
			super.init();
			setReferences();
		</method>

		<handler name="oninit">
			this.timertext.setText(this.totalTime);
		</handler>

		<method event="ondata" args="data"><![CDATA[
			this.reset();
			if(data.getAttr('x')) {
				this.setAttribute('x', Number(data.getAttr('x')));
			}
			
			if(data.getAttr('y')) {
				this.setAttribute('y', Number(data.getAttr('y')));
			}
			
			this.setAttribute('width', this.width);
			this.setAttribute('height', this.height);
	
			if(data.getAttr('id')){
				this.setAttribute('widget_id', data.getAttr('id'));
			}
			
			if(data.getAttr('allow_revisit')){
				this.setAttribute('allow_revisit', data.getAttr('allow_revisit'));
			}
			
			if(data.getAttr('totalTime')){
				this.setAttribute('totalTime', data.getAttr('totalTime'));		
				this.setAttribute('defaultTotalTime', data.getAttr('totalTime'));
				this.timertext.setText(this.totalTime);		
			}

			var answered = false;
			gController.addAudioItem({"widget_id" : this.widget_id, "answered" : answered});
			gController.setAttribute('blockFileName' , true);
			doneLoading();
			
			if(this.isinited && this.visible) {
				Debug.write("ondata....");
			//	this.updateLevel();
			}
		]]>
		</method>

		<method name="doReturnToCache"><![CDATA[
		   this.stopblinker('stop');
           this.getMCRef().attachAudio(false);
           LzTimer.removeTimer(leveldel);
       ]]></method>

		<view name="main" align="center" valign="middle"
			width="${parent.width - 3}" height="${parent.height - 3}">
			<simplelayout />
			<view name="header" width="100%" height="15%"
				bgcolor="0x3F1F0F">
				<simplelayout axis="x" />
				<view resource="heading_microphone" stretches="both"
					width="20" height="18">
				</view>
				<text valign="middle" font="CTB" fontsize="11"
					fontstyle="bold" fgcolor="white">
					Sound Recorder
				</text>
			</view>
			<view name="content" width="100%" height="85%"
				bgcolor="white">
				<simplelayout />
				<view name="recorddisplay" align="left" width="100%">
					<simplelayout axis="x" spacing="2" />
					<view width="5" height="10"></view>

					<view name="recordicons" width="100" height="40">
						<view name="meterContainer" x="${parent.x + 7}"
							y="11" width="41" resource="volume_meter" height="35">
							<view name="volumebar" x="0" y="0"
								width="41" height="0" resource="volume_meter_flip"
								stretches="both" opacity=".8" bgcolor="white">
							</view>
						</view>

						<view name="red" opacity=".6" visible="false"
							x="${parent.x + 120}" y="11" resource="record_bullet_red"
							stretches="both" width="18" height="18" valign="middle">

						</view>
						<view name="green" opacity=".7" visible="false"
							x="${parent.x + 120}" y="11" resource="record_bullet_green"
							stretches="both" width="${parent.red.width}"
							height="${parent.red.height}" valign="middle">

						</view>

					</view>

					<view y="11" name="showStatus">
						<text name="recordStatus" fontsize="8"
							font="CTB" resize="true" x="42" y="1" fontstyle="bold">
						</text>
					</view>

				</view>
				<view name="recordtimer" x="${parent.bar.x + 90}"
					y="${parent.bar.height-15}" height="15">
					<simplelayout axis="x" spacing="0" />
					<text name="remaining" fontsize="9" font="Arial"
						resize="true" valign="bottom">
						TIME REMAINING:
					</text>
					<text name="timertext" fontsize="9" fontstyle="bold"
						font="Arial" fgcolor="0x008000" resize="true" valign="bottom">
					</text>
					<text fontsize="8" font="Arial" y="1" resize="true"
						valign="bottom">
						secs
					</text>
				</view>
				<view name="bar" align="center" width="80%" height="6"
					bgcolor="0xcccccc">
					<view name="barfilled" width="0" height="100%"
						bgcolor="0x328693">
					</view>
				</view>

				<view name="justforspace" align="center" width="100%"
					height="5%">
				</view>
				<view name="widgetbuttons" width="100%" height="18%">
					<view name="whitewrapper" height="100%"
						bgcolor="white" x="26">
						<simplelayout axis="x" spacing="65" />
						<view name="buttons">
							<simplelayout axis="x" spacing="6" />
							<basebutton resource="button_record"
								name="recordButton" width="23" height="23" stretches="both"
								align="left" onclick="classroot.startblinker('record')" />
							<basebutton resource="button_stop"
								name="stopButton" width="23" height="23" stretches="both"
								enabled="false" onclick="classroot.stopblinker('stop')" />
							<basebutton resource="button_reset"
								name="resetButton" width="23" height="23" stretches="both"
								enabled="false" onclick="classroot.reset('reset')" />
						</view>
					
					</view>
				</view>

				<view name="justforspace2" align="center" width="100%"
					height="10%">
				</view>
				<!--view align="center" width="100%" height="10%" name="overLay">
					<text align="center" fgcolor="red">Please attach mic!!</text>
					</view-->
			</view>

			<!--view bgcolor="red" opacity=".5"
				width="${parent.width - 3}" height="${parent.height - 3}" 
				x="${parent.x}" y="${parent.y}" visible="false" clickable="false">
				<text>Please attach mic!!</text>
				</view-->
		</view>
		<view name="whitewrapperOverLay" bgcolor="white" x="2"
			clickable="false" showhandcursor="false" y="20"
			height="${parent.height - 25}" width="${parent.width - 5}"
			onclick="return false;" visible="false">
			<simplelayout axis="x" inset="10" spacing="10" />
			<view name="micNotConnected" valign="middle"
				resource="mic_not_connected" />
			<text name="attachMic" fontsize="10" font="CTB"
				resize="true" valign="middle">
				Microphone is not connected ...
			</text>
		</view>

		<method name="startblinker" args="methodname">
		//Debug.write("startblinker");
		if(!this.recordStarted) {	

		}		
		</method>

		<method name="blinker">
			this.red.setVisible(true);
			this.recordStatus.setText("RECORDING...");
		</method>

		<method name="stopblinker" args="methodname">
		this.red.setVisible(false);
		LzTimer.removeTimer(blinkerDel); 
		this.countLevel = 0;
		if(this.recordStarted || methodname == 'reset') {
			this.green.setVisible(true);
			this.recordStatus.setText("AUDIO CAPTURED");
			this.recordStarted = false;
			this.stopCountDownTimer();
			this.stopButton.setAttribute("enabled", false);
		}
		</method>

		<method name="reset" args="methodname">
			//Debug.write("reset called : ", methodname);
			//stopblinker(methodname);
			this.totalTime = this.defaultTotalTime;
			this.recordButton.setAttribute("enabled", true);
			this.submitButton.setAttribute("enabled", false);
			this.green.setVisible(false);
			this.timertext.setText(this.totalTime);		
			this.timertext.setAttribute("fgcolor",0x008000);	
			this.recordStatus.setText(" ");	
			this.barfilled.setWidth(0);
			this.increment = 0;
			this.countLevel =0;
			this.resetButton.setAttribute("enabled",false);
			gController.updateAudioField(this.widget_id, false);
		</method>

		<method name="startCountDownTimer">
			countDownTimer();
			this.green.setVisible(false);
			this.submitButton.setAttribute("enabled", false);			
		</method>

		<method name="countDownTimer">
		<![CDATA[	
			this.totalTime -= 1; 	
			fillBarWithTime(increment);	
			this.resetButton.setAttribute("enabled", false);
			if(this.totalTime <= 0) {
				this.timertext.setText(this.totalTime);
				stopblinker('stop');
				return;
			}
		
			if(this.totalTime <= 15) {
				this.timertext.setAttribute('fgcolor',0xff0000);
			}else{
				this.timertext.setAttribute('fgcolor',0x008000);
			}
			this.timertext.setText(this.totalTime);
			LzTimer.resetTimer(countDownDel, 1000);
			//Changes to stop the recording if the student clicks the pause screen when
			//recording is going on.
			if(gScreens.isOnPauseScreen() && !gItemInterface.visible){
				if(this.recordStarted){
				this.stopblinker('stop');
				LzTimer.removeTimer(countDownDel);
				}
		}
			//Changes to stop the recording if the student clicks the stop button or finish button screen when
			//recording is going on.
			if(gScreens.isOnFinishScreen() && !gItemInterface.visible){
				if(this.recordStarted){
				this.stopblinker('stop');
				LzTimer.removeTimer(countDownDel);
				}
		}
			if(gScreens.isOnTimeOutScreen() && !gItemInterface.visible){
				if(this.recordStarted){
				this.stopblinker('stop');
				LzTimer.removeTimer(countDownDel);
				}
		}
		
		]]>
		</method>

		<method name="stopCountDownTimer">
			LzTimer.removeTimer(countDownDel);
		</method>

		<method name="fillBarWithTime" args="timeInSecs">
			this.barfilled.setAttribute("width",  barfilled.width + increment);
		</method>

	


		<method name="setReferences">
			//Debug.write("setReferences....");
			this.recordButton	= main.content.widgetbuttons.whitewrapper.buttons.recordButton;
			this.stopButton 	= main.content.widgetbuttons.whitewrapper.buttons.stopButton;
			this.resetButton 	= main.content.widgetbuttons.whitewrapper.buttons.resetButton;
			this.submitButton 	= main.content.widgetbuttons.whitewrapper.submit.submitButton;
			this.bar 			= main.content.bar;
			this.barfilled		= main.content.bar.barfilled;
			this.timertext		= main.content.recordtimer.timertext;//recorddisplay.recordtimer.
			this.red			= main.content.recorddisplay.recordicons.red;
			this.green			= main.content.recorddisplay.recordicons.green;
			this.meterContainer = main.content.recorddisplay.recordicons.meterContainer;
			this.volumeMeter	= main.content.recorddisplay.recordicons.meterContainer.volumebar;
			//this.micNotConnected= main.content.recorddisplay.recordicons.micNotConnected;
			this.recordIconsView= main.content.recorddisplay.recordicons;
			//this.attachMic 		= main.content.recorddisplay.recordicons.attachMic;		
			this.widgetbuttons 	=main.content.widgetbuttons;
			this.recordStatus 	= main.content.recorddisplay.showStatus.recordStatus;
			this.whitewrapperOverLay= whitewrapperOverLay;
		</method>

		

	

	

	</class>
</library>