<library>
<include href="lz/vscrollbar.lzx"/>

<!--- Implements visual baseedittext with scrollbar. -->
<class name="scrolledittextnew" extends="baseedittext" multiline="true"  height="100" clip="true">
    <!--// ATTRIBUTES //-->
    <attribute name="border" type="number" value="0"/>

    <!--- Name of class to instantiate for vertical scroll bar.
          @keywords public -->
    <attribute name="vscrollbarclassname" type="string" value="vscrollbar"/>

    <!--- Width to give for scrollbar
          @keywords private -->
    <attribute name="_vscrollwidth" type="number" value="0"/>

    <!--- Our vertical scrollbar
          @keywords private -->
    <attribute name="_vs" value="null"/>


    <!--// METHODS //-->
    <!--- @keywords overrides -->
    <method name="init">
        super.init();
        
        // Instantiate vertical scrollbar using configured classname.
        var scrollClass:Class = lz[this.vscrollbarclassname];
        
        if ($debug) {
            if (scrollClass === undefined) {
                Debug.warn("scrollbarclassname undefined", this);
            }
        }
        
        if (scrollClass) {
            this._vs = new scrollClass(this, {
            	axis:"y",
                scrollattr:"pos",
                scrollmax:0,
                scrolltarget:this.inp,
                disabledbgcolor: 12240085
            });
            
            var xDel:LzDelegate = new lz.Delegate(this, '_updateX');
            xDel.register(this._vs, 'onwidth');
            xDel.register(this, 'onwidth');
            xDel.register(this, 'onborder');
            
            new lz.Delegate(this, '_updateScrollMax', this.inp, 'onscrollheight');
            new lz.Delegate(this, '_updateStepSize', this.inp, 'onlineheight');
            new lz.Delegate(this, '_setVScrollWidthFromVisibility', this._vs, "onvisible");
            
            // call once manually
            this._updateX();
            this._updateStepSize();
            this._setVScrollWidthFromVisibility(this._vs.visible);
        }
    </method>

    <!--- @keywords private -->
    <method name="_updateX" args="ignore=null" returns="void">
        if (this._vs) this._vs.setAttribute("x", this.width - this._vs.width);
    </method>

    <!--- @keywords private -->
    <method name="_updateStepSize" args="ignore=null" returns="void">
        if (this._vs) this._vs.setAttribute("stepsize", this.inp.lineheight);
    </method>

    <!--- @keywords private -->
    <method name="_updateScrollMax" args="ignore=null" returns="void">
        if (this._vs) this._vs.setAttribute("scrollmax", this.inp.scrollheight);
    </method>

    <!--- @keywords private -->
    <method name="_setVScrollWidthFromVisibility" args="visible:Boolean" returns="void">
        this.setAttribute("_vscrollwidth", visible ? this._vs.width : 0);
    </method>

    <!--- Overrides a parent method which calculates y position for text
          in a way that doesn't make sense for this class. We just trap the 
          call and do nothing. This field is positioned in y by the constraint
          y=${parent.border}
          Note: although this method is a no-op, it still has to be declared,
          so the parent class's method does not get called on instances of 
          this class. 
          @keywords overrides
          @keywords private -->
    <method name="_placeTextY">
    </method>


    <!--// VIEWS //-->
    <!--- @keywords private -->
    <view name="_face" bgcolor="0xffffff" 
        x="${parent.border}" y="${parent.border}"
        width="${parent.width - parent.border * 2}" 
        height="${parent.height - parent.border * 2}" 
    />

    <!--- @keywords private -->
    <_newinternalinputtext name="inp" scrollevents="true" multiline="true"
        x="${parent.border}" y="${parent.border}" 
        width="${parent.width - parent.border * 2 - parent._vscrollwidth}"
        height="${parent.height - parent.border * 2}" 
        pattern="[A-Za-z0-9!@;:#$%\*()-\=+/&amp;,./?&lt;&gt;&quot;&apos;{}[\\]\\\\\_|`~ \\^]*"
        fgcolor="${Number(gController.answerFontColor)}">
        <attribute name="pos" type="number" value="0"/>

       <handler name="onwidth">
            var fontSize = 0;
            if(gController.hasFontAccommodation){
				fontSize = 18;
			}
			else{
				fontSize = 12;
			}
			
			 var answerFontColor = gController.answerFontColor;
			 var textFontColor;
			 if(Number(answerFontColor) == 0)
				answerFontColor = "0x000000";
			 if(answerFontColor.indexOf('0x') != -1) {
			 	textFontColor = answerFontColor.replace('0x', '#');
			 }
			 else {
				textFontColor = answerFontColor;
			 }
			 
			
			var comWidth = this.width-1;
			var elm = this.getDisplayObject();
			elm.setAttribute('id','scrolledittext');
			
			setScrollEdittextWidth(elm.id,comWidth,fontSize,textFontColor);	
		</handler>
		
 		<handler name="onheight">
 		    var fontSize = 0;
            if(gController.hasFontAccommodation){
				fontSize = 18;
			}
			else{
				fontSize = 12;
			}
			
			 var answerFontColor = gController.answerFontColor;
			 var textFontColor;
			 if(Number(answerFontColor) == 0)
				answerFontColor = "0x000000";
			 if(answerFontColor.indexOf('0x') != -1) {
			 	textFontColor = answerFontColor.replace('0x', '#');
			 }
			 else {
				textFontColor = answerFontColor;
			 }
			 
			
			var comHeight = this.height-5;
            var elm = this.getDisplayObject();
			elm.setAttribute('id','scrolledittext');
			
			setScrollEdittextHeight(elm.id,comHeight,fontSize,textFontColor);	
		</handler>

        <handler name="oninit">
				var el = this.getDisplayObject();
				el.setAttribute('id','scratchpad');
				
				el.setAttribute('maxlength', 10000);
			    hideScrollbar(el.id);	
			</handler>
        <setter name="pos" args="p">        	
            if (this.p == p){
				Debug.write("Pos internal return", p, this.p, scroll);
				 return;
			}
            
            if (this.inited) {
                var scroll:Number = 1 - Math.floor(p / this.lineheight);
                if (scroll !== this.scroll) {
                    this.setAttribute('scroll', scroll);
                    Debug.write("Pos internal", p, this.p, scroll);
                }
                this.pos = p;
                if (this.onpos){
                 this.onpos.sendEvent(p);
				Debug.write("Pos internal send event", p, this.p, scroll);
                }
            }

        </setter>
        
        <handler name="ontext">
            if ($dhtml) this.sprite.__updatefieldsize();
        </handler> 

        <handler name="onscroll" args="IGNORE_THIS_ARG">
            this.setAttribute('pos', -this.lineheight * (this.scroll - 1));
        </handler>
    </_newinternalinputtext>
</class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006-2011 Laszlo Systems, Inc. All Rights Reserved.               *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
