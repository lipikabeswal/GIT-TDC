package com.ctb.tdc.web.servlet;
  
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.apache.log4j.Logger;

import com.ctb.tdc.web.dto.StateVO;
import com.ctb.tdc.web.utils.AuditFile;
import com.ctb.tdc.web.utils.MemoryCache;
import com.ctb.tdc.web.utils.ServletUtils;
     
/** 
 * @author Tai_Truong
 * 
 * This supports response persistence and lifecycle events. 
 * New events are only accepted and persisted locally if prior events were acknowledged by 
 * upstream partner, otherwise an error occurs after a suitable wait/retry cycle. 
 * When prior events have been acknowledged by the TMS, new events generated by the client 
 * are acknowledged by the local servlet as soon as they are securely persisted locally, allowing 
 * the user to continue. Delay (and ultimately, in severe cases, interruption) of test thus only 
 * occur if upstream response time exceeds user 'think' time. To ensure that no responses are 
 * lost, an error is returned immediately in that case.
 */
public class PersistenceServlet extends HttpServlet {
       
    private static final long serialVersionUID = 1L;
    static Logger logger = Logger.getLogger(PersistenceServlet.class);
     
	/**
	 * Constructor of the object.
	 */
	public PersistenceServlet() {
		super();
	}

    /**
     * Initialization of the servlet. <br>
     *
     * @throws ServletException if an error occure
     */
    public void init() throws ServletException {
        // do nothing
    }
        
	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
	}

    /**
     * The doPost method of the servlet. <br>
     *
     * This method is called when a form has its tag value method equals to post.
     * 
     * @param request the request send by the client to the server
     * @param response the response send by the server to the client
     * @throws ServletException if an error occurred
     * @throws IOException if an error occurred
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {    
        //String method = request.getParameter("method");   // this line use with test.html
        String method = null;                               // this line is for release        
        if ((method != null) && (! method.equals(ServletUtils.NONE_METHOD))) {    
            String xml = ServletUtils.buildPersistenceParameters(request, method);
            handleEvent(response, method, xml);
        }
        else {
            doGet(request, response);            
        }
    }

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {    
        String method = ServletUtils.getMethod(request);
        
        long startTime = System.currentTimeMillis();
        System.out.print("called PersistenceServlet method: " + method);
        
        String xml = ServletUtils.getXml(request);
        handleEvent(response, method, xml);    
        
        System.out.print(", elapsed time: " + (System.currentTimeMillis() - startTime + "\n"));
	}

    /**
     * The handleEvent method of the servlet. <br>
     * 
     * call the method based on each event, return result response xml to client
     * 
     * @param HttpServletResponse response
     * @param String method
     * @param String xml
     * @throws IOException 
     */
    private void handleEvent(HttpServletResponse response, String method, String xml) throws IOException {
        String result = ServletUtils.OK;
        boolean validSettings = ServletUtils.validateServletSettings();
                
        // call method to perform an action only if servlet settings is valid
        if (! validSettings)
            result = ServletUtils.getServletSettingsErrorMessage();
        else if (method != null && method.equals(ServletUtils.VERIFY_SETTINGS_METHOD))
        {
            result = verifyServletSettings();
        }
        else if (method != null && method.equals(ServletUtils.LOGIN_METHOD))
            result = login(xml);
        else if (method != null && method.equals(ServletUtils.SAVE_METHOD))
            result = save(response, xml);        
        else if (method != null && method.equals(ServletUtils.FEEDBACK_METHOD))
            result = feedback(xml);        
        else if (method != null && method.equals(ServletUtils.UPLOAD_AUDIT_FILE_METHOD))
            result = uploadAuditFile(xml);
        else if (method != null && method.equals(ServletUtils.WRITE_TO_AUDIT_FILE_METHOD))
            result = writeToAuditFile(xml);
        else
            result = ServletUtils.ERROR;    
        
        // return response to client
        if (result != null) {
            ServletUtils.writeResponse(response, result);
        }
    }
    
    /**
     * The verifyServletSettings method of the servlet. <br>
     * 
     *  verify if values in tdc.properties are valid 
     */
    private String verifyServletSettings() {
        String errorMessage = ServletUtils.OK;                
        if (! ServletUtils.validateServletSettings()) {
            // return error message if values in properties file are invalid
            errorMessage = ServletUtils.getServletSettingsErrorMessage();
        }
        else {
            // properties file are valid, now check for TMS connection
            //errorMessage = ServletUtils.httpClientGetStatus();
        }
        return errorMessage;
    }
    
    private String login(String xml) {
        String result = ServletUtils.ERROR;
    
        try {
            String filePath = System.getProperty(AuditFile.TDC_HOME) + "/data/loginresponse.xml";
            result = new String(ServletUtils.readFromFile(new File(filePath)));
        	ServletUtils.processContentKeys(result);
            logger.info("Login successfully.");                
        } 
        catch (Exception e) {
            logger.error("Exception occured in login() : " + ServletUtils.printStackTrace(e));
            result = ServletUtils.buildXmlErrorMessage("", e.getMessage(), ""); 
        }
        return result;
    }
    
    private String feedback(String xml) {
    	return ServletUtils.OK;
    }

    private String save(HttpServletResponse response, String xml) {
    	return ServletUtils.OK;
    }
    
    private static String save(String xml) throws Exception {
    	return ServletUtils.OK;
    }

    private String writeToAuditFile(String xml) {
        return ServletUtils.OK;
    }
    
    private String uploadAuditFile(String xml) {
    	return ServletUtils.OK;
    }
        
}
