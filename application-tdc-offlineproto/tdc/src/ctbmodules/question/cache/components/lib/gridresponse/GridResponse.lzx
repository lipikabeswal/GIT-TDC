<library>

    <include href="GridResponseCol.lzx"/>
    <!-- =====================
         Gridded Response
         
         A collection of gridded response columns that form a gridded response.
         This class does some simple management of the columns
         ===================== -->

    <class name="GridResponse" 
           x="${11*this.fontsize/canvas.basefontsize-10}"
           width="${contents.width + 2 * this.fontsize}"
           height="${contents.height + 2}">

        <attribute name="isdark" value="false"/>
        <attribute name="hscroll"/>
        <attribute name="vscroll"/>
        
        <attribute name="ccount" value="0"/>
		<attribute name="acceptKeyDown" type="boolean" value="true"/>
		
        <!-- used to keep track of which column currently is active -->
        <selectionmanager name="selman">
            <attribute name="clickdel" value="$once {new LzDelegate (this, 'checkClick')}"/> 
            
             <method event="oninit">
                this.clickdel.register (LzGlobalMouse, 'onmousedown');
            </method>

            <method name="select" args="tosel"><![CDATA[
                super.select (tosel);
                this.clickdel.enable ();

                return;


                var thecols = classroot.contents.subviews;

                //allow all cols to accept mouse clicks again
                for (var i in thecols) {
                    thecols [i].setAttribute ('ignoremouse', false);
                }

                //see if we should scroll the component
                var target = classroot.hscroll.scrolltarget; 
                var thex = tosel.getAttributeRelative ('x', target);
                var ismoving = false;
                var newx = 0;

                if ( (thex + tosel.width)  > classroot.hscroll.parent.width) { 
                    ismoving = true;
                    newx = target.x + 
                           (classroot.hscroll.parent.width - (thex + tosel.width)) - 
                           (classroot.vscroll.visible ? classroot.vscroll.width : 0);
                } else if (thex < 0) {
                    ismoving = true;
                    newx = target.x - thex;
                }

                //scroll the component
                if (ismoving) {
                    //all cols should ignore the initial mouse over to prevent
                    //a new column from being selected once we scroll
                    for (var i in thecols) {
                        thecols [i].setAttribute ('ignoremouse', true);
                    }
                    target.setAttribute ('x', newx);
                }
            ]]></method>

            <method name="clearSelection">
                super.clearSelection ();
				if(LzFocus.getFocus() instanceof GridResponseCol){
                	LzFocus.clearFocus();
                }
                this.clickdel.disable ();
            </method>


            <method name="checkClick" args="who"><![CDATA[
                var panel = classroot.parent.panel;
                if (!classroot.containsPt (classroot.getMouse ('x'),
                                           classroot.getMouse ('y')) ||
                     !panel.containsPt (panel.getMouse ('x'),
                                         panel.getMouse ('y')) ||
                      !this.isGrPanelChild(who) ||
                      (classroot.readBtn.visible && 
                       classroot.readBtn.containsPt(classroot.readBtn.getMouse ('x'), 
                                                    classroot.readBtn.getMouse ('x')))) {
                    this.clearSelection ();
                }
            ]]></method>

			<method name="isGrPanelChild" args="child">
				var result = false;
				var grPanel;
				if(child != null){
					grPanel = child.searchParents('gridResponsePanelIdentifier');
				}
				if (grPanel != null){
					result = true;
				}
				return result;
			</method>
			
            <!-- select the prev column -->
            <method name="selectPrev"><![CDATA[
                var prevcolnum = this.selected [0].clonenumber - 1;

                if (prevcolnum < 0) {
                    this.clearSelection();
                }
                else{
	                var prevcol = classroot.contents.col.getCloneNumber (prevcolnum);
	                if (prevcol) this.select (prevcol);
                }
            ]]></method>

            <!-- select the next column -->
            <method name="selectNext">
                var nextcolnum = this.selected [0].clonenumber + 1;
                if (nextcolnum >= classroot.contents.col.clones.length) {
					this.clearSelection ();
                }
                else{
	                var nextcol = classroot.contents.col.getCloneNumber (nextcolnum);
	                if (nextcol) this.select (nextcol);
                }
            </method>

            <!-- multiselect -->
            <method name="isMultiSelect">
                return false;
            </method>
            <method name="isRangeSelect">
                return false;
            </method>

        </selectionmanager>

		<method name="read">
			var txt = this.getReadableTextForGr();
			gReadableText.read(txt);
		</method>
		
		<method name="getReadableTextForGr"><![CDATA[
			var result = "";
			var numCols = contents.col.clones.length;
			for(var i = 0; i< numCols; i++){
				var column = contents.col.getCloneNumber(i);
				result = result + column.getReadableTextForColumn();
				if(i < numCols - 1){
					result = result + " ";
				}
			}
			return result;
		]]></method>
		
		<method name="setGrFocus">
			contents.col.getCloneNumber(0).setMyFocus();
		</method>
		
        <!-- =======
             views
             ======= -->
        <simplelayout axis="x" spacing="5"/>
        
        <!-- the data replicated columns -->
        <view name="contents" 
              clickable="true" 
              showhandcursor="false">
            <simplelayout axis="x" spacing="1"/>
            
            <GridResponseCol name="col" datapath="gridcol"
                             fontsize="${classroot.fontsize}">
                <method event="oninit">
                    if ( datapath.p ) {
                        ++classroot.ccount;
                        if ( classroot.ccount ==
                             datapath.p.parentNode.childNodes.length ) {
                            classroot.ccount = 0;
                            if ( !classroot['ondone'] ) {
                                new LzEvent( classroot, 'ondone' );
                            }
                            classroot.ondone.sendEvent();
                        }
                    }
                    classroot.readBtn.setAttribute('y', this.getTextY() + 5);
                </method>
                <!-- on data focus on my first col -->
                <method event="ondata" args="data">
                    //Debug.write("GridResponseCol.ondata", this);
                     if (data.getOffset() == 0) {
                     	setMyFocus();
                     }                    
                </method>
                
                <method name="setMyFocus">
                	LzFocus.setFocus(this);
                </method>
                
            </GridResponseCol>
            
        </view>
        
        
 		<basebutton resource="read_btn" 
 		            name="readBtn"
 		            visible="${canvas.readable}">
			<method event="onclick">
                classroot.read();
			</method>
		</basebutton>
    </class>

</library>