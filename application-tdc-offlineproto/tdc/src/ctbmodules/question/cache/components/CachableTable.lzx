<library>
    
    <include href="CachableComponent.lzx"/>

    <!-- ============================
         ==
         ==    CachableTable
         ==
         ==
         ==
         ============================ -->

    <class name="CachableTable" extends="CachableComponent"
           comptype="${gCompTypes.WIDGET_TABLE}"
           defaultplacement="table">


        <!-- ============================
             =====    ATTRIBUTES   ======
             ============================ -->

        <!-- border around table -->
        <attribute name="bordersize" value="2" type="number"/>

        <!-- autoenlarge table -->
       <attribute name="autoenlarge" value="false"/>       


        <!-- ============================
             =====     METHODS     ======
             ============================ -->

        <method event="ondata" args="data">
            <![CDATA[
             //set border size
            this.setAttribute("bordersize", 
                              data.getAttr("border") == "yes" ? 2: 0);
            
            //set title and title width
            if (data.hasAttr("titlewidth")) {
                this.thetable.contents.title.setAttribute("titlewidth", Number(data.getAttr("titlewidth")));
            } else {
                this.thetable.contents.title.setAttribute("titlewidth", -1);
            }

            this.thetable.contents.title.setAttribute("text", 
                    '<p align="center">' + decodeBrackets(data.getAttr('title')) + '</p>');

                       
            //set lines
            var hspace = data.getAttr("showvlines") == "yes" ? 1 : 0;
            var vspace = data.getAttr("showhlines") == "yes" ? 1 : 0;

            //show enlarge button if necessary
            this.enlarge.setAttribute("visible", data.getAttr("enlargeable") == "yes");

            //autoenlarge 
            this.setAttribute("autoenlarge", data.getAttr("autoenlargeable") == "yes"
                                  && gController.isaccomodated);

            //init cell props
            var rows = datapath.xpathQuery("row");
            if (!(rows instanceof Array)) rows = [rows];

            var cells;
            var maxwidth = 0;
            var nx = 0;
            var ny = 0;

            for (var i = 0; i < rows[0].childNodes.length; i++) {
                cells = datapath.xpathQuery("row/cell[" + String(i + 1) + "]");
                if (!(cells instanceof Array)) cells = [cells];                

                for (var j = 0; j < cells.length; j++) {
                    if (Number(cells[j].attributes.width) > maxwidth) {
                        maxwidth = Number(cells[j].attributes.width);
                    }
                }

                for (j = 0; j < cells.length; j++) {
                    cells[j].attributes.width = maxwidth;
                    cells[j].attributes.height = Number(rows[j].attributes.height);
                    cells[j].attributes.y = ny;
                    cells[j].attributes.x = nx;
                    ny += Number(rows[j].attributes.height) + vspace;
                }

                nx += maxwidth + hspace;
                ny = 0;
                maxwidth = 0;
            }

            this._initSubnodes();
            doneLoading();
            ]]>
        </method>

        <method name="decodeBrackets" args="s"><![CDATA[
	        var ltstr = "";
	        var ltstrs = s.split('&lt;');
	        for (var i=0; i<ltstrs.length; i++){
	        	if(i != 0){
	        		ltstr = ltstr + '<';
	        	}
	        	ltstr = ltstr + ltstrs[i];
	        }
	        var gtstrs = ltstr.split('&gt;');
	        var result = "";
	        for (var j=0; j<gtstrs.length; j++){
	        	if(j != 0){
	        		result = result + '>';
	        	}
	        	result = result + gtstrs[j];
	        }
	
	        return result;
        ]]></method>

        <method name="_initSubnodes">
            <![CDATA[
            //we only want to init the cells
            var cells = datapath.xpathQuery("row/cell");
            if (!(cells instanceof Array)) cells = [cells];
            
            var newcomp = null;
            for (var i = 0; i < cells.length; i++) {            
                this.cache.getComponent (cells[i]);
            }
            ]]>
        </method>


        <method name="doReturnToCache">
            <![CDATA[
            var table = this.thetable.contents.borderview.table;
            for (var i in table.subviews) {

                if (table.subviews [i] instanceof CachableComponent &&
                        table.subviews [i].visible) {
                    this.cache.returnComponent (table.subviews [i]);
                }
            }
            ]]>
        </method>


        <method name="getAttrRelComp" args="attr, from">
            var p = from.immediateparent;
            var toreturn = from[attr];

            while (!(p instanceof CachableComponent)) {
                toreturn += getAttrRelComp(attr, p);
                p = p.immediateparent;
            }
            return toreturn;
        </method>

        <method name="doneLoading"><![CDATA[
            //alignment in panel
            var align = "left";
            if (data.hasAttr("halign")) {
                align = data.getAttr("halign");
            }
            this.setAlign(align);
        
            if (this.autoenlarge) {
                var contents = this.thetable.contents;

                //use our own get relative to because ours is flaking out.  This will
                //essentially give us the attribute relative to our parent
                var offset = getAttrRelComp("x", this); 
        
                var fontmag = this.fontsize/canvas.basefontsize;
                var factor = (parent.width - offset - 1)/contents.width;

                //make sure we're not magnified beyond fontmag
                if (factor > fontmag) {
                    factor = fontmag;
                }

                var newh = Math.floor(contents.height * factor);//(contents.width * factor) * contents.height/contents.width;

                //make room for the scrollbar if necessary
                if ( parent.height + (newh - contents.width) > this.panel.height && factor != fontmag) {
                    factor = (parent.width - offset - 15)/contents.width;
                    newh = Math.floor(contents.height * factor);//(contents.width * factor) * contents.height/contents.width;
                }

                //set the size
                this.thetable.setAttribute("width", Math.floor(contents.width * factor));
                this.thetable.setAttribute("height", newh);
        
            } else {
                this.thetable.setAttribute("width", this.thetable.contents.width);
                this.thetable.setAttribute("height", this.thetable.contents.height);

            }

            super.doneLoading();
        ]]></method>

        <!-- ============================
             =====      VIEWS      ======
             ============================ -->
        <simplelayout axis="y" spacing="0"/>

        <view name="thetable" stretches="both">
            <view name="contents" 
                width="${Math.max(title.width, borderview.width)}">
                <simplelayout axis="y" spacing="0"/>

                <!-- title of table
                       Note: The fontsize is set to the canvas' basefontsize,
                             and not this component's, because the enlarging of
                             the entire table takes care of the title as well.
                  -->
                <text name="title" 
                      align="center"
                      multiline="true" 
                      width="${this.titlewidth != -1 ? 
                             this.titlewidth : parent.borderview.width}"
                      fontsize="${canvas.basefontsize+2}" 
                      fgcolor="${classroot.fontcolor}"
					  bgcolor="${classroot.bgcolor}"
                      clickable="${canvas.readable}"
                      onclick="gReadableText.read(text)"
                      fontstyle="bold">
                    <attribute name="titlewidth" value="0"/>
                </text>

                <!-- borderview contains the title and table and defines a border -->
                <view name="borderview" bgcolor="${classroot.fontcolor}" align="center"
                      width="${this.table.width + 2 * classroot.bordersize}"
                      height="${this.table.height + 2 * classroot.bordersize}">
                    
                    <!-- table with one top line and row driven by dataset -->
                    <view name="table" 
                          x="${classroot.bordersize}" y="${classroot.bordersize}"/>
                </view>
            </view>
        </view>
        <!-- enlarge button -->
        <EnlargeButton name="enlarge" 
                    x="${classroot.thetable.width-this.width}"/>
            
    </class>
    
</library>