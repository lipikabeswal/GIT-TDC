
<view id="gEnlargePopup" 
      y="100" 
      align="center" 
      visible="false"
      clickable="true"
      showhandcursor="false" >

    <dataset name="dsenlarge">
        <question/>
    </dataset>

	<attribute name="clickdel" value="$once{new LzDelegate(this, 'checkClick')}" />
	
 	<method name="checkClick">
		if(!this.containsPt(this.getMouse('x'), this.getMouse('y'))){
			this.shrink();
		}
	</method>
	
	<method name="shrink">
        this.clickdel.unregisterAll();   
        this.setAttribute("visible", false);	
        this.contents.scaler.scaled.datapath.setPointer(null);
   </method>
	
   <method name="enlarge" args="dn, w, h, color, stereotype">
        this.clickdel.register (LzGlobalMouse, 'onmousedown');        
        var dnq = this.dsenlarge.getPointer().p.childNodes[0];
        var v = this.contents.scaler.scaled;
        var clone = dn.cloneNode(true);
		var hl = false;
		
        //create panel using params passed in
        var dnpanel = new LzDataElement("panel",
                                        { width      : w,
                                          height     : h,
                                          stereotype : stereotype,
                                          enablehl   : hl},
                                        [clone]);

        //unattach our view from data to force it to re-replicate
        v.datapath.setPointer(null);
        
        clone.setAttr("enlargeable", "no");
        dnq.setChildNodes([dnpanel]);

        //attach out view to the data
        v.datapath.setPointer(dnq);

        //set some props
        this.windowbg.changeColor(color);
        this.setAttribute("visible", true);
        
        // why do I need to set this again - it hasn't changed ??!!
        this.setAttribute('showhandcursor', false);
        contents.mousetrap.setAttribute('showhandcursor', false);
    </method>

    <drawview name="windowbg" width="750" height="415">

        <method event="oninit">
            this.clear();
            
            var roundness = 5;
            var thickness = 3;
            var shadow = 4;

            drawRoundRect (shadow, shadow, this.width + shadow, this.height + shadow, 
                           roundness,
                           gray70, null, .5);
            drawRoundRect (0, 0, this.width, this.height, 
                           roundness,
                           0xC4C4C4, 0x7195B1, 1);
            this.changeColor(white);
        </method>

        <method name="changeColor" args="color">
            var roundness = 5;
            var thickness = 3;

            drawRoundRect (thickness, thickness, this.width - thickness, this.height - thickness, 
                           roundness,
                           color, 0x7195B1, 1);
        </method>

        <method name="drawRoundRect" args="x0, y0, x1, y1, roundness, fill, stroke, alpha">
            this.beginPath();
            this.moveTo(roundness + x0 , y0);
            this.lineTo(x1 - roundness, y0);
            this.quadraticCurveTo(x1, y0, x1, roundness + y0);
            this.lineTo(x1, y1 - roundness);
            this.quadraticCurveTo(x1, y1, x1 - roundness, y1 );
            this.lineTo(x0 + roundness, y1);
            this.quadraticCurveTo(x0, y1, x0, y1 - roundness);
            this.lineTo(x0, y0 + roundness);
            this.quadraticCurveTo(x0, y0, roundness, y0);
            this.closePath();


            this.setAttribute("globalAlpha", alpha);

            if (fill) {
                this.setAttribute("fillStyle", fill);
                this.fill();
            }
            if (stroke) {
                this.setAttribute("strokeStyle", stroke);
                this.stroke();
            }

            this.setAttribute("globalAlpha", 1);
        </method>

    </drawview>

    <view name="contents" x="10" y="10"
          width="${parent.width - 20}" height="${parent.height - 20}">
        
		<!--  trap all mouse clicks that fall through question -->
	    <view x="${parent.x}" y="${parent.y}"
	          width="${parent.width}" height="${parent.height}" 
	          clickable="true" showhandcursor="false"
	          name="mousetrap" />
          
        <view name="scaler" stretches="both" align="center">
            <Question name="scaled" id="enlarged" doaccomlayout="false">
                <datapath/>
                <method name="calcSize">
                    <![CDATA[
                    if (this.width == 0 || this.height == 0) return;

                    var conts = parent.parent;
                    var ratio = this.width/this.height;
                    var valign = "middle";

                    var w, h;
                    if (conts.width/conts.height < ratio) {
                        w = conts.width;
                        h = conts.width/ratio;
                    } else {
                        w = conts.height * ratio;
                        h = conts.height;
                    }
                    
                    //see if we have to move for the zoom button. We'll position the item
                    //at the bottom of the popup.
                    if (h > conts.height - 2 * (conts.zoombtn.height + conts.zoombtn.y + 10) &&
                        w > conts.width - 2 * (conts.zoombtn.width + 10 )) {

                        valign = "bottom";
                        h = conts.height - (conts.zoombtn.height + conts.zoombtn.y + 10);
                        w = conts.width;

                        if (w/h < ratio) {
                            h = w/ratio;
                        } else {
                            w = h * ratio;
                        }
                    }
                    parent.setAttribute("height", h);
                    parent.setAttribute("width", w);
                    parent.setValign(valign);
                    ]]>
                </method>
                <method event="onwidth">
                    this.calcSize();
                </method>
                <method event="onheight">
                    this.calcSize();
                </method>
            </Question>
        </view>
        <EnlargeButton name="zoombtn" resource="zoom_out_btn"
              y="5" x="${parent.width - this.width - 10}"
              iszoomin="false"/>
    </view>
</view>