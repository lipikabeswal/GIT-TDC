<library>
	<include href="ReadableText.lzx"/>
	<include href="DownloadManager.lzx"/>
    <script>
        function countDataNodes ( nodes ) {
            if ( null == nodes ) {
                return 0;
            } else if ( nodes instanceof LzDataNode ) {
                return 1;
            } else if ( nodes instanceof Array ) {
                return nodes.length;
            } else {
//                Debug.warn( 'bad nodes array ', nodes );
                return NaN;
            }
        }

        function nullOrSpace( s ) {
            return s == null || s == '' || s == ' ';
        }
    </script>

    <!--
        ==================================================
        Datasets
        ==================================================
    -->
    <dataset name="dslogin"/>
    <dataset name="dsdisplay" src="display.xml"/>

    <dataset name="dssubtest"/>

    <dataset name="dsitem"
    	     type="http"
	         queuerequests="true" 
	         querytype="post"
	         timeout="120000" 
	         onerror="gCommunicator.checkShowError(gXmlHelper.getContentErrorXml())" 
	         ontimeout="gCommunicator.checkShowError(gXmlHelper.getContentErrorXml())" 
	         ondata="gController.processItemResponse()"/>

    <dataset name="dsstudentdata" src="studentData.xml"/>

    <!--
        ==================================================
        Test Controller
        ==================================================
    -->

    <node id="gController">
		<attribute name="dp" value="$once{new LzDatapointer()}" />
		<attribute name="state"                type="string" value="$once{START_STATE}" />
    	<attribute name="START_STATE"          type="string" value="start" />
 		<attribute name="LOGIN_STATE"          type="string" value="login" />
 		<attribute name="DOWNLOAD_STATE"       type="string" value="download" />
    	<attribute name="SAVE_LOAD_STATE"      type="string" value="saveload" />
    	<attribute name="PAUSE_STATE"          type="string" value="pause" />
    	<attribute name="PAUSED_RESUME_STATE"  type="string" value="pausedResume" />
    	<attribute name="TIMEOUT_STATE"        type="string" value="timeout" />
    	<attribute name="SUBTEST_STATE"        type="string" value="subtest" />
     	<attribute name="TIMEOUT_STATE"        type="string" value="timeout" />
     	<attribute name="OUT_OF_TIME_OPEN_STATE"    type="string" value="outOfTimeOpen" />
     	<attribute name="FINISH_STATE"         type="string" value="finish" />
     	<attribute name="WRITE_TO_AUDIT_FILE_STATE"   type="string" value="writeToAuditFile" />
     	<attribute name="UPLOAD_AUDIT_FILE_STATE"   type="string" value="uploadAuditFile" />
     	<attribute name="FINISH_SAVE_STATE"   type="string" value="finishSave" />
     	<attribute name="SUBTEST_FINISH_STATE"   type="string" value="subtestFinish" />
      	<attribute name="SUBTEST_STATE"        type="string" value="subtest" />
    	<attribute name="FEEDBACK_STATE"       type="string" value="feedback" />
  		<attribute name="TERMINATE_STATE"      type="string" value="terminate" />
   		<attribute name="SAVE_END_SUBTEST_STATE"  type="string" value="saveEndSubtest" />
 		<attribute name="ASSESSMENT_NAME"           type="string" value="ob_assessment" />
 		<attribute name="SCO_NAME"                  type="string" value="sco" />
 		<attribute name="TESTING_SESSION_DATA_NAME" type="string" value="testing_session_data" />
    	<attribute name="communicatorResponse" type="string" value="null" />
 		<attribute name="heartbeatResponse"    type="string" value="null" />
 		<attribute name="INIT_LEV"             type="string" value="lms_initialize"/>
		<attribute name="FINISH_LEV"           type="string" value="lms_finish"/>
		<attribute name="PAUSE_LEV"            type="string" value="stu_pause"/>
		<attribute name="STOP_LEV"             type="string" value="stu_stop"/>
		<attribute name="RESUME_LEV"           type="string" value="stu_resume"/>
		<attribute name="TERMINATED_LEV"       type="string" value="terminated"/>

        <attribute name="doUnlockUI" />
        <attribute name="loadNode" />
        <attribute name="currentSubtestIndex" value="0" />
		<attribute name="accomstyles"/>
        <attribute name="isaccomodated" type="boolean" value="false"/>
        
        <attribute name="elapsedms"  value="0"/>
        <attribute name="durationms" value="0"/>
        <attribute name="qtimestamp" value="0"/>
        <attribute name="timing"     value="false"/>

        <attribute name="lsid"     value="0"/>
        <attribute name="scid"     value="0"/>

		<attribute name="firstSubtest" value="true" type="boolean"/>
   	    <attribute name="isPreviewer" value="$once{LzBrowser.getInitArg( 'gPreviewer' ) == 'true'}" type="boolean" />
		<attribute name="focusOnGr" value="false" type="boolean" />
		<attribute name="userid" type="string" value="null" />
		<attribute name="password" type="string" value="null" />
		<attribute name="accesscode" type="string" value="null" />
		<attribute name="questionBgColor" type="color" value="0xFFFFFF"/>

		<!--
            ============================================================
            Datapointers
            ============================================================
        -->
		<datapointer name="dplogin" xpath="dslogin:/login_response"/>
		
        <datapointer name="dpsubtest" xpath="dssubtest:/subtest">
            <method event="ondata">
                gController.clearStudentData();
                gController.accomstyles = {};
                gController._getAccomStyles ();
                gController.setupRationalePopup();
                gController.initTest();
             </method>
        </datapointer>

		<datapointer name="dpstimulus"
					 xpath="dsstudentdata:/testing_client_model/shared_stimulus"/>

        <datapointer name="dprestart"
                     xpath="dslogin:/login_response/consolidated_restart_data"/>

        <datapointer name="dpitem" xpath="dsitem:/element_package"/>
 
        <datapointer name="dpstudentdata"
                     xpath="dsstudentdata:/testing_client_model"/>

        <datapointer name="dpdisplay"
                     xpath="dsdisplay:/display"/>

        <!--
            ============================================================
            Loading Test
            ============================================================
        -->

         <method event="oninit">
        	gScreens.showLogin();
			var base = LzBrowser.getInitArg( 'servletUrl' );
			dsitem.setSrc(base + '/ContentServlet.do');        	
        </method>

		<method name="login" args="_userid, _password, _accesscode">
			setAttribute('userid', _userid == null ? null : _userid.toLowerCase());
			setAttribute('password', _password == null ? null : _password.toLowerCase());
			setAttribute('accesscode', _accesscode == null ? null : _accesscode.toLowerCase());
			setState(LOGIN_STATE);
			gCommunicator.login(userid, password, accesscode);
		</method>
		
		<method name="getSubtest">
			setAttribute("doUnlockUI", true);
			setState(SUBTEST_STATE);
			var params = getCurrentSubtestParams();
			gCommunicator.getSubtest(params[0], params[1], params[2]);
		</method>
		
        <method name="processItemResponse">
			gController.massageItemLml();
			gController.changeCurrItemData ();
        </method>
		<method name="showError" args="xml">
			stopHeartbeat();
            gItemInterface.setVisible( false );
            LzCursor.unlock();
            gReadableText.stopReading();
            gScreens.showError(xml);
		</method>
		
		<method name="getCurrentSubtestParams">
			var currentSubtest = getCurrentSubtest();
			var id = currentSubtest.getAttr('adsid');
			var hash = currentSubtest.getAttr('asmt_hash');
			var key = currentSubtest.getAttr('asmt_encryption_key');
			return new Array(id, hash, key);
		</method>
		
		<method name="getCurrentSubtest"><![CDATA[
			var subtests = dplogin.xpathQuery('manifest/sco');
			var result = null;
			if(subtests instanceof LzDataElement){
				if(currentSubtestIndex == 0){
					result = subtests;
				}
			}
			else{
				if(currentSubtestIndex < subtests.length){
					result = subtests[currentSubtestIndex];
				}
			}
			return result;
		]]></method>
		
    	<method name="getInitialSubtestIndex"><![CDATA[
    		var result = 0;
    		if(dprestart.isValid()){
    			var scoid = dprestart.xpathQuery('tsd/@scid');
    			dp.setXPath('dslogin:/login_response/manifest');
	    		var scos = dp.xpathQuery('sco');
	    		var found = false;
	    		while(scos && result < scos.length && !found){
	    			var sco = scos[result];
Debug.write("sco[" + result + "] " + sco);	
Debug.write("id: " + sco.getAttr("id"));
	    			if(sco.getAttr('id') == scoid){
	    				found = true;
	    			}
	    			else{
	    				result++;
	    			}
    			}
    		}
    		return result;
    	]]></method>
    	
    	<method name="getSubtestList"><![CDATA[
    		dp.setXPath('dslogin:/login_response/manifest');
    		var result = dp.xpathQuery('sco');
    		if(result instanceof LzDataElement){
    			result = [result];
    		}
     		return result;
    	]]></method>
    	
		<method name="setState" args="_state">
			setAttribute('state', _state);
		</method>
		
		<method event="oncommunicatorResponse" args="response">
			if(_isCommunicationError(response)){
				_handleError(response);
			}
			else {
				switch (state){
					case LOGIN_STATE:
						_handleLoginResponse(response);
						break;
					case DOWNLOAD_STATE:
						_handleDownloadResponse(response);
						break;
					case SUBTEST_STATE:
Debug.write("subtest:");
printBigString(response);
						_handleSubtestResponse(response);
						break;
					case SAVE_LOAD_STATE:	
						_handleSaveLoadResponse(response);
						break;
					case PAUSE_STATE:	
						_handlePauseResponse(response);
						break;
					case PAUSED_RESUME_STATE:	
						_handlePausedResumeResponse(response);
						break;
					case TIMEOUT_STATE:
						_handleTimeoutResponse(response);
						break;
					case FINISH_STATE:
						_handleFinishResponse(response);
						break;
					case WRITE_TO_AUDIT_FILE_STATE:
						_handleWriteToAuditFileResponse(response);
						break;
					case UPLOAD_AUDIT_FILE_STATE:
						_handleUploadAuditFileResponse(response);
						break;
					case FINISH_SAVE_STATE:
						_handleFinishSaveResponse(response);
						break;
					case SAVE_END_SUBTEST_STATE:
						_handleSaveEndSubtestResponse(response);
						break;
					case SUBTEST_FINISH_STATE:
						_handleSubtestFinishResponse(response);
						break;
					case OUT_OF_TIME_OPEN_STATE:
						_handleOutOfTimeOpenResponse(response);
						break;
					case FEEDBACK_STATE:
						_handleFeedbackResponse(response);
						break;
					default:
						break;
				}
			}
		</method>
		
		<method name="_handleUploadAuditFileResponse" args="response"><![CDATA[
//            gScreens.hide();

            // clock is stopped
            var remainingms = durationms - elapsedms;
            if ( remainingms < 0 ) remainingms = 0;
            var remainingsecs = (remainingms / 1000);
            var remainingmins = remainingsecs / 60;
            var remaininghours = remainingmins / 60;

            var secs = Math.floor( remainingsecs ) % 60;
            var mins = Math.floor( remainingmins ) % 60;
            var hours = Math.floor( remaininghours );

            if ( secs < 10 ) secs = '0' + secs;
            if ( mins < 10 ) mins = '0' + secs;
            if ( hours < 10 ) hours = '0' + secs;

            // sum of correct answers
            var rawscore = countDataNodes(
                dpstudentdata.xpathQuery(
                    "runtime/item_model[@score='1']"
                )
            );

            var crtotal = countDataNodes(
                dpstudentdata.xpathQuery(
                    "runtime/item_model/interaction[@type='text_entry']"
                )
            );

            var grtotal = countDataNodes(
                dpstudentdata.xpathQuery(
                    "runtime/item_model/interaction[@type='grid']"
                )
            );

			var notSrOnRestart = countDataNodes(
                dpstudentdata.xpathQuery(
                    "runtime/item_model[@not_sr='t']"
                )
            );
            var maxpossible = totalQuestions();
            var completionmode = ""; // empty string or 'time-out' - need to fix for timeout
            // time left in hh:mm:ss format
            var sessiontime = hours + ':' + mins + ':' + secs; 
            var unscored = crtotal + grtotal + notSrOnRestart;

            // clear restart xml
            dprestart.deleteNode();
			
			setState(FINISH_SAVE_STATE);
			gCommunicator.endSubtest( rawscore, maxpossible, completionmode, sessiontime, unscored );
		]]></method>
		
		<method name="_handleFeedbackResponse" args="response"><![CDATA[
    		gScreens.showFeedback(response);
		]]></method>
		
		<method name="_handleSaveEndSubtestResponse" args="response">
			endSubtest('');
		</method>

		<method name="_handleSubtestFinishResponse" args="response">
			var node = LzDataNode.stringToLzData(response);
			var nextSubtestIndex = getSubtestIndex(node);
Debug.write("next subtest index: " + nextSubtestIndex);
			if(nextSubtestIndex != -1){
				setAttribute('currentSubtestIndex', nextSubtestIndex);
				getSubtest();
			}
			else if(isFeedback()){
				getFeedback();
			}
			else {
				terminate();
			}
		</method>
		<method name="getSubtestIndex" args="node"><![CDATA[
			dp.setPointer(node);
			var subtestId = dp.xpathQuery('save_testing_session_data/tsd/next_sco/@id');
			var result = 0;
			var found = false;
			// this method will only be called if there is more than one subtest - eg subtests is an array
			var subtests = dplogin.xpathQuery('manifest/sco');
			while(result < subtests.length && !found){
				var subtest = subtests[result];
				if(subtest.getAttr('id') == subtestId){
					found = true;
				}
				else{
					result = result + 1;
				}
			}
			// return -1 if not found - no next subtest
			if(!found){
				result = -1;
			}
			return result;
		]]></method>
				
		<method name="terminate">
			setState(TERMINATE_STATE);
			gCommunicator.terminate();
			goToGoodbyeScreen();
		</method>
		
		<method name="getFeedback">
			setState(FEEDBACK_STATE);
			gCommunicator.feedback(lsid);
		</method>
		
		<method name="isFeedback" args="subtest">
			var feedback = dplogin.xpathQuery('manifest/feedback');
			return feedback != null;
		</method>
		
		<method name="_handleFinishSaveResponse" args="response">
			setState(SUBTEST_FINISH_STATE);
			resetHeartbeat();
			gCommunicator.lifecycle(FINISH_LEV);
		</method>
		
		<method name="_handleFinishResponse" args="response">
			goToFinishScreen();
		</method>
		
		<method name="goToGoodbyeScreen">
			stopHeartbeat();
			gScreens.showGoodbye();
			LzTimer.addTimer( dcloseBrowser, 5000 );
		</method>
		
		<attribute name="dcloseBrowser"
                   value="$once{ new LzDelegate( this, 'closeBrowser' ) }"/>
		
		<method name="closeBrowser">
//Debug.write("gController.closeBrowser");
			gCommunicator.closeBrowser();
		</method>
		
		<method name="_handleTimeoutResponse" args="response">
			goToTimeoutScreen();
		</method>
		
		<method name="_handleDownloadResponse" args="response">
			gDownloadManager.setAttribute('downloadResult', response);
		</method>
		
		<method name="_handlePauseResponse" args="response">
			goToPauseScreen();
		</method>
		
		<method name="_handleSaveLoadResponse" args="response">
			loadItem();
		</method>
		
    	<method name="_handleLoginResponse" args="response"><![CDATA[
Debug.write("loginResponse:");
printBigString(response);
			if(gXmlHelper.isErrorResponse(response)){
				gScreens.showLoginError(gXmlHelper.getStatusCode(response));
			}
			else{
	    		var node = LzDataNode.stringToLzData(response);
	    		dp.setPointer(node);
	    		var restartNumber = dp.xpathQuery('login_response/@restart_number');
	    		var logo = dp.xpathQuery('login_response/branding/@tdclogo');
       			canvas.setAttribute("logoRsrc", logo);
	    		var cmicore = dp.xpathQuery('login_response/testing_session_data/cmi.core');
	    		cmicore.setAttr('password', password);
	    		cmicore.setAttr('userid', userid);
	    		cmicore.setAttr('accesscode', accesscode);
	    		var loginResponse = dp.xpathQuery('login_response');
	    		var numIsts = countDataNodes(dp.xpathQuery('login_response/consolidated_restart_data/tsd/ist'));
	    		dslogin.setChildNodes(new Array(loginResponse));
	    		dp.selectChild();
				setAttribute('lsid', dp.getNodeAttribute('lsid'));
				setAttribute('currentSubtestIndex', getInitialSubtestIndex());
				gRequest.setMseqFromRestartNumber(restartNumber);
				if(numIsts == 0 && dprestart.isValid()){
            		dprestart.deleteNode();
				}
				sendHeartbeat();   // starts heartbeats
				gDownloadManager.downloadContent();
			}
		]]></method>
		
		<method name="setupRationalePopup">
			var stereotype = dpsubtest.xpathQuery ('testing_session_data/lms.student.accommodations/stereotype_style[@stereotype="stem"]');
			var mag = null;
			var bc = null;
			var fc = null;
 			if(stereotype != null){
 				mag = stereotype.getAttr('font_magnification');
 				fc = stereotype.getAttr('font_color');
 				bc = stereotype.getAttr('bgcolor');
 			}
 			gRationalePopup.setup(mag, fc, bc);
 		</method>
		
 		<method name="_handleSubtestResponse" args="response">
			if(gXmlHelper.isErrorResponse(response)){
				gScreens.showError(gXmlHelper.getErrorXml());
			}
			else{
				updateSubtest(response);
			}
		</method>
		
    	<method name="updateSubtest" args="response">
    		var subtest = new LzDataElement();
    		subtest.setNodeName('subtest');
    		var obAssessment = LzDataNode.stringToLzData(response);
    		var sco = getCurrentSubtest();
    		var testingSessionData = getTestingSessionData();
    		subtest.setChildNodes(new Array(obAssessment, sco, testingSessionData));
			dssubtest.setChildNodes(new Array(subtest));
    	</method>

    	<method name="getTestingSessionData">
    		return dplogin.xpathQuery('testing_session_data');
    	</method>
    	
		<method name="_isCommunicationError" args="response">
			return false;
		</method>
		
        <method name="totalQuestions"><![CDATA[
            var fnodes = dpsubtest.xpathQuery(
                'ob_assessment/ob_element_list/f'
            );

            if ( fnodes && fnodes instanceof Array ) {
                var total = fnodes.length;
            } else if ( fnodes && fnodes instanceof LzDataElement ) {
                var total = 1;
            } else {
                var total = 0;
            }

            return total;
        ]]></method>

        <method name="totalAnsweredOnRestart"><![CDATA[
 			var numanswered = 0;
 			var awd = dprestart.xpathQuery( "tsd/ist/rv/v" );
            if ( awd && awd instanceof Array ) {
            	for (var i=0; i<awd.length; i++){
            		if(isAnswered(awd[i])){
            			numanswered++;
            		}
            	}
            } else if ( awd && awd instanceof LzDataElement ) {
                if(isAnswered(awd)){
                	numanswered = 1;
                }
            } 
//Debug.write("numanswered on Restart: " + numanswered);
            return numanswered;
 			
        ]]></method>

        <method name="totalAnswered"><![CDATA[
            var awd = dpstudentdata.xpathQuery(
                "runtime/item_model[@answered='1']"
            );

            if ( awd && awd instanceof Array ) {
                var numanswered = awd.length;
            } else if ( awd && awd instanceof LzDataElement ) {
                var numanswered = 1;
            } else {
                var numanswered = 0;
            }

            return numanswered;
        ]]></method>

        <method name="totalMarked"><![CDATA[    
            var mrk = dpstudentdata.xpathQuery(
                "runtime/item_model[@marked='1']"
            );
            if ( mrk && mrk instanceof Array ) {
                var nummarked = mrk.length;
            } else if ( mrk && mrk instanceof LzDataElement ) {
                var nummarked = 1;
            } else {
                var nummarked = 0;
            }
            return nummarked;
        ]]></method>

        <method name="resetTestTimer" args="durseconds">
            this.durationms = durseconds * 1000;
            this.elapsedms  = 0;
            this.qtimestamp = 0;
            this.timing     = false;
        </method>


        <!--
            Called after subtest xml (and restart xml, if available) has been
            received. Sets subtest state and displays welcome screen. Does
            not load first question.
        -->
        <method name="initTest"><![CDATA[
            initStudentData();
            setReadableFlag();

            var total = totalQuestions();
			dpdisplay.setNodeAttribute( 'shownWarningMinute', 'false' );
            if ( '0' == dpsubtest.xpathQuery( 'sco/@sco_duration_minutes' ) ||
                 'true' == dpsubtest.xpathQuery(
                     'testing_session_data/lms.student.accommodations/@untimed'
                 ) ) {
                // untimed test
                var untimed = true;
                dpdisplay.setNodeAttribute( 'untimed', 'true' );
            } else {
                var untimed = false;
                dpdisplay.setNodeAttribute( 'untimed', 'false' );
            }

            if ( dprestart.isValid() ) {
                var secs = dprestart.xpathQuery( 'tsd/ast/@rem_sec' );
                if ( null == secs ) {
                    // can't find time remaining from restart,
                    // use duration in subtest data
                    var mins = parseInt(
                        dpsubtest.xpathQuery( 'sco/@sco_duration_minutes' )
                    );
                    resetTestTimer( mins * 60 );
                    gScreens.showRestart(
                        mins < 0 ? 0 : mins,
                        total - totalAnsweredOnRestart(),
                        untimed,
                        getStudentName()
                    );
                } else {
                    var secsnum = parseInt( secs );
                    if ( secsnum <= 0 && !untimed ) {
            			gReadableText.stopReading();
            			this.setAttribute('firstSubtest', false);
            			this.outOfTimeOpen();
                     } else {
                        var mins = Math.floor( secsnum / 60 );
                        resetTestTimer( secsnum );
                        gScreens.showRestart(
                            mins < 0 ? 0 : mins,
                            total - totalAnsweredOnRestart(),
                            untimed,
                            getStudentName()
                        );
                    }
                }
            } else {
                var mins = parseInt(
                    dpsubtest.xpathQuery( 'sco/@sco_duration_minutes' )
                );
                if(!untimed){
                	resetTestTimer( mins * 60 );
                }
				
				if(firstSubtest){
                	gScreens.showWelcome( mins, total, untimed, getStudentName() );
                }
                else{
                	gScreens.showContinue( mins, total, untimed, getStudentName() );
                }
            }
            this.setAttribute('firstSubtest', false);
Debug.write("setting gLogo: " + canvas.logoRsrc);
           	gLogo.setSource(canvas.logoRsrc);
        ]]></method>

		<method name="outOfTimeOpen">
			this.setState(OUT_OF_TIME_OPEN_STATE);
			this.save(INIT_LEV);
		</method>
		
        <method name="_handleOutOfTimeOpenResponse"><![CDATA[
         	this.goToTimeoutScreen();
        ]]></method>

		<method name="setReadableFlag">
			var screenReaderAttr 
				= dpsubtest.xpathQuery("testing_session_data/lms.student.accommodations/@screen_reader");
			if ( (screenReaderAttr == "1") ||
                 (screenReaderAttr == "true") ||
                 (screenReaderAttr == true) ) {
				canvas.setAttribute( 'readable', true );
			}
			else{
				canvas.setAttribute( 'readable', false );
			}
		</method>
		
        <!--
            Load and display first question.
        -->
        <method name="openTest">
        	var fnode = getItemFromOffset( 0 );
            if ( dprestart.isValid() ) {
                var fnode = dpsubtest.xpathQuery(
                    "ob_assessment/ob_element_list/f[@id='" +
                        dprestart.xpathQuery( 'tsd/ast/@cur_eid' ) +
                    "']" );
                if ( !fnode ) {
                    fnode = getItemFromOffset( 0 );
                }
             }
            saveLoadItem(fnode, INIT_LEV);
            dshowClient.register( this, 'itemuiready' );
        </method>

        <attribute name="dshowClient"
                   value="$once{ new LzDelegate( this, 'showClient' ) }"/>
        <method name="showClient">
            dshowClient.unregisterAll();
            gScreens.hide();
            gItemInterface.setVisible( true );
        </method>

        <!--
            Initializes runtime nodes that store state for each question.
        -->
        <method name="initStudentData"><![CDATA[
            var dn = dpstudentdata.xpathQuery( 'title' );
            dn.setAttr( 'product_name', dpsubtest.xpathQuery( 'sco/@title' ) );
 			gItemInterfaceStudentName.setAttribute('text', getStudentName());
			this.setAttribute("scid", dpsubtest.xpathQuery( 'sco/@id' ));
//			gRequest.setMseqFromRestartNumber(dpsubtest.xpathQuery( 'testing_session_data/cmi.core/@restart_number' ));

            var elist = dpsubtest.xpathQuery('ob_assessment/ob_element_list');
            var items = elist.getElementsByTagName( 'f' );
            dn = dpstudentdata.xpathQuery( 'question_number' );
            dn.setAttr( 'total', items.length );
 			
            dn = dpstudentdata.xpathQuery( 'runtime' );
            dn.setAttr ('starting_question_number', getStartNumber());
            
			createSharedStimulusNodes();
Debug.write("initstudentdata restart:");
printBigString(dprestart.serialize());		
Debug.write("dslogin: ");
printBigString(dslogin.serialize());	
            var runtimearr = [];
            for ( var i = 0; i < items.length; i++ ) {
                var eid = items[i].getAttr( 'id' );
Debug.write("eid: " + eid);
                var stimulusid = getStimulusIdByEid(eid);
                var istxpath = "tsd/ist[@eid='" + eid + "']";
                var restartnode = dprestart.xpathQuery( istxpath );
                var vnode = dprestart.xpathQuery(istxpath + "/rv/v");
                if ( dprestart.isValid() && restartnode ) {
                    var attrs =
                    {
                        eid:            eid,
                        stimulus_id:    stimulusid,
                        answered:       isAnswered(vnode),
                        marked:         restartnode.getAttr( 'mrk' ) == '1',
                        dur:            restartnode.getAttr( 'dur' ),
                        not_sr:         getNotSr(restartnode)  
                    };

                    var score = dprestart.xpathQuery(
                        istxpath + "/ov[@n='SCORE']/v/text()"
                    );
                    if ( typeof( score ) == 'string' ) {
                        attrs.score = score;
                    }

                    var response = dprestart.xpathQuery(
                        istxpath + "/rv[@n='RESPONSE']/v/text()"
                    );
                    if ( typeof( response ) == 'string' ) {
                        attrs.answer_text = response;
                    }
                 } else {
                    var attrs = 
                    { 
                    	eid: eid, 
                    	stimulus_id: stimulusid
                    };
                }

                var newitemdn = new LzDataElement( 'item_model', attrs, null );
                runtimearr.push (newitemdn);
            }

            dn.setChildNodes( runtimearr );
        ]]></method>

		<method name="getStudentName"><![CDATA[
            var fn = dplogin.xpathQuery('testing_session_data/cmi.core/@student_first_name');
            var mn = dplogin.xpathQuery('testing_session_data/cmi.core/@student_middle_name');
            var ln = dplogin.xpathQuery('testing_session_data/cmi.core/@student_last_name');
            var sn = "";
            if(fn != null){
            	sn = fn;
            }
            if(mn != null){
            	if (fn != null){
            		sn = sn + " ";
            	}
            	sn = sn + mn;
            }
            if(ln != null){
            	var len = 35 - ln.length;
                if (ln.length > len) {
                   	sn = sn.substring( 0, 1 ) + '.'; 
                }     
                sn = sn + " " + ln;               
            }
            return sn;
 		 ]]></method>
		
		<method name="getStartNumber">
            var result = dpsubtest.xpathQuery('ob_assessment/@starting_question_number');
            if ( !result ) result = 1;
            return result;
		</method>
		
		<method name="getNotSr" args="restartNode"><![CDATA[
			var result = "f"
			var rvs = restartNode.getElementsByTagName('rv');
			if(rvs.length != 0){
				var rv = rvs[0];
				var t = rv.getAttr('t');
				if(t != 'identifier'){
					result = 't';
				}
			}
			return result;
		 ]]></method>
		
		<method name="isAnswered" args="vnode">
			var result = false;
			if(vnode != null){
				dp.setPointer(vnode);
				var vnodetext = dp.getNodeText();
				var unescaped = unescape(vnodetext);
				if(unescaped.length != 0){
					for(var i=0; i&lt;unescaped.length; i++){
						if(unescaped.substring(i, i+1) != ' '){
							result = true;
						}
					}
				}
            }
            return result;
		</method>
		
		<method name="createSharedStimulusNodes"><![CDATA[
			deleteSharedStimulusNode();
            var root = dpstudentdata.xpathQuery( '' );
            var newStimulusNode = new LzDataElement("shared_stimulus");
			
            var stimuli = dpsubtest.xpathQuery('ob_assessment/ob_element_select_order/g');
            if(stimuli instanceof Array){  // more than one shared stimulus
	            for(var j = 1; j <= stimuli.length; j++){
	            	var stimulusattrs = { stimulus_id: j };
	            	newStimulusNode.appendChild(new LzDataElement('stimulus_highlight', stimulusattrs, null));
	            }
	        }
	        else if (stimuli instanceof LzDataElement){ // only one shared stimulus
	            var stimulusattrs = { stimulus_id: 1 };
	        	newStimulusNode.appendChild(new LzDataElement('stimulus_highlight', stimulusattrs, null));
	        }
	        // else no shared stimuli

            root.appendChild(newStimulusNode);
		]]></method>
		
		<method name="deleteSharedStimulusNode">
            var oldStimulusNode = dpstudentdata.xpathQuery('shared_stimulus');
            if(oldStimulusNode != null){
            	var poldStimulus = new LzDatapointer();
            	poldStimulus.setPointer(oldStimulusNode);
            	poldStimulus.deleteNode();
            }
		</method>
		
		<method name="getStimulusIdByEid" args="eid"><![CDATA[
			var result = 0;  // stimulus_id if not shared stimulus
			var obElementSelectOrder = dpsubtest.xpathQuery('ob_assessment/ob_element_select_order');
			var singleStimulus = 
			    dpsubtest.xpathQuery('ob_assessment/ob_element_select_order/e[@id="' + eid + '"]');
			if(obElementSelectOrder != null && singleStimulus == null){  // shared stimulus
				result = 1;  // stimulus id for first child
				dpstimulus.setXPath('dssubtest:/subtest/ob_assessment/ob_element_select_order/g/e[@id="' + eid + '"]');
				dpstimulus.selectParent();
				while(dpstimulus.selectPrev()){
					if(dpstimulus.getNodeName() == 'g'){
						result ++;
					}
				}
			}
			dpstimulus.setXPath("dsstudentdata:/testing_client_model/shared_stimulus");
			return result;
		]]></method>
		
        <method name="clearStudentData">
            var timer   = dpstudentdata.xpathQuery( 'timer' );
            var title   = dpstudentdata.xpathQuery( 'title' );
            var qnumber = dpstudentdata.xpathQuery( 'question_number' );
            var current = dpstudentdata.xpathQuery( 'current_item' );
            var runtime = dpstudentdata.xpathQuery( 'runtime' );
            
            timer.setChildNodes( [] );
            title.setChildNodes( [] );
            qnumber.setChildNodes( [] );
            current.setChildNodes( [] );
            runtime.setChildNodes( [] );

            timer.setAttrs( { show: '0' } );
            title.setAttrs( {} );
            qnumber.setAttrs( {} );
            current.setAttrs( {} );
            runtime.setAttrs( {} );

            dpdisplay.setNodeAttribute( 'showtime', 'false' );
        </method>

        <method name="massageItemLml"><![CDATA[
            var itemmodel = dpitem.xpathQuery( 'item_model' );
            var toolbar = itemmodel.getElementsByTagName( 'toolbar' )[0];
            if ( !toolbar ) {
                var toolbarattrs = {};
                for ( var i in itemmodel.attributes ) {
                    toolbarattrs[i] = itemmodel.attributes[i];
                }
                var newtoolbar =
                    new LzDataElement( 'toolbar', itemmodel, toolbarattrs );
                itemmodel.appendChild( newtoolbar );
            }
            
            var interaction = itemmodel.getElementsByTagName('interaction')[0];
            if ( !interaction ) {
                var numchoices = dpitem.xpathQuery(
                    'item_model/choiceInteraction/@maxChoices'
                );
                var ids = dpitem.xpathQuery(
                    'item_model/choiceInteraction/simpleChoice/@identifier'
                );
                var refs = dpitem.xpathQuery(
                    'item_model/choiceInteraction/simpleChoice/@obj_id_ref'
                );
                
                var selectors = [];
                for ( var i = 0; i < ids.length; i++ ) {
                    var s = new LzDataElement(
                        'selector',
                        {
                            identifier:  ids[i],
                            obj_id_ref:  refs[i],
                            user_action: 'n'
                        },
                        null
                    );
                    selectors.push( s );
                }
                
                var newinteraction = new LzDataElement( 
                    'interaction', 
                    { type: 'choice', max_choices: numchoices },
                    selectors
                );
                itemmodel.appendChild( newinteraction );

                if ( !itemmodel.hasAttr( 'iid' ) ) {
                    itemmodel.setAttr ('iid', dpitem.getNodeAttribute ('iid'));
                }
/*                
                if ( !itemmodel.hasAttr( 'eid' ) ) {
                }
*/
                if ( !itemmodel.hasAttr( 'marked' ) ) {
                    itemmodel.setAttr( 'marked', '0' );
                }
                
                if ( !itemmodel.hasAttr( 'answered' ) ) {
                    itemmodel.setAttr( 'answered', '0' );
                }
            }
		]]></method>

 		<method name="directionsSubstitution" args="txt"><![CDATA[
			var eid = dsitem.getPointer().xpathQuery('element_package/item_model/@eid');
			var offset = new Number(getStartNumber()) - 1;
			var itemposition = getItemPosition(eid);
			var current = offset + itemposition;
			var start = current;
			var end = current;
			// if it's a shared stimulus item - find out the start and end item numbers
			var gNodes = dpsubtest.xpathQuery("ob_assessment/ob_element_select_order/g/e[@id='"+eid+"']/../e");
			if(gNodes instanceof Array){
				var found = false;
				var index = 0;
				while(!found){
					var node = gNodes[index];
					var nodeEid = node.getAttr('id');
					if(nodeEid != eid){
						index = index + 1;
					}
					else{
						found = true;
					}
				}
				start = current - index;
				end = start + gNodes.length - 1;
			}
			txt = replace(txt, "%current%", current);
			txt = replace(txt, "%start%", start);
			txt = replace(txt, "%end%", end);
			
			return txt;
		]]></method>	
			
		<method name="getItemPosition" args="eid"><![CDATA[ 
			var result = 1;
			var items = dpstudentdata.xpathQuery("runtime/item_model");
			if(items instanceof Array){
				var found = false;
				var index = 0;
				while(index < items.length && !found){
					var item = items[index];
					if(item.getAttr('eid') == eid){
						found = true;
					}
					else{
						result = result + 1;
						index = index + 1;
					}
				}
			}
			return result;
		]]></method>
		<method name="replace" args="input, from, to"><![CDATA[ 
			var output='';
			while(input.length >= from.length && input.length > 0 && from.length > 0){
				if(input.substring(0,from.length) == from){
					output += to;
					input = input.substring(from.length);
				}else{
					output += input.substring(0,1);
					input = input.substring(1);
				}
			}
			return output + input;
		]]></method>
		
        <method name="copyCurrentToRuntime"><![CDATA[
            var curritem = Number(
                dpstudentdata.xpathQuery( 'current_item/item_model/@eid' )
            );
             if ( curritem ) {
                var dnrtitemold = dpstudentdata.xpathQuery(
                    "runtime/item_model [@eid = '"+curritem+"']"
                );
                var dncurritem =
                    dpstudentdata.xpathQuery ('current_item/item_model/');
                dnrtitemold.parentNode.replaceChild (dncurritem, dnrtitemold);
            }
         ]]></method>

        <!-- swapping current item -->
        <method name="changeCurrItemData"><![CDATA[
            var curritem = Number(
                dpstudentdata.xpathQuery( 'current_item/item_model/@eid' )
            );
            //store off our old curr item into the runtime data
            if ( curritem ) {
                var dnrtitemold = dpstudentdata.xpathQuery(
                    "runtime/item_model [@eid = '"+curritem+"']"
                );
                var dncurritem =
                    dpstudentdata.xpathQuery ('current_item/item_model/');
				
				saveSharedStimulusHighlights();
                dncurritem.parentNode.removeChild (dncurritem);
                dnrtitemold.parentNode.replaceChild (dncurritem, dnrtitemold);
            }

            //find if we have saved state in our run time
            var newitem = dpitem.xpathQuery ('item_model/@eid');
            var dnrtitemnew = dpstudentdata.xpathQuery(
                "runtime/item_model [@eid = '"+newitem+"']"
            );

            var dnnewitem;

            if (dnrtitemnew ['childNodes'] && dnrtitemnew.childNodes.length) {
                // copy saved state from runtime
                dnnewitem = dnrtitemnew.cloneNode (true);
            } else {
                // copy state from server model
                var dnitemmodel = dpitem.xpathQuery ('item_model');
                dnnewitem = dnitemmodel.cloneNode (true);
                // merge in attributes from runtime (we may have restart data
                // stored)
                for ( var i in dnrtitemnew.attributes ) {
                    dnnewitem.setAttr( i, dnrtitemnew.getAttr( i ) );
                }

                var dp = new LzDatapointer();
                dp.setPointer( dnnewitem );
                switch ( dp.xpathQuery( 'interaction/@type' ) ) {
                    case 'choice':
                        if ( dnnewitem.getAttr( 'answered' ) == '1' &&
                             dnnewitem.hasAttr( 'answer_text' ) ) {
                            var selectornode = dp.xpathQuery(
                         "interaction[@type='choice']/selector[@identifier='" +
                              dnnewitem.getAttr( 'answer_text' ) +
                            "']"
                            );
                            if ( selectornode ) {
                                // assumes that no other selector has been
                                // marked s
                                selectornode.setAttr( 'user_action', 's' );
                            }
                        }
                        break;
                    case 'grid':
                        if ( dnnewitem.getAttr( 'answered' ) == '1' &&
                             dnnewitem.hasAttr( 'answer_text' ) ) {
                            var text =
                                dnnewitem.getAttr( 'answer_text' );
                            var responses =
                                dp.xpathQuery( 'interaction/response' );

                            var unescapedtext = unescape( text );

                            for ( var r = 0; r < responses.length; r++ ) {
                                var response = responses[r];
                                var c = unescapedtext.substring( r, r + 1 );
                                response.setAttr( 'user_action', c );
                            }
                        }
                        break;
                    case 'text_entry':
                        // not handled
                        break;
                }

            }
            // remove not_sr attribute - this will be detected by interaction type
            dnnewitem.removeAttr('not_sr');
            var dncurritem = dpstudentdata.xpathQuery ('current_item');
            dncurritem.appendChild (dnnewitem);
            dncurritem.setAttr( 'itemno', getOffsetFromEid( newitem ) + 1 );
            this.initManipulativeData ();
			getSharedStimulusHighlights();

            this.setAttribute('focusOnGr', !isMarkedForReviewWithManipulativeOpen());
            this.runtimeready = true;
            checkItemStatus();
        ]]></method>

		<method name="saveSharedStimulusHighlights"><![CDATA[
			var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model/');
			var stimulusid = dncurritem.getAttr('stimulus_id');
			if(stimulusid != 0){  //  shared stimulus
				var sharedStimulusHighlights = 
				    dpstudentdata.xpathQuery('shared_stimulus/stimulus_highlight[@stimulus_id="' + stimulusid + '"]');
				var childNodes = new Array();
				var currentStimulusHighlights = 
				    dpstudentdata.xpathQuery('current_item/item_model/manipulatives/global/highlighter/highlightarea[@stereotype="stimulus"]');
				if(currentStimulusHighlights instanceof Array){
					for (var i=0; i<currentStimulusHighlights.length; i++){
						var stimulusHighlight = currentStimulusHighlights[i];
						childNodes.push(stimulusHighlight);
						stimulusHighlight.parentNode.removeChild(stimulusHighlight);
					}
				}
				else if(currentStimulusHighlights instanceof LzDataElement){
					childNodes.push(currentStimulusHighlights);
					currentStimulusHighlights.parentNode.removeChild(currentStimulusHighlights);
				}
				sharedStimulusHighlights.setChildNodes(childNodes);
			}
		]]></method>
		
		<method name="getSharedStimulusHighlights"><![CDATA[
		// copy shared stimulus highlights into current item highlights
			var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model/');
			var stimulusid = dncurritem.getAttr('stimulus_id');
			if(stimulusid != 0){ // this item uses a shared stimulus
				var curreid = dncurritem.getAttr('eid');
				var dnhighlighter = 
				    dpstudentdata.xpathQuery('current_item/item_model/manipulatives/global/highlighter');
				if(dnhighlighter == null){  // need to create highlighter node
					var dnglobal = dpstudentdata.xpathQuery('current_item/item_model/manipulatives/global');
					dnglobal.appendChild(new LzDataElement('highlighter', null, null));
				}
				dnhighlighter = 
				    dpstudentdata.xpathQuery('current_item/item_model/manipulatives/global/highlighter');
				var sharedstimulushighlights = 
				    dpstudentdata.xpathQuery('shared_stimulus/stimulus_highlight[@stimulus_id="' + stimulusid + '"]/highlightarea');
				if(sharedstimulushighlights != null) {  
				// there are existing stimulus highlights that need to get copied
					if(sharedstimulushighlights instanceof Array){
						for(var i = 0; i < sharedstimulushighlights.length; i++){
							dnhighlighter.appendChild(sharedstimulushighlights[i]);
						}
					}
					else if (sharedstimulushighlights instanceof LzDataElement){
						dnhighlighter.appendChild(sharedstimulushighlights);
					}
				}
			}
		]]></method>
		
		<method name="saveSelectedTab" args="tabNum">
			var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model/');
           	dncurritem.setAttr('selectedTabNum', tabNum);
		</method>
		
		<method name="getSelectedTab" args="eid">
			var result = 1;
            var ismarked = dpstudentdata.xpathQuery("runtime/item_model [@eid = '"+eid+"']/@marked");
            if (typeof (ismarked) == 'string') {
                ismarked = (ismarked == '1');
            }
            if (ismarked) {
				var tabNum = dpstudentdata.xpathQuery("runtime/item_model [@eid = '"+eid+"']/@selectedTabNum");
				if(tabNum != null){
					result = new Number(tabNum);
				}
            }
			return result;
		</method>
		
        <!-- nav -->
        <method name="navigateTo" args="itemeid"><![CDATA[
            var curreid = Number(
                dpstudentdata.xpathQuery( 'current_item/item_model/@eid' )
            );
            if ( itemeid != curreid ) {
            	changeItem(dpsubtest.xpathQuery( "ob_assessment/ob_element_list/f[@id='" + itemeid + "']" ));
            }
        ]]></method>
		
		<method name="changeItem" args="fnode">
			gReadableText.stopReading();
			freezeUI();
			stopQuestion();
			saveLoadItem( fnode );
		</method>
		
        <method name="onFirstItem">
            return 0 == currItemOffset();
        </method>

        <method name="onLastItem">
            var totalitems = Number(
                dpstudentdata.xpathQuery( 'question_number/@total' )
            );
            return (currItemOffset() + 1) >= totalitems;
        </method>

        <method name="currItemOffset">
            var curreid = Number(
                dpstudentdata.xpathQuery( 'current_item/item_model/@eid' )
            );

            var fnode = dpsubtest.xpathQuery(
                "/subtest/ob_assessment/ob_element_list/f[@id='" +
                    curreid +
                "']"
            );

            if (fnode)
               return fnode.getOffset();
            return 0;
        </method>

        <method name="getItemFromOffset" args="offset">
            var eltlist = dpsubtest.xpathQuery(
                '/subtest/ob_assessment/ob_element_list'
            );

            var fnode = eltlist.childNodes[ offset ];
            return fnode;
        </method>

        <method name="getOffsetFromEid" args="eid">
            var dn = dpsubtest.xpathQuery(
                "/subtest/ob_assessment/ob_element_list/f[@id='" + eid + "']"
            );
            if ( dn ) {
                return dn.getOffset();
            } else {
                return NaN;
            }
        </method>

        <method name="stepNavigateBack">
            if ( !onFirstItem() ) {
				changeItem( getItemFromOffset( currItemOffset() - 1 ) );
            }
        </method>

        <method name="stepNavigateForward">
            if ( !onLastItem() ) {
				changeItem( getItemFromOffset( currItemOffset() + 1 ) );
            }
        </method>
        
        <!-- question state -->
        <method name="toggleMark" >
        	freezeUI();
        	var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model');
        	var isMarked = dncurritem.getAttr( 'marked' );
        	if(isMarked == null || isMarked == '0'){
        		markQuestion( true );
        	}
        	else{
            	markQuestion(!isMarked);
            }
            unlockUI();
        </method>
        
        <method name="markQuestion" args="ismarked">
            var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model');
            var curritem = Number (dncurritem.getAttr ('eid'));
            var dnruntimeitem = dpstudentdata.xpathQuery ("runtime/item_model [@eid = '"+curritem+"']");

            dncurritem.setAttr ('marked', ismarked);
            dnruntimeitem.setAttr ('marked', ismarked);
        </method>

		<method name="isMarked"><![CDATA[
			var result = false;
			var markedAttr = dpstudentdata.xpathQuery ('current_item/item_model/@marked');
			if(markedAttr == '1' || markedAttr == 'true'){
				result = true;
			}
			return result;
 		 ]]></method>
		
        <method name="toggleItemSelStateWithFreeze" args="selid"><![CDATA[
        	freezeUI();
            toggleItemSelState(selid);
            unlockUI();
        ]]></method>

        <method name="toggleItemSelState" args="selid"><![CDATA[
            var dnsel = dpstudentdata.xpathQuery ("current_item/item_model/interaction/selector[@identifier='"+selid+"']");
            if ( dnsel ) {
                if ( 's' == dnsel.getAttr( 'user_action' ) ) {
                    setItemSelState( selid, 'n');
                } else {
                    setItemSelState( selid, 's');
                }
            }
        ]]></method>

        <method name="setItemSelState" args="selid, value"><![CDATA[
Debug.write("setItemSelState: " + selid + " , " + value);
            freezeUI();

            var dnsel = dpstudentdata.xpathQuery ("current_item/item_model/interaction/selector[@identifier='"+selid+"']");
            if ( dnsel ) {
            	var wasEliminated = dnsel.getAttr('user_action') == 'e';
                dnsel.setAttr ('user_action', value);
    
                var dninteraction = dnsel.parentNode;
                var maxchoices = dninteraction.getAttr ('max_choices');
    
                //perform radio button like behavior
                if (maxchoices == 1 && value == 's') 
                {
                    for (var i in dninteraction.childNodes) {
                        if (dninteraction.childNodes [i] != dnsel &&
                            dninteraction.childNodes [i].getAttr ('user_action') != 'e') {
                            dninteraction.childNodes [i].setAttr ('user_action', 'n');
                        }
                    }
                }
    
                //set answered attribute 
                var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model');
                var curritem = Number (dncurritem.getAttr ('eid'));
                var dnruntimeitem = dpstudentdata.xpathQuery ("runtime/item_model [@eid = '"+curritem+"']");
    
                switch ( value ) {
                    case 's':
                        var score =
                            dncurritem.getAttr( 'correct' ) == selid ? '1' : '0';
                        dncurritem.setAttr( 'answer_text', selid );
                        dnruntimeitem.setAttr( 'answer_text', selid );
                        dncurritem.setAttr( 'score', score );
                        dnruntimeitem.setAttr( 'score', score );
                        dncurritem.setAttr ('answered', 1 );
                        dnruntimeitem.setAttr ('answered', 1 );
          
                        var rationaleText = getRationaleText(selid);
              Debug.write("rationaleText: " + rationaleText);
              printBigString(dpitem.serialize());
						if(rationaleText != null){
                        	gRationalePopup.show(rationaleText);
                        }
                        else{
                        	gRationalePopup.hide();
                        }
                        break;
                    case 'e':
                        if ( selid == dncurritem.getAttr( 'correct' ) ) {
                            // eliminated correct answer, score must be 0
                            dncurritem.setAttr( 'score', '0' );
                            dnruntimeitem.setAttr( 'score', '0' );
                        }
                        if ( selid == dncurritem.getAttr( 'answer_text' ) ) {
                            // eliminated previously selected answer
                            dncurritem.setAttr( 'answer_text', '' );
                            dnruntimeitem.setAttr( 'answer_text', '' );
                            dncurritem.setAttr ('answered', 0 );
                            dnruntimeitem.setAttr ('answered', 0 );
                        }
                        gRationalePopup.hide();
                        break;
                    case 'n':
                    	if(!wasEliminated){
	                        dncurritem.setAttr( 'answer_text', '' );
	                        dnruntimeitem.setAttr( 'answer_text', '' );
	                        dncurritem.setAttr( 'score', '0' );
	                        dnruntimeitem.setAttr( 'score', '0' );
	                        dncurritem.setAttr ('answered', 0 );
	                        dnruntimeitem.setAttr ('answered', 0 );
	                    }
	                    gRationalePopup.hide();
                        break;
                }
            }
            unlockUI();
        ]]></method>
        
		<method name="getRationaleText" args="selid">
		// need to find the answer_choice_widgets
		// item xml may have been changed for accommodated layout, so need to look for them in all the places they might be
		// xpath allows you to just use '//answer_choice_widget..." to find it anywhere in the xml, but that doesn't seem to work
			var result = dpitem.xpathQuery('item_canvas/*/answer_choice_widget/selector_widget[@identifier="' + selid + '"]/../rationale/text()')
			if(result == null){
				result = dpitem.xpathQuery('item_canvas/panel/*/answer_choice_widget/selector_widget[@identifier="' + selid + '"]/../rationale/text()')
			}
			if(result == null){
				result = dpitem.xpathQuery('item_canvas/panel/panel/*/answer_choice_widget/selector_widget[@identifier="' + selid + '"]/../rationale/text()')
			}
			return result;
		</method>
		
        <!-- called by grid response col component -->
        <method name="setGrState" args="colnum, value"><![CDATA[
			if ( dpstudentdata.xpathQuery( 'current_item/item_model/interaction/@type' ) == 'grid' )
			{
				freezeUI();
			
				var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model');
				var curritem = Number (dncurritem.getAttr ('eid'));
				var dnruntimeitem = dpstudentdata.xpathQuery ("runtime/item_model [@eid = '"+curritem+"']");

				var responses = dpstudentdata.xpathQuery( 'current_item/item_model/interaction/response' );
				if ( responses instanceof LzDataNode ) {
					responses = [responses];
				} else if ( null == responses ) {
					responses = [];
				}

				var orig = responses[colnum].getAttr( 'user_action' );
				var orignull = nullOrSpace( orig );
				var valuenull = nullOrSpace( value );

				if ( (value != orig) && !(orignull && valuenull) ) {
					responses[colnum].setAttr( 'user_action', value );

					var answer = '';
					var answered = false;
					for ( var i = 0; i < responses.length; i++ ) {
						var c = responses[i].getAttr( 'user_action' );
						if ( c == null || c == '' || c == ' ' ) {
							answer += ' ';
						} else { 
							answer += c;
							answered = true;
						}
					}

					dncurritem.setAttr( 'answer_text', escape( answer ) );
					dnruntimeitem.setAttr( 'answer_text', escape( answer ) );
					dncurritem.setAttr ('answered', answered );
					dnruntimeitem.setAttr ('answered', answered );
				}
				unlockUI();
            }          
        ]]></method>

        <!-- timing -->

		<method name="toggleTimer">
			freezeUI();
			var currentSetting = dpdisplay.getNodeAttribute( 'showtime' );
			if(currentSetting == 'true'){
				showHideTimer( 'false' );
			}
			else{
				showHideTimer( 'true' );
			}
			unlockUI();
		</method>
		
        <method name="showHideTimer" args="show">
            dpdisplay.setNodeAttribute( 'showtime', show );
        </method>

        <attribute name="pausable"
                   value="$path{ 'dssubtest:/subtest/testing_session_data/lms.student.accommodations/@rest_break' }"/>
                
        <method name="pauseTest">
            if ( pausable == 'true' ) {
            	gReadableText.stopReading();
                freezeUI();
                stopQuestion();
                setState(PAUSE_STATE);
                save(PAUSE_LEV);
            }
        </method>

		<method name="save" args="lev">
        	var saveParams = getSaveParams(lev);
        	resetHeartbeat();
			gCommunicator.save(saveParams);
		</method>
		
		<method name="goToPauseScreen">
        	gItemInterface.setVisible( false );
            LzCursor.unlock();            
            gScreens.showPause(getStudentName());
		</method>
		
        <method name="pausedContinue" args="pw">
            if ( pw == dpsubtest.xpathQuery( 'testing_session_data/cmi.core/@password' ) ) {
                LzCursor.setCursorGlobal( 'waitcursor' );
				setState(PAUSED_RESUME_STATE);
				resetHeartbeat();
				gCommunicator.lifecycle(RESUME_LEV);
                return true;
            } else {
                return false;
            }
        </method>

		<method name="_handlePausedResumeResponse" args="xml">
			gScreens.hide();
            gItemInterface.setVisible( true );
            startQuestion();
            unlockUI();
            gQuestion.setGrFocus();
		</method>
		
        <method name="finishTest">
        	gReadableText.stopReading();
            freezeUI();
            setState(FINISH_STATE);
            save();
        </method>

		<method name="goToFinishScreen">
            gItemInterface.setVisible( false );
            closeOpenManipulatives();
            LzCursor.unlock();            
            gScreens.showFinish( totalQuestions() - totalAnswered(),
                                 totalMarked() );
		</method>
		
		<method name="closeOpenManipulatives"><![CDATA[
			if(!isMarked()){       
				var dn = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/general');
				var manips = new Array("oneeighth_inch_ruler",
			 				           "half_inch_ruler", 
			 				           "mm_ruler", 
			 				           "cm_ruler", 
			 				           "protractor", 
			 				           "formula_card", 
			 				           "standard_calculator", 
			 				           "straight_edge");
				for (var i = 0; i < manips.length; i++){
					var manip = manips[i];
					var state = dn.getAttr(manip);
					if(state == "sel"){
			 			gController.setManipulativeSelState (manip, 'up');
					}
				}
			}
		]]></method>
		
        <method name="resumeTest">
            LzCursor.setCursorGlobal( 'waitcursor' );
            gScreens.hide();
            gItemInterface.setVisible( true );
            gQuestion.setGrFocus();
            unlockUI();
        </method>

        <method name="continueTest">
            openTest();
        </method>

        <!--
            "Stop Test" button
            "Finish Test" - distinct from endsubtest - button, hot key
        -->

        <method name="stopTest">
            finishTest();
        </method>

        <method name="finishTestShortcut">
            if ( onLastItem() ) {
                finishTest();
            }
        </method>

        <!-- unlock on start, without a previous freeze -->
        <attribute name="uisemaphore" value="1"/>

        <method name="freezeUI">
            ++uisemaphore;

            if ( dsdisplay.childNodes[0].getAttr( 'enabled' ) == 'true' ) {
                gHotKeys.disableKeys();
                dsdisplay.childNodes[0].setAttr( 'enabled', 'false' );
                LzCursor.setCursorGlobal( 'waitcursor' );
            }
        </method>

        <method name="unlockUI">
		<![CDATA[
			if(doUnlockUI){
	            --uisemaphore;
	
				if ( uisemaphore < 0 )
				{
					uisemaphore = 0;
				}
	            if ( 0 == uisemaphore ) {
	                LzCursor.unlock();
	                restoreCurrentCursor();
	                dsdisplay.childNodes[0].setAttr( 'enabled', 'true' );
	                gHotKeys.enableKeys();
	            }
	        }
		]]>
        </method>
		
		<method name="restoreCurrentCursor">
			LzCursor.restoreCursor();
        	if(canvas.currentCursor != null){
            	LzCursor.setCursorGlobal(canvas.currentCursor);
            }
		</method>
		
		<method name="setCurrentCursor" args="cursorName">
			LzCursor.setCursorGlobal(cursorName);
			canvas.setAttribute('currentCursor', cursorName);
		</method>
		
		<method name="clearCurrentCursor">
			canvas.setAttribute('currentCursor', null);
		</method>
		
		<method name="clearAndRestoreCurrentCursor">
			clearCurrentCursor();
			restoreCurrentCursor();
		</method>
		
        <method name="saveLoadItem" args="fnode, lev"><![CDATA[
        	setState(SAVE_LOAD_STATE);
			setAttribute("loadNode", fnode);
			save(lev);
        ]]></method>

        <method name="loadItem"><![CDATA[
            this.itemloaded    = false;
            this.runtimeready  = false;
            this.youarehereset = false;
        	var loadParams = getLoadParams();
        	var xml = gXmlHelper.getGetItemXml(loadParams[0], loadParams[1], loadParams[2]);
			if (typeof canvas.folder != "undefined") {
				dsitem.setQueryParam(gRequest.FOLDER_PARAM, canvas.folder);
			}
			if (typeof canvas.user != "undefined") {
				dsitem.setQueryParam(gRequest.USER_PARAM, canvas.user);
			}
			dsitem.setQueryParam(gRequest.METHOD_PARAM, gRequest.GET_ITEM_METHOD);
			dsitem.setQueryParam(gRequest.XML_PARAM, xml);
Debug.write("loadItem");
Debug.write(xml);
			dsitem.doRequest();        
		]]></method>

		<method name="isOnItemOrFinishScreen">
			return (gItemInterface.visible || gScreens.isOnFinishScreen());
		</method>
		
 		<method name="getLoadParams">
			var result = new Array();
			result[0] = loadNode.getAttr('id');
			result[1] = loadNode.getAttr('h');
			var subtest = getCurrentSubtest();
			result[2] = subtest.getAttr('item_encryption_key');
Debug.write("getLoadParams: " + result[0] + " , " + result[1] + " , " + result[2]);
			return result;
		</method>
		
     	<method name="getSaveParams" args="lev">
     		// method will return null if only ast needed, tsd params otherwise
     		var result = null; 
     		if(lev != null || isOnItemOrFinishScreen()){
	    		result = getTsdParams(lev);
    		}
    		return result;
    	</method>
    	
    	<method name="getTsdParams" args="lev">
    		var result = new Array();
    		result[0] = lev;
    		result[1] = getItemParams();
    		return result;
    	</method>
    	
     	<method name="getItemParams">
//Debug.write("getItemParams:");
//printBigString(dpstudentdata.serialize());
    		var result = null;
    		if(isOnItemOrFinishScreen()){
                var itemnode = dpstudentdata.xpathQuery( 'current_item/item_model' );
                if(itemnode != null){
	    			result = new Array();
					result[0] = itemnode.getAttr( 'iid' ); // current iid
					result[1] = itemnode.getAttr( 'eid' ); // current eid
					result[2] = toNumString( itemnode.getAttr( 'marked' ) ); //current mrk
					result[3] = toNumString( itemnode.getAttr( 'answered' ) ); //current awd
					result[4] = currentDur(); //current dur
					result[5] = getCurrentInteractionType();  // type
					result[6] = itemnode.getAttr( 'answer_text' ); //current option
					result[7] = itemnode.getAttr( 'score' ); //current score
				}
    		}
    		return result;
    	</method>
    	
        <attribute name="pending" value="$once{ {} }"/>
        <!--
            true once all components have been constructed,
            false once they have all called componentDone
        -->
        <attribute name="trackingcomponents" value="false"/>
        <method args="t" event="ontrackingcomponents">
            if ( t ) {
                checkCompProgress();
            }
        </method>

        <method name="waitOnComponent" args="c, ownerdoc">
            if ( ownerdoc == dsitem ) {
                var uid = c.getUID();
                if ( pending[uid] ) {
//                    Debug.warn ( uid + ' maps to ', pending[uid], ' not ', c );
                } else {
                    pending[uid] = c;
                }
            }
        </method>

        <method name="componentDone" args="c, ownerdoc">
            if ( ownerdoc == dsitem ) {
                var uid = c.getUID();
                if ( pending[uid] == c ) {
                    pending[uid] = null;
                    delete pending[uid];
                    checkCompProgress();
                } else {
//                    Debug.warn ( uid + ' maps to ' + pending[uid] + ' not ' + c );
                }
            }
        </method>

        <method name="checkCompProgress">
            if ( trackingcomponents ) {
                var done = true;
                for ( var i in pending ) {
                    done = false;
                    break;
                }

                if ( done ) {
                    this.trackingcomponents = false;
                    this.itemloaded = true;
                    checkItemStatus();
                }
            }
        </method>

        <method name="exitPopups">
            gEnlargePopup.shrink();
            gFootNotePopup.hide();
            gRationalePopup.hide();
        </method>

        <method name="movedYouAreHere">
            this.youarehereset = true;
            checkItemStatus();
        </method>

        <attribute name="youarehereset" value="false"/>
        <attribute name="itemloaded" value="false"/>
        <attribute name="runtimeready" value="false"/>

        <attribute name="requestPending" type="boolean" value="false" />

		<method name="updateRequestPending" args="val, error">
			this.setAttribute('requestPending', val);
			if(error){
				unlockUI();
			}
			else{
				if(val){
					freezeUI();
				}
				else{
					unlockIfItemReady();
				}
			}
		</method>

        <method name="checkItemStatus"><![CDATA[
            if ( itemloaded && runtimeready && youarehereset ) {
                unlockUI();
                startQuestion();
                if ( !this['itemuiready'] ) new LzEvent( this, 'itemuiready' );
                itemuiready.sendEvent();
            }
        ]]></method>

        <method name="unlockIfItemReady"><![CDATA[
            if ( itemloaded && runtimeready && youarehereset &&
                 !requestPending) {
                unlockUI();
             }
        ]]></method>

        <!-- manipulators -->
        <method name="initManipulativeData"><![CDATA[
            var dnmanip = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives');
            var dngeneral = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/general');

            var initglobal = (dnmanip == null);
            var initgeneral = (dngeneral == null);

            var ismarked = dpstudentdata.xpathQuery ('current_item/item_model/@marked');
            if (typeof (ismarked) == 'string') {
                ismarked = (ismarked == '1');
            }
        	// clear previous manipulative data if not marked for review
            if (!ismarked) {
                var dnman = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives');
                var dngen = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/general');
                
                if(dnman != null){
                	dnman.removeChild (dngen);
                }
                initgeneral = true;
            }

            if (!dnmanip)
            {
                dnglobal = new LzDataElement ('global', {}, []);
                dnmanip = new LzDataElement ('manipulatives', {}, [dnglobal]);

                var dncurritem = dpstudentdata.xpathQuery ('current_item/item_model');
                dncurritem.appendChild (dnmanip);
            }

            if (initgeneral) {
                dngeneral = new LzDataElement ('general', {}, []);
                dnmanip.appendChild (dngeneral);
            }

            
            if (initglobal || initgeneral) {
                var dntoolbar = dpstudentdata.xpathQuery ('current_item/item_model/toolbar');
                var toolstate = 'disable';
                for (var i in dntoolbar.attributes) {
                    switch (dntoolbar.attributes [i]) {
                        case 'not provisioned':
                            toolstate = 'disable';
                            break;
                        case 'required':
                        	toolstate = 'up';
                        	break;
                        case 'accommodated':
                        	if(i == 'standard_calculator' || i == 'scientific_calculator'){
                        		if ('true' == dpsubtest.xpathQuery('testing_session_data/lms.student.accommodations/@calculator')){
                        			toolstate = 'up';
                        		}
                        		else{
                        			toolstate = 'disable';
                        		}
                        	}
                        	else{
								toolstate = 'up';
                        	}
                            break;
                        case 'invisible':
                            toolstate = 'invisible';
                            break;
                        default:
//                            Debug.warn ('INIT MANIPULATIVE DATA: cant handle ', dntoolbar.attributes [i]);
                    }

                    if (this._isGlobalManipulator (i)) {
                        if (initglobal) dnglobal.setAttr (i, toolstate);
                    } else if (initgeneral) {
                        dngeneral.setAttr (i, toolstate);
                    }
                }
            }
        ]]></method>

        <method name="setManipulativeSelState" args="which, value">
            var dn;

            if (this._isGlobalManipulator (which)) {
                dn = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/global');
                //make global manipulators act like radio buttons
                if (value == 'sel') {
                    for (var i in dn.attributes) {
                        if (i != which) dn.setAttr (i, 'up');
                    }
                }
            } else {
                dn = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/general');
            }

            var dp = new LzDatapointer ();
            dp.setPointer (dn);
            var dnmanip = dp.xpathQuery (which);
            
            if (value == 'sel') {
                if (!dnmanip) {
                    dnmanip = new LzDataElement (which, {}, []);
                    dn.appendChild (dnmanip);
                }
            } else if (!this._isGlobalManipulator (which)) {
                if (dnmanip) {
                    dn.removeChild (dnmanip);
                }
            }
            dn.setAttr (which, value);
        </method>



        <method name="_isGlobalManipulator" args="manipname">
            if (manipname == 'highlighter' || 
                manipname == 'eraser' || 
                manipname == 'option_eliminator') {
                return true;
            }
            return false;
        </method>

        <method name="toNumString" args="b">
            if ( typeof( b ) == 'boolean' ) {
                return b ? '1' : '0';
            } else if ( typeof( b ) == 'string' ) {
                return b;
            } else if ( typeof( b ) == 'number' ) {
                return String( b );
            } 
        </method>

        <attribute name="dsendHeartbeat"
                   value="$once{ new LzDelegate( this, 'sendHeartbeat' )}"/>

        <method name="sendHeartbeat">
			resetHeartbeat();
			gCommunicator.heartbeat(getSaveParams());
        </method>

		<method name="resetHeartbeat">
			LzTimer.resetTimer( dsendHeartbeat, 30000 );
		</method>
		
		<method name="getCurrentInteractionType">
            var typeNode = dpstudentdata.xpathQuery( 'current_item/item_model/interaction' );
            var interactionType = typeNode.getAttr( 'type' );
            var type = interactionType == 'choice' ? 'identifier' : 'string';
            return type;
		</method>
		
        <!-- accomodations -->
        <method name="_getAccomStyles"><![CDATA[
Debug.write("_getAccomStyles");
            var stylesarr = dplogin.xpathQuery ('testing_session_data/lms.student.accommodations/stereotype_style');
            
            for (var i in stylesarr) {
            	var theStyle = stylesarr [i];
                this.accomstyles [theStyle.getAttr ('stereotype')] = theStyle.attributes;
                if (theStyle.getAttr("stereotype") == "stem"){
                	if( theStyle.getAttr("font_magnification") > 1) {
                    	this.setAttribute("isaccomodated", true);
                    }
                    if(theStyle.hasAttr('bgcolor')){
                    	var bgclr = theStyle.getAttr('bgcolor');
                    	if(bgclr.length > 0){
                    		this.setAttribute('questionBgColor', bgclr);
                    	}
                    }
                }
            }
        ]]></method>

        <method name="getAccomStyleForType" args="type">
            return this.accomstyles [type];
        </method>

        <method name="currentDur">
			var result = 0;
			var dur = dpstudentdata.xpathQuery('current_item/item_model/@dur');
			if ( timing ) {
				var timestamp = getTimer();
  				var diff = Math.ceil( (timestamp - qtimestamp) / 1000 );

				if ( typeof( dur ) == 'string' ) {
					result = parseInt( dur ) + diff;
				} else {
					result = diff;
				}
			} else {
				if ( typeof( dur ) == 'string' ) {
					result = parseInt( dur );
				} else {
					result = 0;
				}
 			}
 			return result;
        </method>

        <method name="endSubtest" args="cm"><![CDATA[
			setState(WRITE_TO_AUDIT_FILE_STATE);
			gCommunicator.writeToAuditFile(lsid, scid, getModelString());
        ]]></method>

        <method name="saveEndSubtest"><![CDATA[
        	setAttribute("doUnlockUI", false);
        	copyCurrentToRuntime();
			setState(SAVE_END_SUBTEST_STATE);
			save();
        ]]></method>

		<method name="_handleWriteToAuditFileResponse">
			setState(UPLOAD_AUDIT_FILE_STATE);
			gCommunicator.uploadAuditFile(lsid, scid);
		</method>
		
        <method name="startQuestion">
            if ( 'true' != isuntimed ) {
                updateTimeLeft();
                LzTimer.resetTimer( dupdateTimeLeft, 1000 );
            }
            this.qtimestamp = getTimer();
            this.timing = true;
            exitPopups();  
        </method>

        <attribute name="dupdateTimeLeft"
                   value="$once{ new LzDelegate( this, 'updateTimeLeft' ) }"/>

        <method name="outOfTime">
            if ( 0 == uisemaphore ) {
                freezeUI();
            }
            stopQuestion();
            setState(TIMEOUT_STATE);
            save();
        </method>

		<method name="goToTimeoutScreen">
            gItemInterface.setVisible( false );
            LzCursor.unlock();
            gReadableText.stopReading();
            gScreens.showOutOfTime( totalQuestions() - totalAnswered(),
                                    totalMarked() );
		</method>
		
        <method name="updateTimeLeft"><![CDATA[
            var timestamp = getTimer();
            if ( timing ) {
                var remainingms =
                    durationms - elapsedms - (timestamp - qtimestamp);
                if ( remainingms <= 0 ) {
                    dpdisplay.setNodeAttribute( 'timeleft', '00:00' );
                    outOfTime();
                } else {
                    var timeleft = secondsToString(
                        Math.floor( remainingms / 1000 )
                    );
                    dpdisplay.setNodeAttribute( 'timeleft', timeleft );

                    LzTimer.resetTimer( dupdateTimeLeft, 1000 );

                    if ( (remainingms / 1000) / 60 <= WARNING_MINUTE ) {
                    	var shownWarning = dpdisplay.getNodeAttribute( 'shownWarningMinute');
                    	if(shownWarning == 'false'){
	                        showHideTimer( true );
	                        dpdisplay.setNodeAttribute( 'shownWarningMinute', 'true' );
                        }
                    }
                }
            } else {
                var remainingms = durationms - elapsedms;
                if ( remainingms <= 0 ) {
                    outOfTime();
                } else {
                    var timeleft = secondsToString(
                        Math.floor( remainingms / 1000 )
                    );
                    dpdisplay.setNodeAttribute( 'timeleft', timeleft );
                }
            }
        ]]></method>

        <method name="secondsToString" args="s"><![CDATA[
            var minutes = Math.floor( s / 60 );
            var seconds = s % 60;

            if ( minutes < 10 ) minutes = '0' + minutes;
            if ( seconds < 10 ) seconds = '0' + seconds;

            return minutes + ':' + seconds;
        ]]></method>

        <method name="stopQuestion">
            if ( timing ) {
                var timestamp = getTimer();

                LzTimer.removeTimer( dupdateTimeLeft );
                this.timing = false;

                this.elapsedms += (timestamp - qtimestamp);
    
                var itemnode =
                    dpstudentdata.xpathQuery('current_item/item_model');
                var dsec = itemnode.getAttr( 'dur' );
                if ( typeof( dsec ) == 'string' ) {
                    itemnode.setAttr(
                        'dur',
                        String( parseInt( dsec ) + 
                                Math.ceil((timestamp - qtimestamp)/1000) )
                    );
                } else {
                    itemnode.setAttr(
                        'dur',
                        String( Math.ceil( (timestamp - qtimestamp ) / 1000) )
                    );
                }
            }
        </method>

        <attribute name="WARNING_MINUTE" value="3"/>
        <attribute name="isuntimed"
                   value="$path{ 'dsdisplay:/display/@untimed' }"/>

		<method name="getModelString">
			var result = '';
			var separator = "|";
			dpstudentdata.setXPath( 'runtime' );
			if(dpstudentdata.selectChild()){
				result = translateResponse(dpstudentdata.xpathQuery( '@answer_text' ));
				while (dpstudentdata.selectNext()){
					result = result + separator + translateResponse(dpstudentdata.xpathQuery( '@answer_text' ));
				}
			}
			dpstudentdata.setXPath("dsstudentdata:/testing_client_model");
			return result;
		</method>
		
		<method name="translateResponse" args="response">
			var result = '';
			if(response != null){
				result = response;
			}
			return result;
		</method>
		
		<method name="getClientMachine">
			return dpsubtest.xpathQuery('client/@machine');
		</method>

		<method name="stopHeartbeat" >
			LzTimer.removeTimer( dsendHeartbeat );
		</method>

		<method name="isMarkedForReviewWithManipulativeOpen"><![CDATA[
			var isMarked = false;
			var isManipulativeOpen = false;
			var markedAttr = dpstudentdata.xpathQuery ('current_item/item_model/@marked');
			if(markedAttr == '1' || markedAttr == 'true'){
				isMarked = true;
			}
			var generalNode = dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/general');
			if(generalNode.hasChildNodes()){
				isManipulativeOpen = true;
			}
			return (isMarked && isManipulativeOpen);
		]]></method>
    </node>

</library>
