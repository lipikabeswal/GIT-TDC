<canvas bgcolor="0x6691B4" 
        proxied="false" 
        debug="false"
        accessible="true" >

    <debug x="0" y="120" width="80%" height="400"/>

    <include href="ctbmodules"/>

    <script src="lzmodules/lfc/focuspatch.js">
    </script>

<?ignore
    <script src="lzmodules/lfc/browserpatch.js">
    </script>
?>
    <resource name="waitcursor" src="redmond/resources/lzwaitcursor_rsc.swf"/>

    <script><![CDATA[
        function printBigString( s ) {
            Debug.write( '==========' );
            if (s == null) return;
            for ( var i = 0; i < s.length; i += 100 ) {
                Debug.write( '     ' + s.substring( i, i + 100 ) );
            }
        }
    ]]></script>

    <attribute name="Copyrite" type="string" value="CTB/McGraw-Hill" />
	<attribute name="copyriteColor" type="color" value="0x527DA4" />
	<attribute name="basefontsize" type="number" value="12" />
	<attribute name="readable" value="false" type="boolean" />
    <attribute name="focusclass" value="null"/>
    <attribute name="footnotedata"/>
	<attribute name="currentCursor" value="null"/>
	<attribute name="eliminatorRsrc" value="resources/eliminator.swf" type="string" />
	<attribute name="logoRsrc" value="resources/logo.swf" type="string" />
	
    <method event="onfootnotedata" args="data">
        gFootNotePopup.show(data);
    </method>


    <method name="init">
       super.init();
       var folder = LzBrowser.getInitArg('folder');
       if (folder) this.setAttribute("folder", folder);
       var user = LzBrowser.getInitArg('user');
       if (user) this.setAttribute("user", user);
       var elim = LzBrowser.getInitArg('eliminatorResource');
       if (elim) this.setAttribute("eliminatorRsrc", elim);
    </method>

    <view name="scalingView"
          stretches="both"
          height="${ canvas.width/canvas.height &lt; 1.33 
                     ? this.width * unstretchedheight/unstretchedwidth 
                     : canvas.height}" 
          width="${  canvas.width/canvas.height &lt;1.33 
                     ? canvas.width 
                     : this.height * unstretchedwidth/unstretchedheight}"
          valign="middle" align="center">

        <view name="gView" width="800" height="600">

            <ItemInterface id="gItemInterface" width="800" height="600"
                        visible="false"/>
            <Screens id="gScreens" x="100" y="200"
                     width="600" height="200" visible="false">
                <text y="200" font="Arial" fontsize="12" 
			        fgcolor="${canvas.copyriteColor}" height="16" 
				    text="${canvas.Copyrite}"/>
            </Screens>

        </view>

    </view>

</canvas>
