<library>

    <class name="ManipulativeButton">
        <datapath/>

        <attribute name="toolid" type="string"/>
        <attribute name="isenabled" value="false"/>
        <attribute name="isselected" value="false"/>
        <attribute name="tooltip" type="string"/>
		<attribute name="xpos" type="string"/>
	    <attribute name="isButtonMouseOver" value="false" type="boolean"/>
	    
        <attribute name="tooltipdel" value="$once{new lz.Delegate (this, 'showTooltip')}" type="expression"/>

        <handler name="oninit">
            this.datapath.setXPath ('@' + this.toolid);
        </handler>

        <handler name="ondata" args="data"><![CDATA[

			/* prevent opening of another TI calculator when one is already open start */

			var currState = data;

			if(this.toolid == "ti_scientific_calculator" && currState!='disable'){
				if(gManipulatives.tiCalculatorDetails.TI84 == "sel"){
					currState = "up";
				}
			}else if(this.toolid == "ti_scientific_graphic_calculator" && currState!='disable'){
				if(gManipulatives.tiCalculatorDetails.TI30 == "sel"){
					currState = "up";
				}
			}
			
			/* prevent opening of another TI calculator when one is already open end */

            this.setAttribute ('isselected', currState == 'sel');
			
            if(currState == null || currState == 'disable'){
	            this.setAttribute ('isenabled', false);
	            this.setAttribute ('visible', false);
            }
            else{
	            this.setAttribute ('isenabled', true);
	            this.setAttribute ('visible', true);
            }

            this.setAttribute('frame', this.isselected ? 2 : 1);

            if (!this.isselected) {
                this.setAttribute('frame', this.isenabled  ? 1 : 3);
            }
            
            if(gController.htmlFields.length > 0){
            	if(this.toolid == 'highlighter' && this.isselected){
            		enableHighlighter(true);
            	}else if(this.toolid == 'highlighter' && !this.isselected){
            		enableHighlighter(false);
            	}
            	
            	if(this.toolid == 'eraser' && this.isselected){
            		enableEraser(true);
            	}else if(this.toolid == 'eraser' && !this.isselected){
            		enableEraser(false);
            	}
        	}
        ]]></handler>

        <handler name="onmouseover"><![CDATA[
            lz.Cursor.showHandCursor(true);
            if (!this.isselected && this.isenabled) this.setAttribute('frame', 2); 
            lz.Timer.addTimer (tooltipdel, 500);
            gController.setAttribute("manipSelected",this);
            this.setAttribute('isButtonMouseOver',true);
            gController.setAttribute('manipButtonRef',this);
        ]]></handler>

        <handler name="onmouseout"><![CDATA[
            lz.Cursor.showHandCursor(false);
            if (!this.isselected && this.isenabled) this.setAttribute('frame', 1); 
            gTooltip.hideTooltip ();
            lz.Timer.removeTimer (this.tooltipdel);
            this.setAttribute('isButtonMouseOver',false);
        ]]></handler>

        <handler name="onclick">
            if (this.isenabled) {
                gController.setManipulativeSelState (this.toolid, 
                                                         this.isselected ? 'up' : 'sel');
            }
            lz.Timer.removeTimer (this.tooltipdel);
        </handler>

        <method name="showTooltip" args="ignore=null">
            gTooltip.showTooltip_(this.tooltip,this.xpos);
        </method>

    </class>

</library>
