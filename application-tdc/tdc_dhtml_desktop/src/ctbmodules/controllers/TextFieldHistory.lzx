<library>

    <!-- canvas attribute used by JS methods in embedding page to send JSON string into OpenLaszlo app.
         This only happends when the text field has changed. -->
    <attribute name="texthistoryupdate" type="string" value="" />

    <handler name="ontexthistoryupdate">
        if (gController) {
            gController.textHistory.checkForChangeCallback( JSON.parse( texthistoryupdate ) );
            gController.textHistory.setAttribute( "locked", false );
        }
    </handler>

    <!-- Used to pass the new value for the textfield after an undo/redo action into the app. -->
    <attribute name="newtextvalue" type="string" value="" />

    <handler name="onnewtextvalue">
        if (gController) {
            var change = JSON.parse( newtextvalue );
            gController.textHistory[ change.methodName ]( change );
            gController.textHistory.setAttribute( "locked", false );
        }
    </handler>

    <!-- Used to unlock the history. Set by some functions in TextHistory.js, when no value
         needs to be passed into the history, but the history has to be unlocked. -->
    <attribute name="unlocktexthistory" type="string" value="" />

    <handler name="onunlocktexthistory">
        if (gController) {
            gController.textHistory.setAttribute( "locked", false );
         }
    </handler>


    <!-- ===============
         ==
         == TextFieldHistory
         ==
         ==  Class for managing the history data inside the application. The original
         ==  strings with diffs are stored in the TextHistory class in the HTML/JS file.
         ==  See the following classes/files as well:
         ==    * scrollrichedittext.lzx: Tracks delete/backspace and text selection for history.
         ==    * CachableMultilineAnswer.lzx: Calls initialization methods and contains buttons.
         ==
         =============== -->

    <class name="TextFieldHistory">

        <!--- Object with history entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="history" value="$once{{}}" type="expression" />

        <!--- Just for debugging the paste functionality.
              @type number
              @access public
          -->
        <attribute name="pasteStartTime" value="0" type="number" />

        <!-- value of the textfield with focus will be stored here to be able to create diff -->
        <attribute name="previousvalue" value="" type="string" />

        <!-- Reference to active textfield -->
        <attribute name="activeinput" value="null" type="expression" />

        <!-- Reference to previously active textfield -->
        <attribute name="previnput" value="null" type="expression" />

        <!--- Object with history entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="delayedCheckForChangeDel" value="$once{new lz.Delegate( this, 'checkForChange' )}" type="expression" />

        <!--- Object with history entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="delayedSetTextcursor" value="$once{new lz.Delegate( this, 'setTextCursorPos' )}" type="expression" />

        <!--- Set to true, if there are changes which the user user can undo.
              @type boolean
              @access public
        -->
        <attribute name="locked" value="false" type="boolean" />

        <!--- Used for measuring how long the history has been locked.
              @type number
              @access public
          -->
        <attribute name="locktime" value="0" type="number" />

        <!--- Textcursor position after redo/undo.
              @type number
              @access private
        -->
        <attribute name="newCaretIndex" value="0" type="number" />

		<!--- Object with CachableMultiline instances entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="CRinstances" value="$once{{}}" type="expression" />

        <!-- Workaround for LFC keyboard handling bug with Mac meta/command key -->
        <attribute name="isMetaDown" type="boolean" value="false" />
        <attribute name="keyEvent" type="boolean" value="false" />
        <attribute name="isMac" type="boolean" value="false" />

        <!-- debugging -->
        <attribute name="pasteStarted" type="number" value="0" />

        <handler name="oninit">
        	this.isMac = lz.embed.browser.OS.toLowerCase() == "mac";
        	if (this.isMac) {
        		var that = this;
        		var keyHandler = function(ev) {
        			that.metaKeyTracker(ev);
        		}
	        	document.addEventListener("keydown", keyHandler, false);
	        	document.addEventListener("keyup", keyHandler, false);
        	}
        </handler>

        <handler name="onactiveinput"><![CDATA[
            if ( activeinput != null && this.previnput !== this.activeinput ) {
                TextHistory.setFocus(activeinput.id);
                this.previnput = this.activeinput;
                this.previousvalue = activeinput.getText();
            }
        ]]>
        </handler>

        <!-- Custom keydown handler for tracking state of commmand/meta key on Mac -->
        <method name="metaKeyTracker" args="ev">
        <![CDATA[
        	var k = ev['keyCode']
        	var s = String.fromCharCode(k).toLowerCase();
			if (ev) {
				this.setAttribute( 'isMetaDown', ev.metaKey);
				// console.log("metaKeyTracker: type=%s, ev.metaKey=%s, isMetaDown=%s", ev.type, ev.metaKey, this.isMetaDown);
			}
			if (isMetaDown && k == 86) {
				this.pasteStarted = new Date().getTime();
                checkForChange();
                lz.Timer.resetTimer( delayedCheckForChangeDel, 200 );
                lz.Keys.__allKeysUp();
			}
        ]]>
        </method>

        <!--- Keydown handler for keycombos like Control-v, etc.
              @keywords private
        -->
        <handler name="onkeydown" reference="lz.Keys" args="k"><![CDATA[
        	if (isMac) return;
            var down = lz.Keys.downKeysArray;
            var isPaste = false;
			 if (down.length > 1) {
				isPaste = (down[0] == 17 && Number( down[1] ) == 86) || (down[0] == 86 && Number( down[1] ) == 17);
            }
            if ( isPaste ) {
                checkForChange();
                lz.Timer.resetTimer( delayedCheckForChangeDel, 100 );
                lz.Keys.__allKeysUp();
            }
        ]]>
        </handler>

       <!--- Initializes the history for a text field. Called from the ontext event handler
             of CachableMultiLineAnswer.outer.rich.answer richtexteditarea.
             @access private
             @parameter scrollrichedittext theText: Instance of scrollrichedittext.
        -->
        <method name="initializeHistoryForText" args="theText">
            // If no ID is set, set one on the text component. When the
            // history of a component is cleared, the historycleared
            // property will be set to true.
            if ( typeof theText == "undefined" || theText.id == null || theText.historycleared == true ) {
                if ( theText.id == null ) {
                    theText.setAttribute( 'id', theText.classroot.widget_id );
                }
                theText.historycleared = false;
				CRinstances[theText.id] = theText;
				this.createHistory( theText.id );
                this.setAttribute( "activeinput", theText );
                this.setAttribute( "previousvalue", theText.getText() );
            }
        </method>

        <!--- Creates a history for a text field.
              @access private
              @parameter String id: The id of the textfield.
        -->
        <method name="createHistory" args="textId"><![CDATA[
            var theText = CRinstances[textId];
            var jsonStr = null;
            if ( theText ) {
                if (typeof history[ theText.id ] == 'undefined' || history[ theText.id ] == null) {
                    jsonStr = JSON.stringify( theText.text );
                    this.history[ theText.id ] = {};
                    TextHistory.createHistory(theText.id, theText.text);
                }
            }
        ]]>
        </method>

        <!--- Clears all history entries.
                  @access public
            -->
        <method name="clearHistory"><![CDATA[
            for (var p in history) {
                var text = global[ p ];
                if ( text ) {
                    text.historycleared = true;
                }
                history[ p ] = null;
            }
            lz.Focus.clearFocus();
            this.setAttribute( "activeinput", null );
			TextHistory.clearHistory();
        ]]>
        </method>

        <!--- Sets the currently active textfield.
              @access private
              @parameter Object text: Instance of _richinternalinputtext.
        -->
        <method name="setActiveInput" args="text"><![CDATA[
             if ( this.activeinput !== text ) {
                  if ( this.activeinput != null ) {
                      // With multipl CR texts, there might be unsaved content
                      // for the currently activeinput.
                      this.checkForChange();
                  }
                 this.setAttribute( "activeinput", text );
             }
        ]]>
        </method>


        <!--- Checks if a the text has changed and creates a new history entry if needed.
              @access public
        -->
        <method name="checkForChange">
            var caretIndex = 0;
            if ( activeinput != null ) {
                if ( activeinput.getText() != this.previousvalue ) {
                    this.previousvalue = activeinput.getText();
                    caretIndex = this.getCaretIndex();
                    TextHistory.createDiff( activeinput.id, caretIndex, activeinput.getText());
                } else if ( previnput !== activeinput ) {
                    TextHistory.setFocus(activeinput.id);
                    this.previnput = this.activeinput;
                }
            }
        </method>

        <!--- Callback method for the checkForChange method. Sets the status of the undo/redo
              button, and is used to show the duration of the total action.
              @access private
              @parameter Object status: Status object, e.g. {"canredo":false,"canundo":true,"pointer":1,"textId":"t1"}.
        -->
        <method name="checkForChangeCallback" args="status">
            this.setButtonStatus( status );
        </method>

        <!---  a history transaction.
              @access public
          -->
        <method name="undo"><![CDATA[
            if ( activeinput != null ) {
                var caretIndex = this.getCaretIndex();
                TextHistory.undo(activeinput.id, caretIndex, activeinput.getText());
            }
        ]]>
        </method>

        <!--- Callback method called after the TextHistory._undo() function has been processed.
              @access public
              @parameter String status: Object with history status.
          -->
        <method name="undoCallback" args="status"><![CDATA[
            var text = CRinstances[ status.textId ];
            if ( text ) {
                this.newCaretIndex = status.caretIndex;
                text.setText( status.text );
                lz.Timer.resetTimer( delayedSetTextcursor, 500 );
                this.setButtonStatus( status );
            }
        ]]>
        </method>

        <!--- Redo a history transaction.
              @access public
          -->
        <method name="redo"><![CDATA[
            if ( activeinput != null ) {
				TextHistory.redo(activeinput.id);
            }

        ]]>
        </method>

        <!--- Callback method called after the TextHistory._redo() function has been processed.
              @access public
              @parameter String status: Object with history status.
          -->
        <method name="redoCallback" args="status"><![CDATA[
            var text = CRinstances[ status.textId ];
            if ( text ) {
                this.newCaretIndex = status.caretIndex;
                text.setText( status.text );
                lz.Timer.resetTimer( delayedSetTextcursor, 500 );
                this.setButtonStatus( status );
            }
        ]]>
        </method>

        <!--- Used to set the text cursor position with a slight delay to allow text to be
              updated for the selection is set.
              @access private
        -->
        <method name="setTextCursorPos"><![CDATA[
            if ( this.activeinput ) {
				// When setSelection() is used, the cursor it not displayed
				// correctly. This is a quick hack to get the cursor positioning
				// working again.
				var input = this.activeinput._field.tsprite.__LzInputDiv;
				input.focus();
				input.setSelectionRange(newCaretIndex, newCaretIndex);
            	return;
                // Below code was not working in DHTML runtime
                // Set the cursor position, will automatically focus the text
                // this.activeinput._field.setSelection( newCaretIndex, newCaretIndex );
            }
        ]]></method>

         <!--- Sets the undo/redo properties on the CachableMultilineAnswer class.
               @access private
               @parameter Object status: Status object from JS callback methods.
         -->
         <method name="setButtonStatus" args="status"><![CDATA[
            // answer is an instance of CachableMultilineAnswer
            var text = CRinstances[ status.textId ];
            var answer = text.classroot;
            answer.setAttribute( "canundo", status.canundo );
            answer.setAttribute( "canredo", status.canredo );
         ]]>
         </method>

         <!--- Returns the caret index value for the textfield
               @access private
               @return {number} Caret index position.
         -->
         <method name="getCaretIndex"><![CDATA[
             var caretIndex = this.activeinput._field.caretindex;
             return caretIndex;
         ]]></method>

    </class>

</library>
