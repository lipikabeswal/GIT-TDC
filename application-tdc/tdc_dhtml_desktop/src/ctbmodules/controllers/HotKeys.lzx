<library>

    <node id="gHotKeys">

        <method name="enableKeys">
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'capslock', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'capslock', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'capslock', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'capslock', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'capslock', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'capslock', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'capslock', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'capslock', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'capslock', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'capslock', 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'capslock', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'capslock', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'capslock', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'capslock', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'capslock', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'capslock', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'capslock', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'capslock', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'capslock', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'capslock', 'j' ] );
            lz.Keys.callOnKeyCombo( dgoBack, [ 'control', 'j' ] );
			lz.Keys.callOnKeyCombo( dgoBack, [ 'control', 'j', 'capslock' ] );
            lz.Keys.callOnKeyCombo( dgoOn, [ 'control', 'k' ] );
			lz.Keys.callOnKeyCombo( dgoOn, [ 'control', 'k', 'capslock' ] );            
            lz.Keys.callOnKeyCombo( dtoggleMark, [ 'control', 'l' ] );
			lz.Keys.callOnKeyCombo( dtoggleMark, [ 'control', 'l', 'capslock' ] );            
            lz.Keys.callOnKeyCombo( dtoggleTimer, [ 'control', 'o' ] );
			lz.Keys.callOnKeyCombo( dtoggleTimer, [ 'control', 'o', 'capslock' ] ); 
            lz.Keys.callOnKeyCombo( dpause, [ 'control', 'u' ] );
			lz.Keys.callOnKeyCombo( dpause, [ 'control', 'u', 'capslock' ] );
            lz.Keys.callOnKeyCombo( dstop, [ 'control', 's' ] );
			lz.Keys.callOnKeyCombo( dstop, [ 'control', 's', 'capslock' ] ); 
            lz.Keys.callOnKeyCombo( dfinish, [ 'control', 'f' ] );
			lz.Keys.callOnKeyCombo( dfinish, [ 'control', 'f', 'capslock' ] );
        </method>

        <method name="disableKeys">
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'shift', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'shift', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'shift', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'shift', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'shift', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'shift', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'shift', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'shift', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'shift', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'shift', 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'capslock', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'capslock', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'capslock', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'capslock', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'capslock', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'capslock', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'capslock', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'capslock', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'capslock', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'capslock', 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'shift', 'capslock', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'shift', 'capslock', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'shift', 'capslock', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'shift', 'capslock', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'shift', 'capslock', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'shift', 'capslock', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'shift', 'capslock', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'shift', 'capslock', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'shift', 'capslock', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'shift', 'capslock', 'j' ] );
            lz.Keys.removeKeyComboCall( dgoBack, [ 'control', 'j' ] );
			lz.Keys.removeKeyComboCall( dgoBack, [ 'control', 'j', 'capslock' ] );
            lz.Keys.removeKeyComboCall( dgoOn, [ 'control', 'k' ] );
            lz.Keys.removeKeyComboCall( dgoOn, [ 'control', 'k', 'capslock' ] );            
            lz.Keys.removeKeyComboCall( dtoggleMark, [ 'control', 'l' ] );
			lz.Keys.removeKeyComboCall( dtoggleMark, [ 'control', 'l', 'capslock' ] );             
            lz.Keys.removeKeyComboCall( dtoggleTimer, [ 'control', 'o' ] );
            lz.Keys.removeKeyComboCall( dtoggleTimer, [ 'control', 'o', 'capslock' ] );  
           	lz.Keys.removeKeyComboCall( dpause, [ 'control', 'u' ] );
            lz.Keys.removeKeyComboCall( dpause, [ 'control', 'u', 'capslock' ] );
            lz.Keys.removeKeyComboCall( dstop, [ 'control', 's' ] );
			lz.Keys.removeKeyComboCall( dstop, [ 'control', 's', 'capslock' ] ); 
            lz.Keys.removeKeyComboCall( dfinish, [ 'control', 'f' ] );
            lz.Keys.removeKeyComboCall( dfinish, [ 'control', 'f', 'capslock' ] );                    
        </method>

        <method name="isComboHotKeyDown"><![CDATA[
            var isdown = false;
            if ((lz.Keys.isKeyDown("shift") || 
                 lz.Keys.isKeyDown("capslock")) && 
                    (lz.Keys.isKeyDown("a") ||
                     lz.Keys.isKeyDown("b") ||
                     lz.Keys.isKeyDown("c") ||
                     lz.Keys.isKeyDown("d") ||
                     lz.Keys.isKeyDown("e") ||
                     lz.Keys.isKeyDown("f") ||
                     lz.Keys.isKeyDown("g") ||
                     lz.Keys.isKeyDown("h") ||
                     lz.Keys.isKeyDown("i") ||
                     lz.Keys.isKeyDown("j"))) {
                isdown = true;
            }

            if (lz.Keys.isKeyDown("control") &&
                    (lz.Keys.isKeyDown("j") ||
                     lz.Keys.isKeyDown("k") ||
                     lz.Keys.isKeyDown("l") ||
                     lz.Keys.isKeyDown("o") ||
                     lz.Keys.isKeyDown("u") ||
                     lz.Keys.isKeyDown("s") ||
                     lz.Keys.isKeyDown("f"))) {
                isdown = true;
            }
                
            return isdown;
        ]]></method>

        <method name="exitPopups">
            gController.exitPopups();
        </method>

        <!-- added to handle hot keys in TE items -->
        <method name="handleHtmlKeyPress" args="data"><![CDATA[
	        	var keys = data.split("|");
	        	var key = keys[0];
	        	var shift = keys[1];
	        	var capslock = keys[2];
	        	var control = keys[3];
				if (document.activeElement.tagName == "IFRAME") {
					// iFrame has the focus; shift the focus back to top document
					if(!gController.magnifierVisible){
						top.focus();
					}
					console.warn("Controller#handleHtmlKeyPress: setting focus to top window***",gController.magnifierState,typeof(gController.magnifierState));
				}
	        	if(key == 'A' || key == 'Shift+A' || key == 'Caps_lock+A' || key == 'Shift+Caps_lock+A')
	       			toggleA();
	       		else if(key == 'B' || key == 'Shift+B' || key == 'Caps_lock+B' || key == 'Shift+Caps_lock+B')
	       			toggleB();
	       		else if(key == 'C' || key == 'Shift+C' || key == 'Caps_lock+C' || key == 'Shift+Caps_lock+C')
	       			toggleC();
	       		else if(key == 'D' || key == 'Shift+D' || key == 'Caps_lock+D' || key == 'Shift+Caps_lock+D')
	       			toggleD();
	       		else if(key == 'E' || key == 'Shift+E' || key == 'Caps_lock+E' || key == 'Shift+Caps_lock+E')
	       			toggleE();
	       		else if(key == 'F' || key == 'Shift+F' || key == 'Caps_lock+F' || key == 'Shift+Caps_lock+F')
	       			toggleF();
	       		else if(key == 'G' || key == 'Shift+G' || key == 'Caps_lock+G' || key == 'Shift+Caps_lock+G')
	       			toggleG();
	       		else if(key == 'H' || key == 'Shift+H' || key == 'Caps_lock+H' || key == 'Shift+Caps_lock+H')
	       			toggleH();
	       		else if(key == 'I' || key == 'Shift+I' || key == 'Caps_lock+I' || key == 'Shift+Caps_lock+I')
	       			toggleI();
	       		else if(key == 'j' || key == 'Shift+J' || key == 'Caps_lock+J' || key == 'Shift+Caps_lock+J')
	      			toggleJ();
	      		else if(key == 'Ctrl+J')
	       			goBack();
	       		else if(key == 'Ctrl+K')
	       			goOn();
	       		else if(key == 'Ctrl+L')
	       			toggleMark();
	       		else if(key == 'Ctrl+O')
	       			toggleTimer();
	       		else if(key == 'Ctrl+U')
	       			pause();
	       		else if(key == 'Ctrl+S')
	       			stop();
	       		else if(key == 'Ctrl+F')
	       			finish();
        ]]></method>
        

        <attribute name="dtoggleA"
                   value="$once{ new lz.Delegate( this, 'toggleA' ) }" type="expression"/>
        <attribute name="dtoggleB"
                   value="$once{ new lz.Delegate( this, 'toggleB' ) }" type="expression"/>
        <attribute name="dtoggleC"
                   value="$once{ new lz.Delegate( this, 'toggleC' ) }" type="expression"/>
        <attribute name="dtoggleD"
                   value="$once{ new lz.Delegate( this, 'toggleD' ) }" type="expression"/>
        <attribute name="dtoggleE"
                   value="$once{ new lz.Delegate( this, 'toggleE' ) }" type="expression"/>
        <attribute name="dtoggleF"
                   value="$once{ new lz.Delegate( this, 'toggleF' ) }" type="expression"/>
        <attribute name="dtoggleG"
                   value="$once{ new lz.Delegate( this, 'toggleG' ) }" type="expression"/>
        <attribute name="dtoggleH"
                   value="$once{ new lz.Delegate( this, 'toggleH' ) }" type="expression"/>
        <attribute name="dtoggleI"
                   value="$once{ new lz.Delegate( this, 'toggleI' ) }" type="expression"/>
        <attribute name="dtoggleJ"
                   value="$once{ new lz.Delegate( this, 'toggleJ' ) }" type="expression"/>
        <attribute name="dgoBack"
                   value="$once{ new lz.Delegate( this, 'goBack' ) }" type="expression"/>
        <attribute name="dgoOn"
                   value="$once{ new lz.Delegate( this, 'goOn' ) }" type="expression"/>
        <attribute name="dtoggleMark"
                   value="$once{ new lz.Delegate( this, 'toggleMark' ) }" type="expression"/>
        <attribute name="dtoggleTimer"
                   value="$once{ new lz.Delegate( this, 'toggleTimer' ) }" type="expression"/>
        <attribute name="dpause"
                   value="$once{ new lz.Delegate( this, 'pause' ) }" type="expression"/>
        <attribute name="dstop"
                   value="$once{ new lz.Delegate( this, 'stop' ) }" type="expression"/>
        <attribute name="dfinish"
                   value="$once{ new lz.Delegate( this, 'finish' ) }" type="expression"/>
  
        <method name="toggleA" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups();
	        	gController.toggleItemSelState( 'A' ); 
	        }
        </method>
        <method name="toggleB" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'B' ); 
	        }
        </method>
        <method name="toggleC" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'C' ); 
	        }
         </method>
        <method name="toggleD" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'D' ); 
	        }
       </method>
        <method name="toggleE" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'E' ); 
	        }
        </method>
        <method name="toggleF" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups();
	        	gController.toggleItemSelState( 'F' ); 
	        }
        </method>
        <method name="toggleG" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'G' ); 
	        }
        </method>
        <method name="toggleH" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'H' ); 
	        }
        </method>
		<method name="toggleI" args="ignore=null">    
			if(!gController.isCrItem()){
		    	this.exitPopups(); 
				gController.toggleItemSelState( 'I' ); 
			}
		</method>
        <method name="toggleJ" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'J' ); 
	        }
        </method>        
        <method name="goBack" args="ignore=null">
		<![CDATA[
		    if(canvas.loadItem){
				if(!gController.fwdOnly){
	        		if(!gController.onFirstItem()){
	        			lz.Focus.clearFocus();
	        		}
	        	
	            	this.exitPopups();
	        		gController.stepNavigateBack();
				} 
			}	     
       	]]>
		</method>
        <method name="goOn" args="ignore=null"> 
            if(canvas.loadItem){
	        	if(!gController.onLastItem()){
	        		lz.Focus.clearFocus();
	        	}
	            this.exitPopups(); 
	        	gController.stepNavigateForward();  
	        }	   
        </method>
        <method name="toggleMark" args="ignore=null"> 
            if(canvas.loadItem){
	            this.exitPopups(); 
	         	gController.toggleMark();  
	         }	            
        </method>
        <method name="toggleTimer" args="ignore=null">
            if(canvas.loadItem){
	            this.exitPopups(); 
	        	gController.toggleTimer();  
	        }	           
        </method>
        <method name="pause" args="ignore=null"> 
        	if(canvas.loadItem){
	        	if(gController.pausable == 'true'){
	        		lz.Focus.clearFocus();
	        	}
	            this.exitPopups(); 
	        	if(gItemInterface.visible == true || gTutorial.visible == true){
	        		gController.pauseTest();
	        	}	
	        }		
        </method>
        <method name="stop" args="ignore=null"> 
            if(canvas.loadItem){    
                lz.Focus.clearFocus();
	            this.exitPopups();
	        	if(gItemInterface.visible == true || gTutorial.visible == true){
	        		gController.finishTest();   
	        	}	
	        }		           
        </method>
        <method name="finish" args="ignore=null">  
        	if(canvas.loadItem){   
	        	lz.Focus.clearFocus();
	            this.exitPopups(); 
	        	gController.finishTestShortcut(); 
	        }	     
        </method>
    </node>

</library>
