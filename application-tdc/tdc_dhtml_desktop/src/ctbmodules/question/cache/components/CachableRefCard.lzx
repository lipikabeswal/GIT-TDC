<library>

	<include href="CachableComponent.lzx"/>
	<include href="../../../manipulatives/dragrotateresize/DragMixin.lzx" />

    <class name="CachableRefCard" comptype="$once {gCompTypes.WIDGET_REFERENCE_CARD}" extends="CachableComponent"
    	   with="DragMixin"
           dragaxis="both"
           dragminx="${-(this.width - 100)}"
           dragmaxx="${parent.width - 100}"
           dragminy="${-(this.height - 100)}"
           dragmaxy="${parent.height - 100}">
		<attribute name="innerHeight" value="400" type="number"/>
		<attribute name="defaultInnerHeight" value="400" type="number"/>
		<attribute name="innerWidth" value="500" type="number"/>
		<attribute name="REF_CARD_X" value="10" type="number"/>
		<attribute name="REF_CARD_Y" value="26" type="number"/>
		<attribute name="MIN_WIDTH" value="121" type="number"/>
		<attribute name="MIN_HEIGHT" value="101" type="number"/>
		<attribute name="LINE_PADDING" value="30" type="number"/>
		<attribute name="RESOURCE_DIMENSION" value="69" type="number"/> <!-- the height and width of the stretching resource -->
		<attribute name="refCardRsrc" type="string"/>
		<attribute name="titleRsrc" type="string"/>
		<attribute name="scrolls" type="boolean" value="false" />
		
		<attribute name="realTitleLoaded" type="boolean" value="false"/>
		<attribute name="refCardContentsLoaded" type="boolean" value="false"/>
		
		<!-- 
			when mouse is down on the scrollbar, it will be true
			-->
		<attribute name="isScrolling" type="boolean" value="false" />

		<attribute name="toolid" type="string" value="formula_card_resource"/>
        <attribute name="toolstate" value="$once{new lz.datapointer ()}"/>
		<attribute name="visible" value="${(this.toolstate.data == 'sel' &amp;&amp; this.realTitleLoaded &amp;&amp; this.refCardContentsLoaded) ? true : false}"/>

		<handler name="onvisible" args="v"><![CDATA[
		//To control the visibility according to the toolstate
			if(this.toolstate.data != 'sel' && v) {
				this.setAttribute('visible',false);
			}
			else
			{
				this.bringToFront();
			}	
		]]></handler>
      

		<!-- <datapath /> -->
		<handler name="oninit"><![CDATA[
			var elm = this.getDisplayObject();
			elm.setAttribute("id","cRefCard");
		]]></handler>

		<handler name="ondata">
			this.toolstate.setAttribute ('rerunxpath', true);
            this.toolstate.setXPath (parent.datapath.xpath + '/@' + this.toolid);
            this.datapath.setXPath (this.toolid);
		</handler>
		

        <handler name="ondata" args="data"><![CDATA[
        	this.setAttribute("height", null);
			this.setAttribute("width", null);
			this.refCardContents.contents.setAttribute("height", null);
			this.refCardContents.contents.setAttribute("width", null);

			if(data != null && data.hasAttr('src')) {
				var refsrc = String(data.getAttr('src'));
				refsrc = refsrc.toLowerCase();
				if(refsrc.indexOf('istep') >= 0){
					refCardContents.contents.setAttribute ('resource', 'ISTEP_refcard_contents');
					title.real_title.setAttribute ('resource', 'ISTEP_refcard_title');
				}
				else if(refsrc.indexOf('corelink') >= 0){
		        	/*refCardContents.contents.setAttribute('resource',"Corelink_refcard_contents");
					title.real_title.setAttribute('resource',"Corelink_refcard_title");*/
					refCardContents.contents.setAttribute('source',"ctbmodules/resources/manipulatives/refcard/CoreLink_RefCard.svg");
					title.real_title.setAttribute('source',"ctbmodules/resources/manipulatives/refcard/CoreLink_RefCard-title.svg");					
					this.setAttribute("scrolls",true);
				}
			}

			calcDimensions();
			 ]]></handler>
			
		<method name="calcDimensions"><![CDATA[
			var scrollerWidth = refCardContents.scroller.width;

			if(refCardContents.contents.resourceheight > this.innerHeight) {
				this.scrolls = true;	
			}
			else {
				this.scrolls = false;
			}
			
        	if(!this.scrolls){
        		this.setAttribute('innerHeight', refCardContents.contents.resourceheight);
        		scrollerWidth = 0; 
        	}
        	else {
        		this.setAttribute('innerHeight', this.defaultInnerHeight);
        	}

			this.setAttribute('innerWidth', refCardContents.contents.resourcewidth + scrollerWidth);
			var halfWidth = (this.innerWidth - title.real_title.resourcewidth - this.LINE_PADDING)/2 ;
			title.leftLines.setAttribute('width', halfWidth);
			title.rightLines.setAttribute('width', halfWidth);

			if(data != null && data.hasAttr('x')){
                this.setAttribute ('x', Number(data.getAttr ('x')));
            }
            else{
             	this.setAttribute ('x', (gManipulatives.width - this.width)/2);
            }
            if(data != null && data.hasAttr('y')){
            	this.setAttribute ('y', Number(data.getAttr ('y')));
            }
            else{
                this.setAttribute ('y', (gManipulatives.height - this.height)/2);
			}
			
			if(data != null && data.hasAttr('scrolls')){
                this.setAttribute ('scrolls', data.getAttr ('scrolls'));
            }

			if(data != null && data.hasAttr('scrollTo')){
            	refCardContents.contents.setAttribute ('y', Number(data.getAttr('scrollTo')));
            }
            else {
            	refCardContents.contents.setAttribute ('y', 0);
            } 

			
			if (data != null && data.hasAttr ('width')) {
    			this.setAttribute ('width', Number (data.getAttr ('width')));
			} else {
                this.setAttribute ('width', null);
            }

			if (data != null && data.hasAttr ('height')) {
				this.setAttribute ('height', Number (data.getAttr ('height')));
			} else {
                this.setAttribute ('height', null);
            }

  			
            // if restoring manipulative with Scratchpad open - need Scratchpad to be top window
            /*if(data != null && gScratchpad.visible){
                gScratchpad.bringToFront();
            }*/
         ]]>
         </method>

        <handler name="onmouseover">
            gController.setCurrentCursor('cangrab_cursor');
        </handler>

        <handler name="onmouseout">
            gController.clearAndRestoreCurrentCursor();
        </handler>

        <handler name="onmousedown">
        	this.bringToFront();
            lz.Cursor.setCursorGlobal ('grabbing_cursor');
            lz.Cursor.lock ();
            this.setAttribute('dragenabled', true);
            
            // for the defect 73212
            gPleaseWaitPopup.setAttribute('manipRef', this);
        </handler>

        <handler name="onmouseup">
            lz.Cursor.unlock ();
            gController.restoreCurrentCursor();
            this.setAttribute('dragenabled', false);

            this.datapath.p.setAttr ('x', this.x);
            this.datapath.p.setAttr ('y', this.y);
        </handler>

		

		<method name="updateScrollTo" args="value"><![CDATA[
            if (this.data != null)
			    this.datapath.p.setAttr ('scrollTo', value);
		]]></method>

		
		<view name="background" >
			<simplelayout axis="y" spacing="0" />
			<view name="top">
			    <simplelayout axis="x" spacing="0" />
			    <view  name="topLeft" 
			           resource="rc_top_left"
			           height="$once{classroot.RESOURCE_DIMENSION}"
			           width="$once{classroot.RESOURCE_DIMENSION}"
			           stretches="both"/>
			    <view name="topMiddle"
			          resource="rc_top_middle"
			          height="$once{classroot.RESOURCE_DIMENSION}"
			          width="${classroot.innerWidth-classroot.MIN_WIDTH}" 
			          stretches="both" />
			    <view name="topRight"
			          resource="rc_top_right" 
			          height="$once{classroot.RESOURCE_DIMENSION}"
			          width="$once{classroot.RESOURCE_DIMENSION}"
			          stretches="both"/>
			</view>
			<view name="center">
			    <simplelayout axis="x" spacing="0" />
			    <view name="centerLeft"
			          resource="rc_center_left" 
			          height="${classroot.innerHeight-classroot.MIN_HEIGHT}"
			          width="$once{classroot.RESOURCE_DIMENSION}"
			          stretches="both"/>
			    <view name="centerMiddle"
			          resource="rc_center_middle"
			          height="${classroot.innerHeight-classroot.MIN_HEIGHT}" 
			          width="${classroot.innerWidth-classroot.MIN_WIDTH}" 
			          stretches="both"/>
			    <view name="centerRight"
			          resource="rc_center_right" 
			          height="${classroot.innerHeight-classroot.MIN_HEIGHT}"
			          width="$once{classroot.RESOURCE_DIMENSION}"
			          stretches="both"/>
			</view>
			<view name="bottom">
			    <simplelayout axis="x" spacing="0" />
			    <view name="bottomLeft"
			          resource="rc_bottom_left"
			          height="$once{classroot.RESOURCE_DIMENSION}"
			          width="$once{classroot.RESOURCE_DIMENSION}"
			          stretches="both"/>
			    <view name="bottomMiddle"
			          resource="rc_bottom_middle" 
			          height="$once{classroot.RESOURCE_DIMENSION}"
			          width="${classroot.innerWidth-classroot.MIN_WIDTH}" 
			          stretches="both"/>
			    <view name="bottomRight"
			          resource="rc_bottom_right"
			          height="$once{classroot.RESOURCE_DIMENSION}"
			          width="$once{classroot.RESOURCE_DIMENSION}"
			          stretches="both"/>
			</view>
		</view>
		<view name="title" y="8">
			<simplelayout axis="x" spacing="5" inset="10"/>
			<view name="leftLines"
				  resource="rc_lines"
				  stretches="width" />
			<view name="real_title">
				<handler name="onload">
					classroot.setAttribute('realTitleLoaded',true);
					classroot.calcDimensions();
				</handler>
			</view>
			<view name="rightLines"
				  resource="rc_lines"
				  stretches="width" />
			<basebutton resource="ref_card_close_btn" height="${this.resourceheight + 1}" y="-4">
				<handler name="onclick">
			    	gController.setManipulativeSelState (classroot.toolid, 'up');
			    </handler>
			</basebutton>
		</view>
	    <view name="refCardContents" 
		      x="$once{classroot.REF_CARD_X}" 
		      y="$once{classroot.REF_CARD_Y}" 
		      width="${classroot.innerWidth}" 
		      height="${classroot.innerHeight}" 
		      clip="true" 
		      bgcolor="0xFFFFFF" showhandcursor="false">
			<view name="contents"
			      width="${classroot.innerWidth - parent.scroller.width}">
				<handler name="ony"><![CDATA[
					// When user is actually scrolling the view, then only update the value of 'scrollTo' 
					if(typeof(this.isloaded) != "undefined" && this.isloaded && classroot.isScrolling) {
			            	classroot.updateScrollTo(this.y);
					}
				]]></handler>
				
				<handler name="onload">
					classroot.setAttribute('refCardContentsLoaded',true);
					classroot.calcDimensions();
				</handler>

			</view>
		     <vscrollbar name="scroller" visible="${this.scrollable}" />
			
				
		</view>
    </class>

</library>
