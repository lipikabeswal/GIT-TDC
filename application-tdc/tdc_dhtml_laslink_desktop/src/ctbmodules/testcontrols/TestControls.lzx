<library>
    <!-- somehow bgcolor causes a square corner to the left of 
        multistatebutton name="markbtn". bgcolor="0xFFFFCC" removed for name=TestControls-->
    <class name="TestControls"
           datapath="dsstudentdata:/testing_client_model/">         
        
        <attribute name="curritempos" 
                   value="$path{'current_item/@itempos'}"/>
		<attribute name="curritemno" 
                   value="$path{'current_item/item_model/@item_no'}"/>

        <attribute name="totalitemno" 
                   value="$path{'question_number/@total_including_theme'}"/>
        

        <attribute name="iscurranswered" 
                   value="$path{'current_item/item_model/@answered'}"
                   setter="setIsCurrAnswered (iscurranswered)"/>

        <attribute name="iscurrmarked" 
                   value="$path{'current_item/item_model/@marked'}" 
                   setter="setIsCurrMarked (iscurrmarked)"/>

        <attribute name="curranswer" 
                   value="$path{'current_item/item_model/@answer_text'}"
				   />

        <attribute name="itemtype"
                   value="$path{'current_item/item_model/interaction/@type'}"/>
        
        <attribute name="uienabled"
                   value="$path{ 'dsdisplay:/display/@enabled' }"/>

        <attribute name="theme" 
                   value="$path{'current_item/item_model/@theme'}"/>

		<attribute name="revisitAllowed" 
                   value="$path{'current_item/item_model/@allow_revisit'}" 
				   setter="setMarkForReview (revisitAllowed)" />
		<attribute name="disableNavigation" 
                   value="$path{'current_item/item_model/@canNotNavigate'}" 
				   setter="setDisableNavigation (disableNavigation)" />

        <method name="setIsCurrAnswered" args="isanswered"><![CDATA[
        	Debug.write("setIsCurrAnswered============== ",isanswered);
            if (typeof (isanswered) == 'string') {
               isanswered = (isanswered == '1');
            }
            
            var isgr = itemtype == 'grid'; 
			var iscr = itemtype == 'text_entry';

            //only show text for selection responses
            var isselanswer = datapath.xpathQuery ('current_item/item_model/interaction/selector') != null;
            this.answertxt.answeristxt.setAttribute ('visible', isanswered && !isgr && !iscr);
            this.answertxt.noanswertxt.setAttribute ('visible', !isanswered && isselanswer && !isgr && !iscr );

            this.iscurranswered = isanswered;
        ]]></method>
        
        <method name="setIsCurrMarked" args="ismarked">
            if (typeof (ismarked) == 'string') {
               ismarked = (ismarked == '1');
            } 
            this.iscurrmarked = ismarked;
            this.btns.markbtn.setAttribute ('statenum', ismarked ? 1 : 0);
        </method>

		<method name="answerSelected" args="chosenanswer">
			/*if (typeof (curranswer) == 'string'){
				if(chosenanswer == 's'){
					this.curranswer = chosenanswer;
				}
			}*/
			this.curranswer = chosenanswer;
		</method>
        <handler name="oncurranswer"><![CDATA[
			if (this.curranswer) {
            	var selAns = datapath.xpathQuery ("current_item/item_model/interaction/selector[@user_action='s']");
				if(selAns!=null && selAns!="undefined"){
	            	this.curranswer = selAns;
	                var currsel = this.curranswer.getAttr ('identifier');
	
			  /** if login response xml has seed, replace currsel by random 
			 	* value assigned to this distractor */
				if(gController.isLoginResponseHavingSeed &&
					this.curranswer.hasAttr('randomIdentifier')) {         
	
					currsel = this.curranswer.getAttr('randomIdentifier');
	
				}
	//Debug.write("Test Control......", "Actual : ",this.curranswer.getAttr('identifier'), "|| Random : ",currsel, "|| Correct : ", gController.dpstudentdata.xpathQuery("current_item/item_model/@correct"));
	                this.answertxt.answeristxt.selitem.setAttribute ('text', currsel);
				}
            }  
        ]]></handler>

        <handler name="oncurritempos"><![CDATA[
//Debug.write("oncurritempos called...",this.curritempos);
            //handle nav visibility and positioning

			var currentItemNumber = parseInt(this.curritempos);
			
			if(gController.productTypeVal.indexOf('LASLINKS') >= 0) {
				if(currentItemNumber != 1){				
                	this.btns.navbtns.btnback.setAttribute ('visible', true);
				}
				else{
                	this.btns.navbtns.btnback.setAttribute ('visible', false);
				}
			}
			else {
				if(currentItemNumber != 1 && !gController.fwdOnly){				
	                this.btns.navbtns.btnback.setAttribute ('visible', true);
				}
				else{
	                this.btns.navbtns.btnback.setAttribute ('visible', false);
				}
			}
//Debug.write("currentItemNumber : "+currentItemNumber+" : "+gController.getNextNavigableOffset(currentItemNumber));			
            //if(gController.adaptive == 'true' && currentItemNumber == gController.subtestLength){
				//this.btns.navbtns.btnforward.setAttribute ('visible', false);
			//}
			//else{
			var allnonThemeItemsVisited = gController.lastItemVisited || (gController.visitedCount==gController.getTotalNumberOfItems(false));
			
		    if (currentItemNumber < parseInt(this.totalitemno) && gController.getNextNavigableOffset(currentItemNumber) < parseInt(this.totalitemno)) {
		    		this.btns.navbtns.btnforward.setAttribute ('visible', true);
					if(gController.productTypeVal.indexOf('LASLINKS') >= 0 
						&& curritemno==gController.lastThemeItemNo 
						&& theme 
						&& gController.fwdOnly
						&& allnonThemeItemsVisited){
						this.btns.navbtns.btnforward.setAttribute ('visible', false);
					}
		    	}
		    else{
				if(theme && gController.fwdOnly && gController.productTypeVal.indexOf('LASLINKS') >= 0){
					gController.setAttribute('lastItemVisited',true);
				}
		    	this.btns.navbtns.btnforward.setAttribute ('visible', false);
		    	}
		   // }  
            
         ]]></handler>
		
		<method name="setMarkForReview" args="isRevisitAllowed"><![CDATA[
			if (typeof (isRevisitAllowed) == 'string') {
               isRevisitAllowed = (isRevisitAllowed == 'true');
            }
			this.revisitAllowed = isRevisitAllowed;	

			if(!theme && !gController.fwdOnly){	
				if(this.revisitAllowed != null){
					if(this.revisitAllowed != true){
			  			this.btns.markbtn.setAttribute ('visible', false);	
			  		}else{
						this.btns.markbtn.setAttribute ('visible', true);
					}
			  	}else{
			  		this.btns.markbtn.setAttribute ('visible', true);
				}
			}else{
				this.btns.markbtn.setAttribute ('visible', false);		
			}
		]]></method>
		<method name="setDisableNavigation" args="isDisableNavigation"><![CDATA[
			if (typeof (isDisableNavigation) == 'string') {
               isDisableNavigation = (isDisableNavigation == 'true');
            }

			if(isDisableNavigation == null){
				isDisableNavigation = false;
			}
			this.disableNavigation = isDisableNavigation;
			
			if(this.disableNavigation != true){
				this.enableAllButtons();				
			} else {
				this.disableAllButtons();
			}	

			// With a custom setter, we have to take care of generating 
			// the ondisableNavigation event.
			if (this.ondisableNavigation && this.ondisableNavigation.ready) {
				this.ondisableNavigation.sendEvent();
			}
		]]></method>
		<method name="enableAllButtons">
			this._clickcover.setAttribute("visible", false);				
			this.btns.navbtns.btnforward.setAttribute ('enabled', true);
			this.btns.navbtns.btnback.setAttribute ('enabled', true);
			this.btns.navbtns.btnfinish.setAttribute ('enabled', true);		
		</method>
		<method name="disableAllButtons">
			this._clickcover.setAttribute("visible", true);
			this.btns.navbtns.btnforward.setAttribute ('enabled', false);
			this.btns.navbtns.btnback.setAttribute ('enabled', false);
			this.btns.navbtns.btnfinish.setAttribute ('enabled', false);			
		</method>

		<view name="answertxt" visible="${!classroot.theme}">
	        <view name="answeristxt" visible="false" x="30"
	              fgcolor="0x6590B3" fontstyle="bold" y="-4">
	            <simplelayout axis="x" />
	            <text resize="true">YOUR ANSWER IS:</text>
	            <text name="selitem" resize="true"></text>
	        </view>
	        <text name="noanswertxt" visible="false" x="25" y="-4"
	              fgcolor="0x6590B3" fontstyle="bold" fontsize="11">
	            - NO ANSWER SELECTED -
	            
	            <handler name="oninit">
               		var elm=this.getDisplayObject();
               		elm.setAttribute('style','font-family: CTB; font-weight: bold; pointer-events: none; font-size: 11px; height: 13px; width: auto;');
               	</handler>
	        </text>
		</view>
        <view name="btns" y="14" x="7">
            <simplelayout axis="y" spacing="3"/>
            <view name="navbtns">
                <basebutton name="btnback" resource="go_back_btn" x="0"
                            disabledResourceNumber="1"  visible="${!gController.onFirstItem()}">
                			
                			<handler name="onmouseover">
                                lz.Cursor.showHandCursor(true);
					        </handler>
					        <handler name="onmouseout">
					            lz.Cursor.showHandCursor(false);
					        </handler>
					         <handler name="onclick">
					            <![CDATA[
					            gController.setAttribute('goBackPressed',true);
					            if(gController.allowNavigate && gController.allowItmeNavigate){
					            	classroot.disableAllButtons();
					                gController.setAttribute('allowNavigate',false);
					            	gController.stepNavigateBack ();
					            }
					             ]]>
					        </handler>
                </basebutton>            
                <basebutton name="btnforward" resource="go_on_btn" x="100"
                            disabledResourceNumber="1">
                            <handler name="onmouseover">
                                lz.Cursor.showHandCursor(true);
					        </handler>
					        <handler name="onmouseout">
					            lz.Cursor.showHandCursor(false);
					        </handler>
					        <handler name="onclick">
					        <![CDATA[
					            if(gController.allowNavigate && gController.allowItmeNavigate){
					            	classroot.disableAllButtons();					            						            	
					                gController.setAttribute('allowNavigate',false);
					            	gController.stepNavigateForward ();
					            }	
					            ]]>
					        </handler>
                </basebutton>            
                <basebutton name="btnfinish" resource="finish_test_btn" id="gFinishTestButton"
                            visible="${!parent.btnforward.visible}" x="100"
                            disabledResourceNumber="1">
                            <handler name="onclick">
				            	classroot.disableAllButtons();
	                            gController.setAttribute("isStopTest",false);
	                            gController.finishTest ();
                            </handler>
                             <handler name="onmouseover">
                                lz.Cursor.showHandCursor(true);
					        </handler>
					        <handler name="onmouseout">
					            lz.Cursor.showHandCursor(false);
					        </handler>
                 </basebutton>
            </view>
            <multistatebutton name="markbtn" align="center"
                              clickable="${ classroot.uienabled == true }"
                              resource="mark_unmark_btn" statelength="3"
                              maxstate="1" 
              				  onclick="gController.markQuestion (!classroot.iscurrmarked)">
              				  
              				<handler name="onmouseover">
                                lz.Cursor.showHandCursor(true);
					        </handler>
					        <handler name="onmouseout">
					            lz.Cursor.showHandCursor(false);
					        </handler>
            </multistatebutton>
        </view>
        
        <!-- This view will capture all the mouseclicks until
             operations like stepNavigateForward or stepNavigateBack
             have been executed. -->
        <view name="_clickcover" clickable="true" showhandcursor="false"
        	  width="100%" height="70%">
        	
        </view>
    </class>

</library>