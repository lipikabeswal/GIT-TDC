<library>

    <node id="gHotKeys">

        <method name="enableKeys">
         <![CDATA[
           if(gController.scratchpadOpen)
            {
              // this condition is for the defect 74261, 74262

              lz.Keys.removeKeyComboCall( dtoggleA, [ 'a' ] );
              lz.Keys.removeKeyComboCall( dtoggleB, [ 'b' ] );
              lz.Keys.removeKeyComboCall( dtoggleC, [ 'c' ] );
              lz.Keys.removeKeyComboCall( dtoggleD, [ 'd' ] );
              lz.Keys.removeKeyComboCall( dtoggleE, [ 'e' ] );
              lz.Keys.removeKeyComboCall( dtoggleF, [ 'f' ] );
              lz.Keys.removeKeyComboCall( dtoggleG, [ 'g' ] );
              lz.Keys.removeKeyComboCall( dtoggleH, [ 'h' ] );
              lz.Keys.removeKeyComboCall( dtoggleI, [ 'i' ] );
            }
          else
           {
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'i' ] );
           }
		   		    
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'capslock', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'capslock', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'capslock', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'capslock', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'capslock', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'capslock', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'capslock', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'capslock', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'capslock', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'capslock', 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'capslock', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'capslock', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'capslock', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'capslock', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'capslock', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'capslock', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'capslock', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'capslock', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'capslock', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'capslock', 'j' ] );
            lz.Keys.callOnKeyCombo( dgoBack, [ 'control', 'j' ] );
            lz.Keys.callOnKeyCombo( dgoOn, [ 'control', 'k' ] );
            lz.Keys.callOnKeyCombo( dtoggleMark, [ 'control', 'l' ] );
            lz.Keys.callOnKeyCombo( dtoggleTimer, [ 'control', 'o' ] );
            lz.Keys.callOnKeyCombo( dpause, [ 'control', 'u' ] );
            lz.Keys.callOnKeyCombo( dstop, [ 'control', 's' ] );
            lz.Keys.callOnKeyCombo( dfinish, [ 'control', 'f' ] );
           
		    /*if ( gController.getClientMachine() == 'MAC' || isMac()) {
                dmacKeyHandler.register( lz.Keys, 'onkeydown' );
            }*/

			if (navigator.appVersion.indexOf("Mac")!=-1) {
                dmacOptionKeysHandler.register( lz.Keys, 'onkeydown' );
            }
             ]]>
        </method>

        <method name="disableKeys">
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'shift', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'shift', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'shift', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'shift', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'shift', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'shift', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'shift', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'shift', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'shift', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'shift', 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'capslock', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'capslock', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'capslock', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'capslock', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'capslock', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'capslock', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'capslock', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'capslock', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'capslock', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'capslock', 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'shift', 'capslock', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'shift', 'capslock', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'shift', 'capslock', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'shift', 'capslock', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'shift', 'capslock', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'shift', 'capslock', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'shift', 'capslock', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'shift', 'capslock', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'shift', 'capslock', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'shift', 'capslock', 'j' ] );
            lz.Keys.removeKeyComboCall( dgoBack, [ 'control', 'j' ] );
            lz.Keys.removeKeyComboCall( dgoOn, [ 'control', 'k' ] );
            lz.Keys.removeKeyComboCall( dtoggleMark, [ 'control', 'l' ] );
            lz.Keys.removeKeyComboCall( dtoggleTimer, [ 'control', 'o' ] );
            lz.Keys.removeKeyComboCall( dpause, [ 'control', 'u' ] );
            lz.Keys.removeKeyComboCall( dstop, [ 'control', 's' ] );
            lz.Keys.removeKeyComboCall( dfinish, [ 'control', 'f' ] );

		   /* if ( gController.getClientMachine() == 'MAC' || isMac()) {
            	dmacKeyHandler.unregisterFrom( lz.Keys.onkeydown );
            }*/
          if (navigator.appVersion.indexOf("Mac")!=-1) {
                dmacOptionKeysHandler.unregisterFrom( lz.Keys, 'onkeydown' );
            }
        </method>

		<method name="handleHotKeys">
			console.log("handleHotKeys*******");
			/*lz.Keys.removeKeyComboCall( dtoggleA, [ 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'shift', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'shift', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'shift', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'shift', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'shift', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'shift', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'shift', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'shift', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'shift', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'shift', 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'capslock', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'capslock', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'capslock', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'capslock', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'capslock', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'capslock', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'capslock', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'capslock', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'capslock', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'capslock', 'j' ] );
            lz.Keys.removeKeyComboCall( dtoggleA, [ 'shift', 'capslock', 'a' ] );
            lz.Keys.removeKeyComboCall( dtoggleB, [ 'shift', 'capslock', 'b' ] );
            lz.Keys.removeKeyComboCall( dtoggleC, [ 'shift', 'capslock', 'c' ] );
            lz.Keys.removeKeyComboCall( dtoggleD, [ 'shift', 'capslock', 'd' ] );
            lz.Keys.removeKeyComboCall( dtoggleE, [ 'shift', 'capslock', 'e' ] );
            lz.Keys.removeKeyComboCall( dtoggleF, [ 'shift', 'capslock', 'f' ] );
            lz.Keys.removeKeyComboCall( dtoggleG, [ 'shift', 'capslock', 'g' ] );
            lz.Keys.removeKeyComboCall( dtoggleH, [ 'shift', 'capslock', 'h' ] );
            lz.Keys.removeKeyComboCall( dtoggleI, [ 'shift', 'capslock', 'i' ] );
            lz.Keys.removeKeyComboCall( dtoggleJ, [ 'shift', 'capslock', 'j' ] ); */
            lz.Keys.removeKeyComboCall( dgoBack, [ 'control', 'j' ] );
            lz.Keys.removeKeyComboCall( dgoOn, [ 'control', 'k' ] );           
            lz.Keys.removeKeyComboCall( dtoggleTimer, [ 'control', 'o' ] );          
            lz.Keys.removeKeyComboCall( dfinish, [ 'control', 'f' ] );

		   	lz.Keys.callOnKeyCombo( dtoggleMark, [ 'control', 'l' ] );
            lz.Keys.callOnKeyCombo( dpause, [ 'control', 'u' ] );
            lz.Keys.callOnKeyCombo( dstop, [ 'control', 's' ] );
            if (navigator.appVersion.indexOf("Mac")!=-1) {
				//dmacOptionKeysHandler.unregisterFrom( lz.Keys, 'onkeydown' );
                dmacOptionKeysHandler.register( lz.Keys, 'onkeydown' );
            }


		</method>
		
		<!--  method is using for scratchpad,when the scratchpad is reopened -->
        <method name="handleoptionKeys">
			console.log("handleoptionkeys*******");
			  lz.Keys.removeKeyComboCall( dtoggleA, [ 'a' ] );
              lz.Keys.removeKeyComboCall( dtoggleB, [ 'b' ] );
              lz.Keys.removeKeyComboCall( dtoggleC, [ 'c' ] );
              lz.Keys.removeKeyComboCall( dtoggleD, [ 'd' ] );
              lz.Keys.removeKeyComboCall( dtoggleE, [ 'e' ] );
              lz.Keys.removeKeyComboCall( dtoggleF, [ 'f' ] );
              lz.Keys.removeKeyComboCall( dtoggleG, [ 'g' ] );
              lz.Keys.removeKeyComboCall( dtoggleH, [ 'h' ] );
              lz.Keys.removeKeyComboCall( dtoggleI, [ 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'capslock', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'capslock', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'capslock', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'capslock', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'capslock', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'capslock', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'capslock', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'capslock', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'capslock', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'capslock', 'j' ] );
            lz.Keys.callOnKeyCombo( dtoggleA, [ 'capslock', 'a' ] );
            lz.Keys.callOnKeyCombo( dtoggleB, [ 'capslock', 'b' ] );
            lz.Keys.callOnKeyCombo( dtoggleC, [ 'capslock', 'c' ] );
            lz.Keys.callOnKeyCombo( dtoggleD, [ 'capslock', 'd' ] );
            lz.Keys.callOnKeyCombo( dtoggleE, [ 'capslock', 'e' ] );
            lz.Keys.callOnKeyCombo( dtoggleF, [ 'capslock', 'f' ] );
            lz.Keys.callOnKeyCombo( dtoggleG, [ 'capslock', 'g' ] );
            lz.Keys.callOnKeyCombo( dtoggleH, [ 'capslock', 'h' ] );
            lz.Keys.callOnKeyCombo( dtoggleI, [ 'capslock', 'i' ] );
            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'capslock', 'j' ] );
            lz.Keys.callOnKeyCombo( dgoBack, [ 'control', 'j' ] );
            lz.Keys.callOnKeyCombo( dgoOn, [ 'control', 'k' ] );
            lz.Keys.callOnKeyCombo( dtoggleMark, [ 'control', 'l' ] );
            lz.Keys.callOnKeyCombo( dtoggleTimer, [ 'control', 'o' ] );
            lz.Keys.callOnKeyCombo( dpause, [ 'control', 'u' ] );
            lz.Keys.callOnKeyCombo( dstop, [ 'control', 's' ] );
            lz.Keys.callOnKeyCombo( dfinish, [ 'control', 'f' ] );

			if (navigator.appVersion.indexOf("Mac")!=-1) {
                dmacOptionKeysHandler.register( lz.Keys, 'onkeydown' );
            }

           
		</method>
		
		<method name="handleHotKeysNav"><![CDATA[
			 if (navigator.appVersion.indexOf("Mac")!=-1) {
				dmacOptionKeysHandler.register( lz.Keys, 'onkeydown' );
            }
			if(!gController.canNotAnswer && !gController.scratchpadOpen){
				lz.Keys.callOnKeyCombo( dtoggleA, [ 'a' ] );
	            lz.Keys.callOnKeyCombo( dtoggleB, [ 'b' ] );
	            lz.Keys.callOnKeyCombo( dtoggleC, [ 'c' ] );
	            lz.Keys.callOnKeyCombo( dtoggleD, [ 'd' ] );
	            lz.Keys.callOnKeyCombo( dtoggleE, [ 'e' ] );
	            lz.Keys.callOnKeyCombo( dtoggleF, [ 'f' ] );
	            lz.Keys.callOnKeyCombo( dtoggleG, [ 'g' ] );
	            lz.Keys.callOnKeyCombo( dtoggleH, [ 'h' ] );
	            lz.Keys.callOnKeyCombo( dtoggleI, [ 'i' ] );
	            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'j' ] );
	            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'a' ] );
	            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'b' ] );
	            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'c' ] );
	            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'd' ] );
	            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'e' ] );
	            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'f' ] );
	            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'g' ] );
	            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'h' ] );
	            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'i' ] );
	            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'j' ] );
	            lz.Keys.callOnKeyCombo( dtoggleA, [ 'shift', 'capslock', 'a' ] );
	            lz.Keys.callOnKeyCombo( dtoggleB, [ 'shift', 'capslock', 'b' ] );
	            lz.Keys.callOnKeyCombo( dtoggleC, [ 'shift', 'capslock', 'c' ] );
	            lz.Keys.callOnKeyCombo( dtoggleD, [ 'shift', 'capslock', 'd' ] );
	            lz.Keys.callOnKeyCombo( dtoggleE, [ 'shift', 'capslock', 'e' ] );
	            lz.Keys.callOnKeyCombo( dtoggleF, [ 'shift', 'capslock', 'f' ] );
	            lz.Keys.callOnKeyCombo( dtoggleG, [ 'shift', 'capslock', 'g' ] );
	            lz.Keys.callOnKeyCombo( dtoggleH, [ 'shift', 'capslock', 'h' ] );
	            lz.Keys.callOnKeyCombo( dtoggleI, [ 'shift', 'capslock', 'i' ] );
	            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'shift', 'capslock', 'j' ] );
	            lz.Keys.callOnKeyCombo( dtoggleA, [ 'capslock', 'a' ] );
	            lz.Keys.callOnKeyCombo( dtoggleB, [ 'capslock', 'b' ] );
	            lz.Keys.callOnKeyCombo( dtoggleC, [ 'capslock', 'c' ] );
	            lz.Keys.callOnKeyCombo( dtoggleD, [ 'capslock', 'd' ] );
	            lz.Keys.callOnKeyCombo( dtoggleE, [ 'capslock', 'e' ] );
	            lz.Keys.callOnKeyCombo( dtoggleF, [ 'capslock', 'f' ] );
	            lz.Keys.callOnKeyCombo( dtoggleG, [ 'capslock', 'g' ] );
	            lz.Keys.callOnKeyCombo( dtoggleH, [ 'capslock', 'h' ] );
	            lz.Keys.callOnKeyCombo( dtoggleI, [ 'capslock', 'i' ] );
	            lz.Keys.callOnKeyCombo( dtoggleJ, [ 'capslock', 'j' ] );
			}
            lz.Keys.removeKeyComboCall( dgoBack, [ 'control', 'j' ] );
            lz.Keys.removeKeyComboCall( dgoOn, [ 'control', 'k' ] );           
            lz.Keys.removeKeyComboCall( dtoggleTimer, [ 'control', 'o' ] );          
            lz.Keys.removeKeyComboCall( dfinish, [ 'control', 'f' ] );

		   	lz.Keys.callOnKeyCombo( dtoggleMark, [ 'control', 'l' ] );
            lz.Keys.callOnKeyCombo( dpause, [ 'control', 'u' ] );
            lz.Keys.callOnKeyCombo( dstop, [ 'control', 's' ] );

         
		 ]]></method>

        <method name="isComboHotKeyDown"><![CDATA[
            console.log("inside ishotkeydown @315");
            
            var isdown = false;
            if ((lz.Keys.isKeyDown("shift") || 
                 lz.Keys.isKeyDown("capslock")) && 
                    (lz.Keys.isKeyDown("a") ||
                     lz.Keys.isKeyDown("b") ||
                     lz.Keys.isKeyDown("c") ||
                     lz.Keys.isKeyDown("d") ||
                     lz.Keys.isKeyDown("e") ||
                     lz.Keys.isKeyDown("f") ||
                     lz.Keys.isKeyDown("g") ||
                     lz.Keys.isKeyDown("h") ||
                     lz.Keys.isKeyDown("i") ||
                     lz.Keys.isKeyDown("j"))) {
                isdown = true;
            }

            if (lz.Keys.isKeyDown("control") &&
                    (lz.Keys.isKeyDown("j") ||
                     lz.Keys.isKeyDown("k") ||
                     lz.Keys.isKeyDown("l") ||
                     lz.Keys.isKeyDown("o") ||
                     lz.Keys.isKeyDown("u") ||
                     lz.Keys.isKeyDown("s") ||
                     lz.Keys.isKeyDown("f"))) {
                isdown = true;
            }
                
            return isdown;
        ]]></method>

		<method name="handleHtmlKeyPress" args="data"><![CDATA[
		        console.log("inside handleHtmlKeyPress @ 346");
		        
		        if(gPleaseWaitPopup.visible || gScreens.visible || gController.isStopScreen || gController.isPauseTest || gController.scratchpadOpen || gController.isRevisitPopupOpen){
		        	// do nothing
		        	// this condition is for the defect 74092,74190
		        }else{
		            var keys = data.split("|");
		        	var key = keys[0];
		        	var shift = keys[1];
		        	var capslock = keys[2];
		        	var control = keys[3];
					if(gController.unlockNavigation){
			        	if(key == 'A' || key == 'Shift+A' || key == 'Caps_lock+A' || key == 'Shift+Caps_lock+A')
			       			toggleA();
			       		else if(key == 'B' || key == 'Shift+B' || key == 'Caps_lock+B' || key == 'Shift+Caps_lock+B')
			       			toggleB();
			       		else if(key == 'C' || key == 'Shift+C' || key == 'Caps_lock+C' || key == 'Shift+Caps_lock+C')
			       			toggleC();
			       		else if(key == 'D' || key == 'Shift+D' || key == 'Caps_lock+D' || key == 'Shift+Caps_lock+D')
			       			toggleD();
			       		else if(key == 'E' || key == 'Shift+E' || key == 'Caps_lock+E' || key == 'Shift+Caps_lock+E')
			       			toggleE();
			       		else if(key == 'F' || key == 'Shift+F' || key == 'Caps_lock+F' || key == 'Shift+Caps_lock+F')
			       			toggleF();
			       		else if(key == 'G' || key == 'Shift+G' || key == 'Caps_lock+G' || key == 'Shift+Caps_lock+G')
			       			toggleG();
			       		else if(key == 'H' || key == 'Shift+H' || key == 'Caps_lock+H' || key == 'Shift+Caps_lock+H')
			       			toggleH();
			       		else if(key == 'I' || key == 'Shift+I' || key == 'Caps_lock+I' || key == 'Shift+Caps_lock+I')
			       			toggleI();
			       		else if(key == 'j' || key == 'Shift+J' || key == 'Caps_lock+J' || key == 'Shift+Caps_lock+J')
			      			toggleJ();
			      		else if(key == 'Ctrl+J')
			       			goBack();
			       		else if(key == 'Ctrl+K')
			       			goOn();
			       		else if(key == 'Ctrl+L')
			       			toggleMark();
			       		else if(key == 'Ctrl+O')
			       			toggleTimer();
			       		else if(key == 'Ctrl+U')
			       			pause();
			       		else if(key == 'Ctrl+S')
                         
			       			stop();
                         
			       		else if(key == 'Ctrl+F')
			       			finish();
				} else if(!gController.canNotAnswer){
						if(key == 'A' || key == 'Shift+A' || key == 'Caps_lock+A' || key == 'Shift+Caps_lock+A')
			       			toggleA();
			       		else if(key == 'B' || key == 'Shift+B' || key == 'Caps_lock+B' || key == 'Shift+Caps_lock+B')
			       			toggleB();
			       		else if(key == 'C' || key == 'Shift+C' || key == 'Caps_lock+C' || key == 'Shift+Caps_lock+C')
			       			toggleC();
			       		else if(key == 'D' || key == 'Shift+D' || key == 'Caps_lock+D' || key == 'Shift+Caps_lock+D')
			       			toggleD();
			       		else if(key == 'E' || key == 'Shift+E' || key == 'Caps_lock+E' || key == 'Shift+Caps_lock+E')
			       			toggleE();
			       		else if(key == 'F' || key == 'Shift+F' || key == 'Caps_lock+F' || key == 'Shift+Caps_lock+F')
			       			toggleF();
			       		else if(key == 'G' || key == 'Shift+G' || key == 'Caps_lock+G' || key == 'Shift+Caps_lock+G')
			       			toggleG();
			       		else if(key == 'H' || key == 'Shift+H' || key == 'Caps_lock+H' || key == 'Shift+Caps_lock+H')
			       			toggleH();
			       		else if(key == 'I' || key == 'Shift+I' || key == 'Caps_lock+I' || key == 'Shift+Caps_lock+I')
			       			toggleI();
			       		else if(key == 'j' || key == 'Shift+J' || key == 'Caps_lock+J' || key == 'Shift+Caps_lock+J')
			      			toggleJ();
						else if(key == 'Ctrl+L')
							toggleMark();
						else if(key == 'Ctrl+U')
							pause();
						else if(key == 'Ctrl+S')
                         
							 stop();
                          
					} else {
						if(key == 'Ctrl+L')
							toggleMark();
						else if(key == 'Ctrl+U')
							pause();
						else if(key == 'Ctrl+S')
                         
							stop();
                         
						}
				}
        ]]></method>


        <attribute name="dmacKeyHandler"
                   value="$once{ new lz.Delegate( this, 'macKeyHandler' ) }"/>
		<attribute name="disableCR" type="boolean" value="false"/>
		<attribute name="dmacHotKeysHandler"
                   value="$once{ new lz.Delegate( this, 'macHotKeysHandler' ) }"/>
		<attribute name="dmacOptionKeysHandler"
                   value="$once{ new lz.Delegate( this, 'macOptionKeysHandler' ) }"/>
		<method name="exitPopups">
            gController.exitPopups();
        </method>
		<method name="macKeyHandler" args="k"><![CDATA[
           switch ( k ) {
	        	case  6:
                    this.exitPopups(); 
        			gController.finishTestShortcut();      // CTRL F ?
                    break;
				case 10: 
					if(!gController.fwdOnly){
	                    this.exitPopups();
	                    gController.stepNavigateBack();  
					}
                    break;
				case 11: 
                    this.exitPopups();
                    gController.stepNavigateForward();
                    gTooltip.hideTooltip (); /*for 74513 & 74444*/ 
                    break;
				case 12: 
                    this.exitPopups();
                    gController.toggleMark(); 
                    break;
				case 15:
                    this.exitPopups(); 
                    gController.toggleTimer();
                    break;
				case 19: 
					console.log("inside hotkeys for mac @ 464");
                    this.exitPopups();
                    gController.finishTest();
                    gTooltip.hideTooltip (); /*74444 & 74513 */
                   
                    break;
				case 21: 
                    this.exitPopups();
                    gController.pauseTest(); 
                    break;
                case 18: 
					if(((lz.Keys.isKeyDown("Alt")) || (lz.Keys.isKeyDown("alt")) || (lz.Keys.isKeyDown("option")))){
						this.setAttribute('disableCR',true);
						addReadOnlyCR();
						break;
	 				}else{
						this.setAttribute('disableCR',false);
						removeReadOnlyCR();
					}
					break;
                case 17: 
					if(((lz.Keys.isKeyDown("Alt")) || (lz.Keys.isKeyDown("alt")) || (lz.Keys.isKeyDown("option")))){
							this.setAttribute('disableCR',true);
							break;
	 				}else{
							this.setAttribute('disableCR',false);
					}
					break;
				default:
					if(disableCR && ((lz.Keys.isKeyDown("Alt")) || (lz.Keys.isKeyDown("alt")) || (lz.Keys.isKeyDown("option")))){
						addReadOnlyCR();
							break;
					}else{
						removeReadOnlyCR();
					}				
					break;
	 		}
	 	]]></method>

		<method name="macHotKeysHandler" args="k"><![CDATA[
           switch ( k ) {
				case 12: 
                    this.exitPopups();
                    gController.toggleMark(); 
                    break;
				case 19: 
                    this.exitPopups();
                    gController.finishTest(); 
                     gTooltip.hideTooltip (); /*74444 & 74513 */
                    break;
				case 21: 
                    this.exitPopups();
                    gController.pauseTest(); 
                    break;
				default:
					break;
	 		}
	 	]]></method>

				<method name="macOptionKeysHandler" args="k"><![CDATA[
		console.log("macOptionKeysHandler the key pressed is :: ",k);
		if(gController.isWaitPopupOpen || gScreens.visible){
			//console.log("macOptionKeysHandler inside pleasewait block");
			//do nothing if the please wait is shown.
		}else if(!gController.canNotAnswer && !gController.scratchpadOpen && !gController.unlockNavigation){
		//console.log("macOptionKeysHandler inside normal block");
           switch ( k ) {
				case 65: 
                    this.exitPopups();
                    //toggleA();
                    //console.log("toggle a called");
                    break;
				case 66: 
                    this.exitPopups();
                    //toggleB();
                    //console.log("toggle b called");
                    break;
				case 67: 
                    this.exitPopups();
                    //toggleC();
                    //console.log("toggle c called");
                    break;
				case 68: 
                    this.exitPopups();
                    //toggleD();
                    //console.log("toggle d called");
                    break;
				case 69: 
                    this.exitPopups();
                    //toggleE();
                    break;
				case 70: 
                    this.exitPopups();
                    //toggleF();
                    break;
				case 71: 
                    this.exitPopups();
                    //toggleG();
                    break;
				case 72: 
                    this.exitPopups();
                    //toggleH();
                    break;
				case 73: 
                    this.exitPopups();
                    //toggleI();
                    break;
				case 74: 
                    this.exitPopups();
                    //toggleJ();
                    break;
				case 12: 
                    this.exitPopups();
                    gController.toggleMark(); 
                    break;
				case 19: 
                    this.exitPopups();
                    gController.finishTest(); 
                     gTooltip.hideTooltip (); /*74444 & 74513 */
                    break;
				case 21: 
                    this.exitPopups();
                    gController.pauseTest(); 
                    break;
				default:
					break;
	 		}
		} else if(!gController.canNotAnswer && !gController.scratchpadOpen && gController.unlockNavigation){
			  switch ( k ) {
				case 65: 
                    this.exitPopups();
                    //toggleA();
                    //console.log("toggle a called");
                    break;
				case 66: 
                    this.exitPopups();
                    //toggleB();
                    //console.log("toggle b called");
                    break;
				case 67: 
                    this.exitPopups();
                    //toggleC();
                    //console.log("toggle c called");
                    break;
				case 68: 
                    this.exitPopups();
                    //toggleD();
                    //console.log("toggle d called");
                    break;
				case 69: 
                    this.exitPopups();
                    //toggleE();
                    break;
				case 70: 
                    this.exitPopups();
                    //toggleF();
                    break;
				case 71: 
                    this.exitPopups();
                    //toggleG();
                    break;
				case 72: 
                    this.exitPopups();
                    //toggleH();
                    break;
				case 73: 
                    this.exitPopups();
                    //toggleI();
                    break;
				case 74: 
                    this.exitPopups();
                    //toggleJ();
                    break;
				case 12: 
                    this.exitPopups();
                    gController.toggleMark(); 
                    break;
				case 19: 
                    this.exitPopups();
                    gController.finishTest(); 
                     gTooltip.hideTooltip (); /*74444 & 74513 */
                    break;
				case 21: 
                    this.exitPopups();
                    gController.pauseTest(); 
                    break;
                case  6:
                    this.exitPopups(); 
        			gController.finishTestShortcut();      
                    break;
				case 10: 
					if(!gController.fwdOnly){
	                    this.exitPopups();
	                    gController.stepNavigateBack();  
					}
                    break;
				case 11: 
                    this.exitPopups();
                    gController.stepNavigateForward(); 
                     gTooltip.hideTooltip (); /*74444 & 74513 */
                    break;
				default:
					break;
	 		}	 
		
		} else {
		console.log("macOptionKeysHandler inside else block");
			 switch ( k ) {
				case 12: 
                    this.exitPopups();
                    gController.toggleMark(); 
                    break;
				case 19: 
                    this.exitPopups();
                    gController.finishTest(); 
                     gTooltip.hideTooltip (); /*74444 & 74513 */
                    break;
				case 21: 
                    this.exitPopups();
                    gController.pauseTest(); 
                    break;
				default:
					break;
				}
		}
	 	]]></method>

        <attribute name="dtoggleA"
                   value="$once{ new lz.Delegate( this, 'toggleA' ) }" type="expression"/>
        <attribute name="dtoggleB"
                   value="$once{ new lz.Delegate( this, 'toggleB' ) }" type="expression"/>
        <attribute name="dtoggleC"
                   value="$once{ new lz.Delegate( this, 'toggleC' ) }" type="expression"/>
        <attribute name="dtoggleD"
                   value="$once{ new lz.Delegate( this, 'toggleD' ) }" type="expression"/>
        <attribute name="dtoggleE"
                   value="$once{ new lz.Delegate( this, 'toggleE' ) }" type="expression"/>
        <attribute name="dtoggleF"
                   value="$once{ new lz.Delegate( this, 'toggleF' ) }" type="expression"/>
        <attribute name="dtoggleG"
                   value="$once{ new lz.Delegate( this, 'toggleG' ) }" type="expression"/>
        <attribute name="dtoggleH"
                   value="$once{ new lz.Delegate( this, 'toggleH' ) }" type="expression"/>
        <attribute name="dtoggleI"
                   value="$once{ new lz.Delegate( this, 'toggleI' ) }" type="expression"/>
        <attribute name="dtoggleJ"
                   value="$once{ new lz.Delegate( this, 'toggleJ' ) }" type="expression"/>
        <attribute name="dgoBack"
                   value="$once{ new lz.Delegate( this, 'goBack' ) }" type="expression"/>
        <attribute name="dgoOn"
                   value="$once{ new lz.Delegate( this, 'goOn' ) }" type="expression"/>
        <attribute name="dtoggleMark"
                   value="$once{ new lz.Delegate( this, 'toggleMark' ) }" type="expression"/>
        <attribute name="dtoggleTimer"
                   value="$once{ new lz.Delegate( this, 'toggleTimer' ) }" type="expression"/>
        <attribute name="dpause"
                   value="$once{ new lz.Delegate( this, 'pause' ) }" type="expression"/>
        <attribute name="dstop"
                   value="$once{ new lz.Delegate( this, 'stop' ) }" type="expression"/>
        <attribute name="dfinish"
                   value="$once{ new lz.Delegate( this, 'finish' ) }" type="expression"/>
  
        <method name="toggleA" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups();
	        	gController.toggleItemSelState( 'A' ); 
	        }
        </method>
        <method name="toggleB" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'B' ); 
	        }
        </method>
        <method name="toggleC" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'C' ); 
	        }
         </method>
        <method name="toggleD" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'D' ); 
	        }
       </method>
        <method name="toggleE" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'E' ); 
	        }
        </method>
        <method name="toggleF" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups();
	        	gController.toggleItemSelState( 'F' ); 
	        }
        </method>
        <method name="toggleG" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'G' ); 
	        }
        </method>
        <method name="toggleH" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'H' ); 
	        }
        </method>
		<method name="toggleI" args="ignore=null">    
			if(!gController.isCrItem()){
		    	this.exitPopups(); 
				gController.toggleItemSelState( 'I' ); 
			}
		</method>
        <method name="toggleJ" args="ignore=null">    
        	if(!gController.isCrItem()){
	            this.exitPopups(); 
	        	gController.toggleItemSelState( 'J' ); 
	        }
        </method>        
        <method name="goBack" args="ignore=null">
		<![CDATA[
		    if(canvas.loadItem){
            	//canvas.freezUI();
				if(!gController.fwdOnly){
	        		if(!gController.onFirstItem()){
	        			lz.Focus.clearFocus();
	        		}
	        	
	            	this.exitPopups();
	        		gController.stepNavigateBack();
				} 
			}	     
       	]]>
		</method>
        <method name="goOn" args="ignore=null"> 
            if(canvas.loadItem){
                //canvas.freezUI();
	        	if(!gController.onLastItem()){
	        		lz.Focus.clearFocus();
	        	}
	            this.exitPopups();
	            gTooltip.hideTooltip (); /*for 74513 & 74444 */
	           // console.log("after 814");
	            gController.stepNavigateForward();  
	            
	        }	   
        </method>
        <method name="toggleMark" args="ignore=null"> 
            if(canvas.loadItem){
        		//canvas.freezUI();
	            this.exitPopups(); 
	         	gController.toggleMark();  
	         }	            
        </method>
        <method name="toggleTimer" args="ignore=null">
            if(canvas.loadItem){
        		//canvas.freezUI();
	            this.exitPopups(); 
	        	gController.toggleTimer();  
	        }	           
        </method>
        <method name="pause" args="ignore=null"> 
        	if(canvas.loadItem){
	        	if(gController.pausable == 'true'){
	        		lz.Focus.clearFocus();
	        	}
	            this.exitPopups(); 
	        	if(gItemInterface.visible == true || gTutorial.visible == true){
	        	    //canvas.freezUI();
	        		gController.pauseTest();
	        	}	
	        }		
        </method>
        <method name="stop" args="ignore=null"> 
           	 //console.log("inside handler stop @ 847");
            if(canvas.loadItem){    
            lz.Focus.clearFocus();
	        this.exitPopups();
			
			if(gItemInterface.visible == true || gTutorial.visible == true){
	        	//canvas.freezUI();
				
				//gScratchpad.title_area.controls.close_btn.hideText();/*defect 74466*/
	        	gController.setAttribute('isAudioPaused', true);
	        	gController.finishTest();   
	        	}	
	        }		           
        </method>
        <method name="finish" args="ignore=null">  
        	if(canvas.loadItem){   
	        	lz.Focus.clearFocus();
	            this.exitPopups(); 
	        	gController.finishTestShortcut(); 
	        }	     
        </method>
    </node>

</library>
