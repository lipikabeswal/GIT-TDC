<library>

    <class name="ManipulativeButton" with="swipegesture, touchevents">
        <datapath/>

        <attribute name="toolid" type="string"/>
        <attribute name="isenabled" value="false"/>
        <attribute name="isselected" value="false"/>
        <attribute name="tooltip" type="string"/>
		<attribute name="btnResource" type="string"/>
		<attribute name="isswiped" type="boolean" value="false"/>	

        <attribute name="tooltipdel" value="$once{new lz.Delegate (this, 'showTooltip')}"/>

        <handler name="oninit">
            this.datapath.setXPath ('@' + this.toolid);
        </handler>

        <handler name="ondata" args="data"><![CDATA[
            this.setAttribute ('isselected', data == 'sel');
            if(data == null || data == 'disable'){
	            this.setAttribute ('isenabled', false);
	            this.manipBtn.setAttribute ('visible', false);
				this.btn_shadow.setAttribute ('visible', false);
				this.gap.setAttribute ('visible', false);
            }
            else{
	            this.setAttribute ('isenabled', true);
	            this.manipBtn.setAttribute ('visible', true);
				this.btn_shadow.setAttribute ('visible', true);
				this.btn_shadow.sendToBack();
				this.gap.setAttribute ('visible', true);
            }

            this.manipBtn.setAttribute('frame', this.isselected ? 2 : 1);

            if (!this.isselected) {
                this.manipBtn.setAttribute('frame', this.isenabled  ? 1 : 3);
            }
            
        ]]></handler>

		<handler name="onclick">
			console.log("onclick of manip "+this.isswiped);
        	if(this.isswiped == true) {
				this.isswiped = false;
				return;
		    }
		</handler>

		<handler name="onswipe" args="s">
	       	console.log("onswipe of manip "+s);
			if (s.direction === 'up' || s.direction === 'down') {
			    return;
			}
			classroot.isswiped = true;
			gManipulativeBar.animate('x', s.velocity, 500, true, {motion: 'easeout'});
		</handler>
        
        <view name="manipBtn" width="37" height="40" stretches="both" resource="${classroot.btnResource}">
	        <handler name="onmouseover"><![CDATA[
	            if (!classroot.isselected && classroot.isenabled) this.setAttribute('frame', 2); 
	            lz.Timer.addTimer (classroot.tooltipdel, 500);
	        ]]></handler>
	
	        <handler name="onmouseout"><![CDATA[
	            if (!classroot.isselected && classroot.isenabled) this.setAttribute('frame', 1); 
	            gTooltip.hideTooltip ();
	            lz.Timer.removeTimer (classroot.tooltipdel);
	        ]]></handler>
	
	        <handler name="onclick"><![CDATA[
	            if (classroot.isenabled) {
	                gController.setManipulativeSelState (classroot.toolid, 
	                                                         classroot.isselected ? 'up' : 'sel');
	                console.log("classroot.isselected "+classroot.isselected);
	                console.log("classroot.toolid "+classroot.toolid);                                         
	                /*if(!classroot.isselected && classroot.toolid=='highlighter'){
		            	scrollTextArea.setAttribute('clickable',false);
		            	scrollTextArea.setAttribute('with',"");
		            	basepanelScrollContainer.setAttribute('clickable',false);
		            	basepanelScrollContainer.setAttribute('with',"");
		            }else {
		            	scrollTextArea.setAttribute('clickable',true);
		            	scrollTextArea.setAttribute('with',"swipegesture, touchevents, scrollTextLimity");
		            	basepanelScrollContainer.setAttribute('clickable',true);
		            	basepanelScrollContainer.setAttribute('with',"swipegesture, touchevents, panelLimity");
		            }   */                                      
	            }
	            lz.Timer.removeTimer (classroot.tooltipdel);
	            ]]>
	        </handler>
	        
	        <method name="showTooltip">
	            gTooltip.showTooltip (classroot.tooltip);
	        </method>
        </view>
        
        <view name="btn_shadow" tintcolor="0x000000" resource="manipulative_shadow" x="5"
        	  opacity="0.3"
        	  width="37" height="43" stretches="both"/>

		<view name="gap" width="16" x="${parent.manipBtn.x+parent.manipBtn.width}" y="${parent.manipBtn.y}"/>
    </class>
</library>
