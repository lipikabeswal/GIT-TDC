<library>

    <include href="ManipulativeButton.lzx"/>
    <include href="base/baseslider.lzx"/>
    <include href="lz/slider.lzx"/>
   <include href="ScratchpadButton.lzx"/>
	<include href="radioButton/radio.lzx"/>
	<include href="volume_slider/vslider.lzx"/>

    <class name="ManipulativeBar" bgcolor="0x6691B4"
           datapath="dsstudentdata:/testing_client_model/current_item/item_model" >

		<attribute name="TYPE_SPACING" type="number" value="15" />
		<attribute name="theme" type="boolean" value="$path{'@theme'}" />
		<attribute name="hasResponseArea" type="boolean" value="true" />
		<attribute name="hasMagnifyingGlass"  value="$path{'manipulatives/global/@magnifying_glass'}" />
		<attribute name="speedSelected"/>
		<attribute name="magnifyingGlass_isswiped" type="boolean" value="false"/>
		<attribute name="maskingAnswer_isswiped" type="boolean" value="false"/>
		<attribute name="stopreader_isswiped" type="boolean" value="false"/>
		<attribute name="selectedSpeedVal" type="string" value="M"/>
		
		<simplelayout axis="x"></simplelayout>

		<handler name="ondata" args="data">
			if(theme) {
				this.setAttribute("hasResponseArea", gController.applyManipulative());
			}
			this.globals.magnifyingGlassContainer.magnifyingGlass.setAttribute('frame', 1);
			this.setAttribute('speedSelected',this.selectedSpeedVal);
		</handler>
		
		<view datapath="manipulatives/global" name="globals" valign="middle" visible="${!classroot.theme || (classroot.theme &amp;&amp; classroot.hasResponseArea)}">
			<handler name="ondata" args="data">
			//Debug.write("On data global",data);
			</handler>
			<simplelayout axis="x"/>
			<ManipulativeButton btnResource="toolbar_choice_eliminator_btn"
	                            toolid="option_eliminator"
	                            tooltip="Option Eliminator"/>
			<ManipulativeButton btnResource="toolbar_highlighter_btn"
	                            toolid="highlighter"
	                            tooltip="Highlighter"/>
			<ManipulativeButton btnResource="toolbar_eraser_btn"
	                            toolid="eraser"
	                            tooltip="Eraser"/>
	        <ScratchpadButton   btnResource="toolbar_scratchpad_btn"
	                            toolid="scratchpad"
	                            tooltip="Scratchpad"/>
			<ManipulativeButton btnResource="toolbar_masking_ruler_btn"
	                            toolid="masking_ruler"
	                            tooltip="Blocking Ruler"/>	
	                            
			<!-- Magnifier Glass Button -->
			<attribute name="magnifierOpen" type="boolean" value="false"/>
			<view name="magnifyingGlassContainer">
				<view name="magnifyingGlass" with="swipegesture, touchevents"
					visible="${gController.magnifierVisible}"
					resource="toolbar_magnifying_glass_btn" valign="middle" 
					stretches="both" height="40" width="37">
					<attribute name="tooltipdel"
						value="$once{new LzDelegate (this, 'showTooltip')}"
					/>
					<attribute name="isEnabled" value="false" />
					<attribute name="isSelected" value="false" />
					
					<handler name="onmouseover">
							this.setAttribute('frame',2);
							lz.Timer.addTimer (tooltipdel, 500);
						</handler>
	
					<handler name="onmouseout">
							gTooltip.hideTooltip (); 
							if(!this.isEnabled) {
								this.setAttribute('frame',1);
							}   
							lz.Timer.removeTimer (this.tooltipdel);
						</handler>
	
					<handler name="onclick">
						if(classroot.magnifyingGlass_isswiped == true) {
							classroot.magnifyingGlass_isswiped = false;
							return;
					    }
						lz.Timer.removeTimer (this.tooltipdel);
						if(gMagnifyingGlass.magnifierOpen==true || gMagnifyingGlass.magnifierOpen=='true' || gMagnifyingGlass.magnifierOpen=="true"){
							show();
						} else {
							hide();
						}
						
					</handler>
						
					<handler name="onswipe" args="s">
						if (s.direction === 'up' || s.direction === 'down') {
						    return;
						}
						classroot.magnifyingGlass_isswiped = true;
						gManipulativeBar.animate('x', s.velocity, 500, true, {motion: 'easeout'});
					</handler>
	
					<method name="showTooltip">
							gTooltip.showTooltip ('Magnifying Glass');
						</method>
	
					<method name="setup">
							gMagnifyingGlass.setUpGlass();
							this.isEnabled = true;
							gController.setAttribute("magnifierState", true);
							show();
						</method>
	
					<method name="show">
							this.setAttribute('frame',2);
							this.isEnabled = true;
							gMagnifyingGlass.showGlass();
							gController.setAttribute("magnifierState", true);
						</method>
	
					<method name="hide">
							this.setAttribute('frame',1);
							this.isEnabled = false;
							gMagnifyingGlass.hideGlass();
							gController.setAttribute("magnifierState", false);
						</method>
					<handler name="onvisible">
						console.log("magnifier_btn_shadow = "+this.visible);
						parent.magnifier_btn_shadow.sendToBack();
						//this.bringToFront();
					</handler>
				</view>
				<view name="magnifier_btn_shadow" tintcolor="0x000000" resource="manipulative_shadow" x="5"
	        	  opacity="0.5" visible="${gController.magnifierVisible}"
	        	  width="37" height="43" stretches="both">
				</view>
	                            	
		         <view name="gap1" x="${parent.magnifyingGlass.x+parent.magnifyingGlass.width}" width="16" valign="middle" visible="${gController.magnifierVisible}"/>    
			</view>        
	         
			<view name="maskingAnswerContainer">                   
		         <view name="maskingAnswer" with="swipegesture, touchevents"
					visible="${gController.showMaskingAnswerPopUp}"
					resource="toolbar_msaking_choice_btn" valign="middle" 
					stretches="both" height="40" width="37">
					<attribute name="tooltipdel"
						value="$once{new lz.Delegate (this, 'showTooltip')}"/>
					<attribute name="isEnabled" value="false" />
					<attribute name="isSelected" value="false" />
					
					<handler name="onvisible">
						this.setAttribute('visible',false);
						parent.maskingAnswer_btn_shadow.setAttribute('visible',false);
						parent.gap2.setAttribute('visible',false);
					</handler>
						
					<handler name="onmouseover">
							this.setAttribute('frame',2);
							if(!gMaskingAnswer.visible)
								lz.Timer.addTimer (tooltipdel, 500);
						</handler>
	
					<handler name="onmouseout">
							gTooltip.hideTooltip (); 
							if(!this.isEnabled) {
								this.setAttribute('frame',1);
							}   
							lz.Timer.removeTimer (this.tooltipdel);
						</handler>
	
					<handler name="onclick">
						if(classroot.maskingAnswer_isswiped == true) {
							classroot.maskingAnswer_isswiped = false;
							return;
					    }
						Debug.write("onclick masking answer x" , this.x, gManipulatives.y, gManipulativeBar.x);
							lz.Timer.removeTimer (this.tooltipdel);
							if(gMaskingAnswer.visible){
								hide();
							} else {
								show();
							}
						</handler>
					
					<handler name="onswipe" args="s">
						if (s.direction === 'up' || s.direction === 'down') {
						    return;
						}
						classroot.maskingAnswer_isswiped = true;
						gManipulativeBar.animate('x', s.velocity, 500, true, {motion: 'easeout'});
					</handler>
	
					<method name="showTooltip">
							gTooltip.showTooltip ('Masking Tool');
						</method>
	
					<method name="show">
							gMaskingAnswer.showPopUp();
							this.isEnabled = true;
							gController.setAttribute("maskingAnswerDDState", true);
							this.setAttribute('frame',2);
						</method>
	
					<method name="hide">
							gMaskingAnswer.hidePopUp();
							this.isEnabled = false;
							gController.setAttribute("maskingAnswerDDState", false);
							this.setAttribute('frame',1);
						</method>
					<handler name="onvisible">
						if(this.visible){
							parent.maskingAnswer_btn_shadow.sendToBack();
						}
					</handler>
				</view>   
				<view name="maskingAnswer_btn_shadow" tintcolor="0x000000" resource="manipulative_shadow" x="5"
	        	  opacity="0.5" visible="${parent.maskingAnswer.visible}"
	        	  width="37" height="43" stretches="both"/>
	   
				<view name="gap2" x="${parent.maskingAnswer.x+parent.maskingAnswer.width}" width="16" valign="middle" visible="${parent.maskingAnswer.visible}"/>       
			</view>      
	    </view>       
		<view datapath="manipulatives/general" name="generals" valign="middle"
		      visible="${!classroot.theme  || (classroot.theme &amp;&amp; classroot.hasResponseArea)}">
		    <simplelayout axis="x"/>
			<ManipulativeButton btnResource="toolbar_oneeighth_inch_ruler_btn"
	                            toolid="oneeighth_inch_ruler"
	                            tooltip="1/8&quot; ruler"/>
			<ManipulativeButton btnResource="toolbar_half_inch_ruler_btn"
	                            toolid="half_inch_ruler"
	                            tooltip="1/2&quot; ruler"/>
			<ManipulativeButton btnResource="toolbar_mm_ruler_btn"
	                            toolid="mm_ruler"
	                            tooltip="mm ruler"/>
			<ManipulativeButton btnResource="toolbar_cm_ruler_btn"
	                            toolid="cm_ruler"
	                            tooltip="cm ruler"/>
			<ManipulativeButton btnResource="toolbar_protractor_btn"
	                            toolid="protractor"
	                            tooltip="Protractor"/>
			<ManipulativeButton btnResource="toolbar_formula_card_btn"
	                            toolid="FCAT_formula_card"
	                            tooltip="Reference Card"/>
			<ManipulativeButton btnResource="toolbar_formula_card_btn"
	                            toolid="TN_formula_card"
	                            tooltip="Reference Card"/>
			<ManipulativeButton btnResource="toolbar_formula_card_btn"
	                            toolid="formula_card_resource"
	                            tooltip="Reference Card"/>
			<ManipulativeButton btnResource="toolbar_calculator_btn"
	                            toolid="standard_calculator"
	                            tooltip="Calculator"/>
			<ManipulativeButton btnResource="toolbar_straight_edge_btn"
	                            toolid="straight_edge"
	                            tooltip="Straight Edge"/>
		</view>
		
		<view name="screenreader" valign="middle" height="100%" bgcolor="0x83A6C3">
		<!-- <simplelayout axis="x" spacing="16">  -->
			<!-- The tool to control the TTS volume -->
			<view name="volumeController" height="60"
				  visible="${parent.stopreader.visible}" y="${this.y-7}">
						  
				<simplelayout axis="y" spacing="2"/>
					<text name="volumeText" fontsize="9" height="10" fontstyle="bold">Volume</text>
					<vslider id="volumeControl"
						height="40" 
						showvalue="false"
						showcurrentvalue="true"
						minvalue="0"
						maxvalue="100"
						showrange="false" 
						showfill="true"
						align="center">
						
						<handler name="onvisible">
							this.setValue(50);
						</handler>
			
						<handler name="onvalue" args="v">
							var s = "sendRequest('setVolume','"+v+"','"+gReadableText.speechAction+"')";
							lz.Browser.loadJS(s);
						</handler>
					</vslider>
			</view>
			
			<view name="gap3" x="${parent.volumeController.x+parent.volumeController.width}" width="16" valign="middle" visible="${parent.volumeController.visible}"/>
			
			<basebutton name="stopreader" stretches="both" height="40" width="37"
						x="${parent.gap3.x+parent.gap3.width}"
		                resource="toolbar_stopreader_btn" with="swipegesture, touchevents"
		                visible="${canvas.readable}" valign="middle">
		
				<attribute name="tooltipdel" value="$once{new lz.Delegate (this, 'showTooltip')}"/>
		
				<handler name="onmouseover">
					lz.Timer.addTimer (tooltipdel, 500);
				</handler>
		                
				<handler name="onmouseout">
					gTooltip.hideTooltip ();    
					lz.Timer.removeTimer (this.tooltipdel);
				</handler>
		
				<handler name="onclick">
					if(classroot.stopreader_isswiped == true) {
						classroot.stopreader_isswiped = false;
						return;
				    }
					lz.Timer.removeTimer (this.tooltipdel);
					gReadableText.stopReading(false);
				</handler>
				
				<handler name="onswipe" args="s">
					if (s.direction === 'up' || s.direction === 'down') {
					    return;
					}
					classroot.stopreader_isswiped = true;
					gManipulativeBar.animate('x', s.velocity, 500, true, {motion: 'easeout'});
				</handler>
		
				<method name="showTooltip">
					gTooltip.showTooltip ('Stop Reading');
				</method>
		
			</basebutton>
			<view name="stopreader_btn_shadow" tintcolor="0x000000" resource="manipulative_shadow" x="${parent.stopreader.x+5}"
        	  opacity="0.5" visible="${parent.stopreader.visible}"
        	  width="37" height="43" stretches="both">
				<handler name="onvisible">
					if(this.visible){
						this.sendToBack();
					}
				</handler>
			</view>
			
			<view name="gap4" x="${parent.stopreader.x+parent.stopreader.width}" width="16" valign="middle" visible="${parent.stopreader.visible}"/>

			<!-- The tool to control the TTS speed -->
			<view name="speedController" height="60" x="${parent.gap4.x+parent.gap4.width}" y="${parent.volumeController.y}"
						  valign="middle" visible="${gController.hasTTSspeed &amp;&amp; parent.stopreader.visible}">
				<simplelayout axis="y" spacing="2"/>
					<text name="speedControllerText" fontsize="9" height="10" fontstyle="bold">Speed</text>
					<vslider id="speedControl"
						height="40" 
						showvalue="false"
						showcurrentvalue="true"
						minvalue="0"
						maxvalue="100"
						sticktostepvalue="true"
						showrange="false" 
						showfill="true"
						align="center">
						
						<handler name="onvisible">
							this.setValue(50);
						</handler>
			
						<handler name="onvalue" args="v"><![CDATA[
							if(v==0 ) {
								classroot.setAttribute('selectedSpeedVal','S');
							}
							else if(v==50 ){
								classroot.setAttribute('selectedSpeedVal','M');
							}
							else if(v==100 ){
								classroot.setAttribute('selectedSpeedVal','F');
							}
							if(classroot.speedSelected != classroot.selectedSpeedVal){
								if(gReadableText.isplaying && gReadableText.isReadable && 
									gReadableText.clickable && gReadableText.currentText.length > 0) {
			
								gReadableText.read(gReadableText.currentText,false);
								}
							}]]>
						</handler>
					
					</vslider>
			</view>
			
		</view>
		
    </class>

</library>