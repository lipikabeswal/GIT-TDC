<library>
	<include href="CachableComponent.lzx" />


	<!-- ************************************
		Cachable Html Widget
		
		A Cachable Html Widget to render html items.  
		*************************************-->

	<class name="CachableHtmlWidget" extends="CachableComponent"
		comptype="${gCompTypes.WIDGET_HTML}" aaactive="true"
		aasilent="false">
		
		<attribute name="contentLoadedDel" value="$once{new lz.Delegate(this,'func2')}" />
		<attribute name="setStateDel" value="$once{new lz.Delegate(this,'setAnswer')}" />
		<attribute name="answered" type="boolean" value="false" />
		<attribute name="answer" />
		<attribute name="widget_id" />
		<attribute name="answerObjSet" value="$once{new Object()}"/>
		<attribute name="unlocked" type="boolean" value="false"/>
		<attribute name="srcUrl" />
		<attribute name="checkiframeStateDel" value="$once{new lz.Delegate(this,'checkiframeState')}" />
		<method name="init">
			super.init();
		</method>

		<handler name="oninit">
		Debug.write("Cachaable html widget handlerinit");
		</handler>

		<handler name="ondata" args="data"><![CDATA[
console.log("Cachaable html widget ondata");
      	var srcUrl = data.getAttr('src');
      	this.setAttribute('srcUrl', srcUrl);
		console.log("scurl init****",data.getAttr('src'));
		this.setAttribute('unlocked', false);
		this.setAttribute('answerObjSet', {});
		if (data.hasAttr("id")) {
	      	var id = data.getAttr('id');
			console.log("id****",id);
	      	this.setAttribute('widget_id',id);
	        this.setAttribute('widget_id', data.getAttr("id"));
	        var answer = gController.getStateForInputWidgetId(this.widget_id);
		
			if(answer){
				this.setAttribute('answered',false); //We are setting answered as false so that we can setTheState properly. This has to be revisited 
				var selectedValuesArr = [];
				if(answer['checkedVals']){
					var selectedValues = answer['checkedVals'];
					for (var i in selectedValues){
						if(selectedValues.hasOwnProperty(i) && !isNaN(+i)) {
	      					  selectedValuesArr[+i] = selectedValues[i];
	   					}
						
					}
					answer['checkedVals'] = selectedValuesArr;
				}

				this.setAttribute('answerObjSet', answer);

			}
			gController.addHtmlField({"widget_id" : id, "answered" : this.answered, "answer" : this.answer, "ref" : this}); 

		}
		if (data.hasAttr("width")) {
			this.main.ht.setAttribute('width', data.getAttr("width"));
		}else{
			this.main.ht.setAttribute('width', 780);
		}
		if (data.hasAttr("height")) {
			this.main.ht.setAttribute('height', data.getAttr("height"));
		}else{
			this.main.ht.setAttribute('height', 450);
		}
		
		if($dhtml){
			console.log("srcUrl  "+srcUrl);
			srcUrl = "http:items/"+ srcUrl +"/previewer.html";
			this.main.ht.setAttribute('src', srcUrl);
			this.main.ht.setAttribute('visible',true);
		}
		else{			
			srcUrl = "http:items/"+ srcUrl +"/previewer.html";
			this.main.ht.setAttribute('src', srcUrl);
			this.main.ht.setAttribute('visible',true);
		}
 		this.bringToFront();
		func2();
		gController.freezeUI();
		//doneLoading();

		]]>
		</handler>
		
		<method name="func1">
			if(this.main.ht.ready){
            	var del = new LzDelegate(this, 'handleFunc1');
            	//this.main.ht.callJavascript('accomPkg.isItemAnswered', del);
            	this.main.ht.callJavascript('isAnswered', del);
				
            } 
        </method>
        
        <method name="handleFunc1" args="retVal"><![CDATA[
           // Debug.write('DHTMLComponent handleFunc1: ', retVal);

			if(retVal != null && retVal != undefined){
				if( retVal == true || retVal ==  'true'){
					this.setAttribute('answered', true);
					gController.updateBlueBallForHtmlItem(retVal);
				}else{
					this.setAttribute('answered', false);
					gController.updateBlueBallForHtmlItem(retVal);
					}
				if(!unlocked){
					gController.unlockUI();
					this.setAttribute('unlocked', true);
				}
			}
            
       ]]> </method>

		<method name="setAnswer" ><![CDATA[
		   //Debug.write("setAnswer ansObj");
		   var ansObj = gController.teItemState[this.srcUrl];
		   //Debug.write("answerObject setanswer ",ansObj)
		   if(this.main.ht.ready && gController.htmlFields.length > 0){
		    if(!this.answered){
		     var htmlContent = this.answerObjSet.htmlContent;
		     var jsonContent = this.answerObjSet.jsonContent;
		     var checkedVals = []
		     if(this.answerObjSet.checkedVals){
		      checkedVals = this.answerObjSet.checkedVals;
		     }
		     		      
		     if(ansObj){
		   		htmlContent = ansObj.htmlContent;
		   		jsonContent = ansObj.jsonContent;
		   	}
		   this.main.ht.callJavascript('setState', null,htmlContent, jsonContent, checkedVals);
		   //  lz.Timer.resetTimer(setStateDel, 500);
		    }else{
		    // lz.Timer.removeTimer(setStateDel);
		    }
		   }
	   
	    ]]></method>

        
        <method name="func2">
					doneLoading();

        /*   if(this.main.ht.loading){
            	lz.Timer.resetTimer(contentLoadedDel, 1000);
            }else{
            	doneLoading();
            	lz.Timer.removeTimer(contentLoadedDel);
           	
            }*/
        </method>
        
        <method name="handleFunc2" args="retVal1">
    	
            if(retVal1 == true || retVal1 == 'true'){
            	doneLoading();
            	lz.Timer.removeTimer(contentLoadedDel);
            }
        </method>
        
        <method name="getState">
           if(this.main.ht.ready){
            var getStateDel = new LzDelegate(this, 'getStateHandler');
            //this.main.ht.callJavascript('accomPkg.getState', getStateDel);
             this.main.ht.callJavascript('getState', getStateDel);
           } 
        
        </method>
        
	    <method name="getStateHandler" args="retVal">
				this.setAttribute('answer', retVal);
				gController.updateHtmlFields(retVal,this.answered);
	     </method>
        

       
		<method name="doneLoading"><![CDATA[	
            super.doneLoading();
        ]]></method>        
        
		<method name="hide">
			this.main.ht.setAttribute('visible',false);
		</method>
		
		<method name="show">
			this.main.ht.setAttribute('visible',true);
		</method>

		<method name="doReturnToCache"><![CDATA[
			this.main.ht.setAttribute('visible',false);
			this.main.ht.setAttribute('src',"");
       ]]></method>

		<method name="checkiframeState">
				iframeState();
				if (!canvas.frameLoaded){
				 	lz.Timer.resetTimer(checkiframeStateDel, 500);
				 }else{
				 	lz.Timer.removeTimer(checkiframeStateDel);
					canvas.setAttribute('frameLoaded',false);
				 }
		</method>
       
       <view name="main" width="${parent.parent.width - 20}" height="${parent.parent.height - 10}">
			<handler name="oninit">
				var elm = this.getDisplayObject();
				elm.setAttribute('id','iframeId');
			</handler>
 	       <html name="ht" id="htmlwiget" x="5" y="5" scrollbars="false" mouseevents="true" focusable="true">
				<handler name="oninit">
					var elm = this.getDisplayObject();
					elm.setAttribute('id','iframeIdchild');
				</handler>
				<handler name="onload">
					console.log("onsrc of frame");
					classroot.checkiframeState();
					//iframeState();
				</handler>
			</html>
       </view>

	</class>
</library>