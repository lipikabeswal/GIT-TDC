<library>
	<include href="droparea.lzx" />
	<include href="point.lzx" />
	<class name="dropareapoly" extends="droparea">
		<attribute name="_vertices" value="$once{new Array()}" />		
		
		<method name="setup"><![CDATA[
            var vals = coords.split(','); 
            for(var i=0; i<vals.length; i=i+2){
            	_vertices.push(new lz.point(this, {'ptX': new Number(vals[i]), 'ptY': new Number(vals[i + 1])}));
            }
            this.setAttribute("isSetup", true);
			for (var i=0; i<_vertices.length; i++) {    
//Debug.write("got vertex for i: ", _vertices[i]['ptX'], _vertices[i]['ptY']);
			}
		]]></method>
		
		<method name="contains" args="_x, _y"><![CDATA[
			if(!isSetup){
				setup();
			}
			var cn = 0;    
			
			for (var i=0; i<_vertices.length - 1; i++) {    
				if (((_vertices[i]['ptY'] <= _y) && (_vertices[i+1]['ptY'] > _y))   
				 || ((_vertices[i]['ptY'] > _y) && (_vertices[i+1]['ptY'] <= _y))) { 
				    var vt = (_y - _vertices[i]['ptY']) / (_vertices[i+1]['ptY'] - _vertices[i]['ptY']);
				    if (_x < _vertices[i]['ptX'] + vt * (_vertices[i+1]['ptX'] - _vertices[i]['ptX'])) { 
				        ++cn;  
				 	}
				}
			}
			return (cn%2 == 1);
			
			/*
			
			// cn_PnPoly(): crossing number test for a point in a polygon
			//      Input:   P = a point,
			//               V[] = vertex points of a polygon V[n+1] with V[n]=V[0]
			//      Return:  0 = outside, 1 = inside
			// This code is patterned after [Franklin, 2000]
			int
			cn_PnPoly( Point P, Point* V, int n )
			    int    cn = 0;    // the crossing number counter
			
			    // loop through all edges of the polygon
			    for (int i=0; i<n; i++) {    // edge from V[i] to V[i+1]
			       if (((V[i].y <= P.y) && (V[i+1].y > P.y))    // an upward crossing
			        || ((V[i].y > P.y) && (V[i+1].y <= P.y))) { // a downward crossing
			            // compute the actual edge-ray intersect x-coordinate
			            float vt = (float)(P.y - V[i].y) / (V[i+1].y - V[i].y);
			            if (P.x < V[i].x + vt * (V[i+1].x - V[i].x)) // P.x < intersect
			                ++cn;   // a valid crossing of y=P.y right of P.x
			        }
			    }
			    return (cn&1);    // 0 if even (out), and 1 if odd (in)
			

			
			*/
		]]></method>
	</class>
</library>