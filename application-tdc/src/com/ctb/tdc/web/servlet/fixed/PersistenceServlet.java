package com.ctb.tdc.web.servlet.fixed;



import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpState;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.apache.log4j.Logger;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;


import com.ctb.tdc.web.dto.StateVO;
import com.ctb.tdc.web.utils.AuditFile;
import com.ctb.tdc.web.utils.Base64;

import com.ctb.tdc.web.utils.MemoryCache;
import com.ctb.tdc.web.utils.ServletUtils;

/**
 * @author Tai_Truong
 *
 * This supports response persistence and lifecycle events.
 * New events are only accepted and persisted locally if prior events were acknowledged by
 * upstream partner, otherwise an error occurs after a suitable wait/retry cycle.
 * When prior events have been acknowledged by the TMS, new events generated by the client
 * are acknowledged by the local servlet as soon as they are securely persisted locally, allowing
 * the user to continue. Delay (and ultimately, in severe cases, interruption) of test thus only
 * occur if upstream response time exceeds user 'think' time. To ensure that no responses are
 * lost, an error is returned immediately in that case.
 */
public class PersistenceServlet extends HttpServlet {

	public static final String OK = "<OK />";
	public static final String ERROR = "<ERROR />";

	private static final long serialVersionUID = 1L;
	static Logger logger = Logger.getLogger(PersistenceServlet.class);
	
	 public static String xmlForWebService = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
		"<tns:ScoringServiceRequest xmlns:tns=\"http://www.ctb.com/otlp\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ctb.com/otlp ../../OTLPModel/schemas/RequestXML.xsd \">" + 
		"<tns:Info>" + 
		"<IP>**</IP>" + 
		"<DateTime>!!</DateTime>" + 
		"<StudentId>@@</StudentId>" + 
		"<StudentGrade>##</StudentGrade>" + 
		"</tns:Info>" + 
		"<tns:Items>" + 
		"<tns:TestItem>" + 
		"<Id>$$</Id>" + 
		"<Response >%%</Response>" + 
		"<RawScoreAvailable>N</RawScoreAvailable>" + 
		"</tns:TestItem>" + 
		"</tns:Items>" + 
		"</tns:ScoringServiceRequest>";

	/**
	 * Constructor of the object.
	 */
	public PersistenceServlet() {
		super();
	}

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occure
	 */
	public void init() throws ServletException {
//		do nothing
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 *
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
//		String method = request.getParameter("method"); // this line use with test.html
		String method = null; // this line is for release
		if ((method != null) && (! method.equals(ServletUtils.NONE_METHOD))) {
			String xml = ServletUtils.buildPersistenceParameters(request, method);
			
			handleEvent(request, response, method, xml);
		}
		else {
			doGet(request, response);
		}
		
		System.out.println(request.getParameter("encodedStr"));
		System.out.println(request.getParameter("method"));
		
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 *
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		String method = ServletUtils.getMethod(request);

		String xml = ServletUtils.getXml(request);
		
		handleEvent(request, response, method, xml);
	}

	/**
	 * The handleEvent method of the servlet. <br>
	 *
	 * call the method based on each event, return result response xml to client
	 *
	 * @param HttpServletResponse response
	 * @param String method
	 * @param String xml
	 * @throws IOException
	 */
	private void handleEvent(HttpServletRequest request, HttpServletResponse response, String method, String xml) throws IOException {
		String result = this.OK;
		String inxml = request.getParameter("requestXML");

		if (method.equals("login")) {
			result = getLoginXML(request);
			processLoginResponse (result);			
			
		}
		/*else if (ServletUtils.STORE_SPEEX_TO_WAV_METHOD.equals(method))
			storeSpeexBase64Str(request);*/
		
		
		//else if (method.equals("save") || method.equals("feedback") || method.equals("uploadAuditFile") || method.equals("writeToAuditFile"))
		else if (method.equals("feedback"))
			result = "<student_feedback_data status=\"OK\" lsid=\"51189:tradesman2\">" +
			"<testing_session_data student_name=\"Pramu G\"/>" +
			"<title name=\"TABE Online Battery\" id=\"24297\">" +
			"<sco seq=\"5\" title=\"TABE Locator Applied Mathematics Sample Question\" id=\"24376\"/>" +
			"<sco seq=\"33\" title=\"TABE Language Sample Questions\" id=\"24446\"/>" +
			"<sco seq=\"62\" title=\"TABE Spelling\" id=\"24453\"/>" +
			"<sco seq=\"14\" title=\"TABE Reading\" id=\"24441\"/>" +
			"<sco seq=\"22\" title=\"TABE Mathematics Computation\" id=\"24443\"/>" +
			"<sco seq=\"57\" title=\"TABE Spelling Sample Questions\" id=\"24452\"/>" +
			"<sco seq=\"17\" title=\"TABE Mathematics Computation Sample Question\" id=\"24442\"/>" +
			"<sco seq=\"29\" title=\"TABE Applied Mathematics\" id=\"24445\"/>" +
			"<sco seq=\"38\" title=\"TABE Language\" id=\"24447\"/>" +
			"<sco seq=\"49\" title=\"TABE Language Mechanics Sample Questions\" id=\"24450\"/>" +
			"<sco seq=\"54\" title=\"TABE Language Mechanics\" id=\"24451\"/>" +
			"<sco seq=\"1\" title=\"TABE Locator Reading Sample Question\" id=\"24372\"/>" +
			"<sco seq=\"9\" title=\"TABE Reading Sample Questions\" id=\"24440\"/>" +
			"<sco seq=\"6\" title=\"TABE Locator Applied Mathematics\" id=\"24377\"/>" +
			"<sco seq=\"2\" title=\"TABE Locator Reading\" id=\"24373\"/>" +
			"<sco seq=\"4\" title=\"TABE Locator Mathematics Computation\" id=\"24375\"/>" +
			"<sco seq=\"26\" title=\"TABE Applied Mathematics Sample Question\" id=\"24444\"/>" +
			"<sco seq=\"3\" title=\"TABE Locator Mathematics Computation Sample Question\" id=\"24374\"/>" +
			"<sco seq=\"8\" title=\"TABE Locator Language\" id=\"24379\"/>" +
			"<sco seq=\"41\" title=\"TABE Vocabulary Sample Questions\" id=\"24448\"/>" +
			"<sco seq=\"7\" title=\"TABE Locator Language Sample Questions\" id=\"24378\"/>" +
			"<sco seq=\"46\" title=\"TABE Vocabulary\" id=\"24449\"/>" +
			"</title>" +
			"<lms>" +
			"<sco scid=\"24376\">" +
			"<lsv>" +
			"<cmi.core score.max=\"1\" score.raw=\"1\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24446\">" +
			"<lsv>" +
			"<cmi.core score.max=\"4\" score.raw=\"4\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24453\">" +
			"<lsv>" +
			"<cmi.core score.max=\"20\" score.raw=\"20\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24441\">" +
			"<lsv>" +
			"<cmi.core score.max=\"50\" score.raw=\"50\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24443\">" +
			"<lsv>" +
			"<cmi.core score.max=\"40\" score.raw=\"40\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24452\">" +
			"<lsv>" +
			"<cmi.core score.max=\"20\" score.raw=\"20\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24442\">" +
			"<lsv>" +
			"<cmi.core score.max=\"1\" score.raw=\"1\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24445\">" +
			"<lsv>" +
			"<cmi.core score.max=\"50\" score.raw=\"50\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24447\">" +
			"<lsv>" +
			"<cmi.core score.max=\"55\" score.raw=\"55\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24450\">" +
			"<lsv>" +
			"<cmi.core score.max=\"3\" score.raw=\"3\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24451\">" +
			"<lsv>" +
			"<cmi.core score.max=\"20\" score.raw=\"20\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24372\">" +
			"<lsv>" +
			"<cmi.core score.max=\"1\" score.raw=\"1\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24440\">" +
			"<lsv>" +
			"<cmi.core score.max=\"2\" score.raw=\"1\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24377\">" +
			"<lsv>" +
			"<cmi.core score.max=\"8\" score.raw=\"8\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24373\">" +
			"<lsv>" +
			"<cmi.core score.max=\"12\" score.raw=\"12\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24375\">" +
			"<lsv>" +
			"<cmi.core score.max=\"8\" score.raw=\"8\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24444\">" +
			"<lsv>" +
			"<cmi.core score.max=\"1\" score.raw=\"0\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24374\">" +
			"<lsv>" +
			"<cmi.core score.max=\"1\" score.raw=\"0\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24379\">" +
			"<lsv>" +
			"<cmi.core score.max=\"12\" score.raw=\"12\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24448\">" +
			"<lsv>" +
			"<cmi.core score.max=\"2\" score.raw=\"0\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24378\">" +
			"<lsv>" +
			"<cmi.core score.max=\"2\" score.raw=\"0\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"<sco scid=\"24449\">" +
			"<lsv>" +
			"<cmi.core score.max=\"20\" score.raw=\"20\"/>" +
			"<ext.core number_of_unscored_items=\"0\"/>" +
			"</lsv>" +
			"</sco>" +
			"</lms>" +
			"</student_feedback_data>" ;
		else if (method.equals("save")){
			save(response, xml);
		}else if (method.equals("uploadAuditFile") || method.equals("writeToAuditFile")){
			result = this.OK;
		}
			
		else
			result = this.ERROR;

		response.setContentType("text/xml");
		PrintWriter out = response.getWriter();
		out.println(result);
		out.flush();
		out.close();
	}
	
	
	private void  processLoginResponse(String loginResponse){
		
		MemoryCache memCache = MemoryCache.getInstance();
		HashMap contentDownloadMap = new HashMap();
		org.jdom.Document loginReponseDocument = null;
		System.out.println("processLoginResponse");
		SAXBuilder saxBuilder = new SAXBuilder();
		try {
			loginReponseDocument = saxBuilder.build(new ByteArrayInputStream(loginResponse.getBytes()));
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		org.jdom.Element element = (org.jdom.Element) loginReponseDocument.getRootElement().getChild("login_response");
		element = element.getChild("manifest");
		 
		 List subtestList = element.getChildren("sco");
		 String sco="";
			for (int i=0; i < subtestList.size(); i++){
				
				element = (org.jdom.Element) subtestList.get(i);
				contentDownloadMap.put(element.getAttributeValue("adsid"),  element.getAttributeValue("contentURI"));

			}
			
			memCache.setContentDownloadMap(contentDownloadMap);
		
		//memCache.setContentDownloadMap();
	//	return LoadTestUtils.getAttributeValue("contentURI", loginResponse);
		
	}
	public String getLoginXML(HttpServletRequest request)
	{
		String user = ServletUtils.getUser(request);
		if (user != null && user.equals("accommodated")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"33696:numerate73\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" auditory_calming=\"true\" music_file_id=\"1\" highlighter=\"true\" masking_ruler=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"true\" calculator=\"true\" extended_time=\"true\" masking_tool=\"true\">" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"directions\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stimulus\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stem\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0xFFFFFF\" bgcolor=\"0x000080\" stereotype=\"answerArea\"/>" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Regression Test\"><sco cmi.core.total_time=\"10:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"326\" asmt_hash=\"CC9E7044B9834A6F9942B0F02430318D\" title=\"Regression Test\" sco_unit_type=\"SUBTEST \" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"20\" id=\"24224\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<terminator id=\"SEE_YOU_LATER\"/>" +
			"</manifest>" +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response>" +
			"</tmssvc_response>";
		}
		else if (user != null && user.equals("color")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"33696:numerate73\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\">" +
			"<stereotype_style font_magnification=\"1.0\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"directions\"/>" +
			"<stereotype_style font_magnification=\"1.0\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stimulus\"/>" +
			"<stereotype_style font_magnification=\"1.0\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stem\"/>" +
			"<stereotype_style font_magnification=\"1.0\" font_color=\"0xFF00FF\" bgcolor=\"0x99FF00\" stereotype=\"answerArea\"/>" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Regression Test\"><sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"326\" asmt_hash=\"CC9E7044B9834A6F9942B0F02430318D\" title=\"Regression Test\" sco_unit_type=\"SUBTEST \" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"0\" id=\"24224\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<terminator id=\"SEE_YOU_LATER\"/>" +
			"</manifest>" +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response>" +
			"</tmssvc_response>";
		}
		else if (user != null && user.equals("reader")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" tts_speed_value=\"Medium\" restart_flag=\"false\" lsid=\"1:swirl50346\"><status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\">" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"Mathematics 101\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"100\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" adaptive=\"false\" />" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response> </tmssvc_response>";		
		}
		else if (user != null && user.equals("fontsize")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"33696:numerate73\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" untimed=\"false\" screen_reader=\"false\" magnifier=\"false\" calculator=\"true\">" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFFF\" stereotype=\"directions\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFFF\" stereotype=\"stimulus\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFFF\" stereotype=\"stem\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFB0\" stereotype=\"answerArea\"/>" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Regression Test\"><sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"326\" asmt_hash=\"CC9E7044B9834A6F9942B0F02430318D\" title=\"Regression Test\" sco_unit_type=\"SUBTEST \" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"0\" id=\"24224\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<terminator id=\"SEE_YOU_LATER\"/>" +
			"</manifest>" +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response>" +
			"</tmssvc_response>";
		}
		else if (user != null && user.equals("fontsizereader")) {
			return "<tmssvc_response method=\"login_response\">" + 
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"33696:numerate73\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\">" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFFF\" stereotype=\"directions\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFFF\" stereotype=\"stimulus\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFFF\" stereotype=\"stem\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000000\" bgcolor=\"0xFFFFB0\" stereotype=\"answerArea\"/>" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Regression Test\"><sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"326\" asmt_hash=\"CC9E7044B9834A6F9942B0F02430318D\" title=\"Regression Test\" sco_unit_type=\"SUBTEST \" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"0\" id=\"24224\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<terminator id=\"SEE_YOU_LATER\"/>" +
			"</manifest>" +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response>" +
			"</tmssvc_response>";
		}
		else if (user != null && user.equals("restart")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"1\" restart_flag=\"true\" lsid=\"33696:numerate73\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\" extended_time=\"true\">" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"directions\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stimulus\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stem\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0xFFFFFF\" bgcolor=\"0x000080\" stereotype=\"answerArea\"/>" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Regression Test\"><sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"326\" asmt_hash=\"CC9E7044B9834A6F9942B0F02430318D\" title=\"Regression Test\" sco_unit_type=\"SUBTEST \" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"37.45\" id=\"24224\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<terminator id=\"SEE_YOU_LATER\"/>" +
			"</manifest>" +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"<consolidated_restart_data>" + 
			"<tsd lsid=\"33126:swirl50346\" scid=\"24224\">" + 
			"<ast cur_eid=\"KYOP.TND_SR.9.R.004\" rem_sec=\"17.45\"/>" +
			"<ist iid=\"1\" mrk=\"0\" dur=\"27\" eid=\"1\" mseq=\"10\">" +
			"<rv n=\"RESPONSE\" t=\"identifier\"><v>%3Canswers%3E%3Canswer%20id%3D%22widget1003%22%3Eape%3C%2Fanswer%3E%3Canswer%20id%3D%22widget1023%22%3Ebear%3C%2Fanswer%3E%3Canswer%20id%3D%22widget1025%22%3Echild%3C%2Fanswer%3E%3C%2Fanswers%3E</v></rv></ist>" +
			"<ist iid=\"2\" mrk=\"0\" dur=\"27\" eid=\"2\" mseq=\"8\">" +
			"<rv n=\"RESPONSE\" t=\"identifier\"><v>%3Canswers%3E%3Canswer%20id%3D%22widget1003%22%3Eape%3C%2Fanswer%3E%3Canswer%20id%3D%22widget1023%22%3Ebear%3C%2Fanswer%3E%3Canswer%20id%3D%22widget1025%22%3Echild%3C%2Fanswer%3E%3C%2Fanswers%3E</v></rv></ist>" +
			"<ist iid=\"3\" mrk=\"0\" dur=\"27\" eid=\"2\" mseq=\"9\">" +
			"<rv n=\"RESPONSE\" t=\"identifier\"><v>%3Canswers%3E%3Canswer%20id%3D%22widget1003%22%3Eape%3C%2Fanswer%3E%3Canswer%20id%3D%22widget1023%22%3Ebear%3C%2Fanswer%3E%3Canswer%20id%3D%22widget1025%22%3Echild%3C%2Fanswer%3E%3C%2Fanswers%3E</v></rv></ist>" +
			
			"<sp>Here%20is%20the%20scratchpad%20contents%20that%20have%20been%20url%20encoded</sp></tsd>" +
			"</consolidated_restart_data></login_response></tmssvc_response>";
		}
		else if (user != null && user.equals("tutorialRequired")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"1:swirl50346\"><status status_code=\"200\"/>" +
			"<tutorial deliver_tutorial=\"1\" tutorial_url=\"TerraNovaDemo.swf\"/>" + 
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"&lt;i&gt;bliggetty blog&lt;\\i&gt;\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"100\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response> </tmssvc_response>";
		}
		else if (user != null && user.equals("tutorialOptional")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"1:swirl50346\">" +
			"<status status_code=\"200\"/>" +
			"<tutorial deliver_tutorial=\"0\" tutorial_url=\"TerraNovaDemo.swf\"/>" + 
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"&lt;i&gt;TerraNova&lt;\\i&gt;&#8482;\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"100\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response> </tmssvc_response>";
		}
		else if (user != null && user.equals("showHighlighter")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"1:swirl50346\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\">" +
			"<lms.student.accommodations highlighter=\"true\" rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\"/>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"&lt;i&gt;TerraNova&lt;\\i&gt;&#8482;\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"100\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response> </tmssvc_response>";
		}
		else if (user != null && user.equals("hideHighlighter")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"1:swirl50346\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations highlighter=\"false\" rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\"/>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"&lt;i&gt;TerraNova&lt;\\i&gt;&#8482;\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"100\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response> </tmssvc_response>";
		}
		else if (user != null && user.equals("seed")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"1:swirl50346\" random_distractor_seed_number=\"" + generateRandomNo() + "\"><status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"Mathematics 101\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"100\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTABE.swf\"/>" +
			"</login_response> </tmssvc_response>";
		}
		else if (user != null && user.equals("accommodated_seed")) {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"33696:numerate73\" random_distractor_seed_number=\"" + generateRandomNo() + "\">" +
			"<status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\"/>" +
			"<lms.student.accommodations rest_break=\"true\" untimed=\"false\" screen_reader=\"true\" magnifier=\"false\" calculator=\"true\">" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"directions\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stimulus\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0x000080\" bgcolor=\"0xFFCCCC\" stereotype=\"stem\"/>" +
			"<stereotype_style font_magnification=\"1.5\" font_color=\"0xFFFFFF\" bgcolor=\"0x000080\" stereotype=\"answerArea\"/>" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Regression Test\"><sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"326\" asmt_hash=\"CC9E7044B9834A6F9942B0F02430318D\" title=\"Regression Test\" sco_unit_type=\"SUBTEST \" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"0\" id=\"24224\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" />" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<terminator id=\"SEE_YOU_LATER\"/>" +
			"</manifest>" +
			"<branding tdclogo=\"/resources/logoTN.swf\"/>" +
			"</login_response>" +
			"</tmssvc_response>";
		}
		else {
			return "<tmssvc_response method=\"login_response\">" +
			"<login_response restart_number=\"0\" restart_flag=\"false\" lsid=\"1:swirl50346\"><status status_code=\"200\"/>" +
			"<testing_session_data>" +
			"<cmi.core student_first_name=\"First\" student_middle_name=\"Middle\" student_last_name=\"Last\" student_id=\"84792\" student_grade=\"4\" />" +
			"<lms.student.accommodations  untimed=\"false\" screen_reader=\"true\" masking_tool=\"true\">" +
			"</lms.student.accommodations>" +
			"</testing_session_data>" +
			"<manifest title=\"Mathematics 101\">" +
			"<feedback id=\"STUDENT_FEEDBACK\"/>" +
			"<sco cmi.core.total_time=\"0:0:0\" adsid=\"9622602\" item_encryption_key=\"n7673nBJ2n27bB4oAfme7Ugl5VV42g8\" asmt_encryption_key=\"1\" asmt_hash=\"1003A05C5AFDD27F24A5F05B627C52E9\"" +
			" title=\"Mathematics 101\" sco_unit_type=\"SUBTEST\" sco_unit_question_number_offset=\"0\" sco_duration_minutes=\"10\" id=\"24105\" cmi.core.entry=\"ab-initio\" force_logout=\"false\" contentURI=\"http://152.159.127.61/downloadfiles/catcontents/\" adaptive=\"false\"/>" +
			"<terminator id=\"SEE_YOU_LATER\" /> </manifest> " +
			"<branding tdclogo=\"/resources/logoTABE.swf\"/>" +
			"</login_response> </tmssvc_response>";
		}
	}

	/*
	 * This function generates a random number which will be used as a seed in
	 *  the login response xml 
	 */
	private static Integer generateRandomNo () {

		final String NUM_ARRAY = "1234567890";
		String alphaNumArray = NUM_ARRAY;

		int index = 0;

		Random rnd = new Random();

		boolean validRandom = false;
		String seed = "";
		while(!validRandom) {

			for(int i = 0; i < 3; i++) {

				index = rnd.nextInt();

				if (index < 0) {
					index = index * -1;
				}

				// make sure the index is a value within the length of our array
				if(index != 0) {
					index = index % alphaNumArray.length();
				}

				seed = seed.concat(String.valueOf(alphaNumArray.charAt(index)));
			}

			if (isNumOdd(seed)) {

				if(verifyContainsCharFrom(NUM_ARRAY,seed)) {
					validRandom = true;
				}
			} else {

				seed = "";

			}

		}
		return Integer.valueOf(seed);

	}

	private static boolean isNumOdd(String seed) {

		return Integer.valueOf(String.valueOf(seed.charAt(seed.length() - 1))).
		intValue() % 2 == 0 ? false:true;
		}
	
	private static boolean verifyContainsCharFrom(String charArray,String seed) {
		boolean verified = false;
		int j = 0;

		while(!verified && (j < seed.length())) {
			if(charArray.indexOf(String.valueOf(seed.charAt(j))) != -1) {
				verified = true;
			}
			j++;
		}
		return verified;
	}


		/**
		 * The verifyServletSettings method of the servlet. <br>
		 *
		 * verify if values in tdc.properties are valid
		 */
		private String verifyServletSettings() {
			String errorMessage = ServletUtils.OK;
			if (! ServletUtils.validateServletSettings()) {
//				return error message if values in properties file are invalid
				errorMessage = ServletUtils.getServletSettingsErrorMessage();
			}
			else {
//				properties file are valid, now check for TMS connection
				errorMessage = ServletUtils.httpClientGetStatus();
			}
			return errorMessage;
		}

		/**
		 * The login method of the servlet. <br>
		 *
		 * handle login request from client
		 * request login response xml from TMS
		 * process encryptionKey to memory cache
		 * parse login response xml to determine roster id and restart data (if present)
		 * return login response xml from TMS to client
		 *
		 * @param String xml
		 */
		private String login(String xml) {
			String result = ServletUtils.ERROR;
			try {
//				sent login request to TMS
				result = ServletUtils.httpClientSendRequest(ServletUtils.LOGIN_METHOD, xml);

				if (ServletUtils.isLoginStatusOK(result)) {
//					process encryptionKey to memory cache
					ServletUtils.processContentKeys(result);

//					if file exist handle restart
					String fileName = ServletUtils.buildFileName(xml);
					if (AuditFile.exists(fileName)) {
//						handle restart here in phase 2
					}
					logger.info("Login successfully.");
				}
				else {
					logger.error("TMS returns error in login() : " + result);
				}
			}
			catch (Exception e) {
				logger.error("Exception occured in login() : " + ServletUtils.printStackTrace(e));
				result = ServletUtils.buildXmlErrorMessage("", e.getMessage(), "");
			}
			return result;
		}

		/**
		 * The feedback method of the servlet. <br>
		 *
		 * handle feedback request from client
		 * return feedback response xml from TMS to client
		 *
		 * @param String xml
		 */
		private String feedback(String xml) {
			String result = ServletUtils.ERROR;
			try {
//				sent feedback request to TMS
				result = ServletUtils.httpClientSendRequest(ServletUtils.FEEDBACK_METHOD, xml);
				if (ServletUtils.isStatusOK(result)) {
					logger.info("Get feedback successfully.");
				}
				else {
					logger.error("TMS returns error in feedback() : " + result);
				}
			}
			catch (Exception e) {
				logger.error("Exception occured in feedback() : " + ServletUtils.printStackTrace(e));
				result = ServletUtils.buildXmlErrorMessage("", e.getMessage(), "");
			}
			return result;
		}

		/**
		 * The save method of the servlet. <br>
		 *
		 * verify the acknowledge from TMS, checking based on values settings in tdc.properties
		 * if acknowledge checking failed, return error to client '<ERROR />'
		 * if acknowledge checking passed, write response to audit file (if save response),
		 * return ack to client, send request to TMS, on response from TMS, change ack in memory cache.
		 *
		 * @param HttpServletResponse response
		 * @param String xml
		 * @throws IOException
		 */
		private String save(HttpServletResponse response, String xml) throws IOException {
			response.setContentType("text/xml");
			System.out.println("Save XML: " +  xml);

    		String ip = null;
    		
    		String itemId = ServletUtils.parseItemId(xml);
    		Calendar c = Calendar.getInstance();
    		c.setTimeInMillis(System.currentTimeMillis());
    		String dateTime = c.get(Calendar.MONTH) + " " + c.get(Calendar.DATE) + " " + c.get(Calendar.YEAR);
    		//String wavBase64Str = convertSpeexToWav(studentId);
    		//if (wavBase64Str != null){
    		//String rawScore = callScoreItemService(wavBase64Str, studentId, ip, dateTime, grade, itemId);
  			//
    		//}
  
    		System.out.println("parse response");
    		xml = xml.replace("undefined", "");
    		String stResponse = ServletUtils.parseResponse(xml);
    		
    	System.out.println("strespopjsalfk: " + stResponse);
    		
    		if (stResponse != null && stResponse != "-" ){
    		System.out.println("st Reponse" + stResponse);
    		
    		//System.out.println("iscatstop" +ServletUtils.parseCatStop(xml));
    		}
			PrintWriter out = response.getWriter();
			out.println("<OK/>");
			out.flush();
			out.close();
			return ServletUtils.OK;
		}

		/**
		 * The writeToAuditFile method of the servlet. <br>
		 *
		 * write xml model content to audit file
		 *
		 * @param String xml
		 */
		private String writeToAuditFile(String xml) {
			String result = ServletUtils.ERROR;
			String errorMessage = null;

			try {
//				truncate the file if it is bigger than 200 KB before write model content
				String fileName = ServletUtils.buildFileName(xml);
				if (ServletUtils.isFileSizeTooBig(fileName)) {
					logger.info("Audit file is too big (> 200KB), file will be truncated before writing model data.");
					AuditFile.deleteLogger(fileName);
				}

//				write model content to audit file
				AuditFile.log(ServletUtils.createAuditVO(xml, false));

//				sent writeToAuditFile request to TMS
				ServletUtils.httpClientSendRequest(ServletUtils.WRITE_TO_AUDIT_FILE_METHOD, xml);
				result = ServletUtils.OK; // nothing return from TMS
			}
			catch (Exception e) {
				logger.error("Exception occured in writeToAuditFile() : " + ServletUtils.printStackTrace(e));
				errorMessage = ServletUtils.getErrorMessage("tdc.servlet.error.writeToAuditFileFailed");
				result = ServletUtils.buildXmlErrorMessage("", errorMessage, "");
			}
			return result;
		}

		/**
		 * The uploadAuditFile method of the servlet. <br>
		 *
		 * upload the audit file to TMS and delete the file from local storage
		 *
		 * @param String xml
		 */
		private String uploadAuditFile(String xml) {
			String result = ServletUtils.ERROR;
			String errorMessage = null;
			int responseCode = HttpStatus.SC_OK;

//			make sure the queue is empty before upload audit file
			//String checkQueueClear = waitForQueueToBeClear();
			//if (checkQueueClear != null) {
			//	return checkQueueClear;
			//}

			MemoryCache memoryCache = MemoryCache.getInstance();
			if (memoryCache.getSrvSettings().isTmsAuditUpload()) {
//				get the audit file to upload
				String fileName = ServletUtils.buildFileName(xml);
				File file = new File(fileName);

//				get checksum value
				long sumValue = ServletUtils.getChecksum(file);
				if (sumValue == -1L) {
					logger.error("Checksum error.");
					return ServletUtils.ERROR;
				}

//				setup URL parameters
				String tmsURL = ServletUtils.getTmsURLString(ServletUtils.UPLOAD_AUDIT_FILE_METHOD);
				tmsURL += "?" + ServletUtils.XML_PARAM + "=" + xml;
				tmsURL += "&" + ServletUtils.CHECKSUM_PARAM + "=" + sumValue;

				PostMethod filePost = new PostMethod(tmsURL);
				try {
//					set multipart request
					Part[] parts = { new FilePart(ServletUtils.AUDIT_FILE_PARAM, file) };
					filePost.setRequestEntity( new MultipartRequestEntity(parts, filePost.getParams()) );

//					upload the file to TMS
					HttpClientParams clientParams = new HttpClientParams();
					clientParams.setConnectionManagerTimeout(30 * ServletUtils.SECOND); // timeout in 30 seconds
					HttpClient client = new HttpClient(clientParams);

					String proxyHost = ServletUtils.getProxyHost();

					if ((proxyHost != null) && (proxyHost.length() > 0)) {
//						execute with proxy settings
						HostConfiguration hostConfiguration = client.getHostConfiguration();
						int proxyPort = ServletUtils.getProxyPort();
						System.out.println("proxyHost = " + proxyHost + "\nproxyPort = " + proxyPort);
						hostConfiguration.setProxy(proxyHost, proxyPort);
						String username = ServletUtils.getProxyUserName();
						String password = ServletUtils.getProxyPassword();
						UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);
						HttpState state = client.getState();
						state.setProxyCredentials(null, proxyHost, credentials);
						responseCode = client.executeMethod(hostConfiguration, filePost);
					}
					else {
//						execute without proxy
						responseCode = client.executeMethod(filePost);
					}

//					delete local file when upload successfully
					if (responseCode == HttpStatus.SC_OK) {
						InputStream isPost = filePost.getResponseBodyAsStream();
						BufferedReader in = new BufferedReader(new InputStreamReader(isPost));
						String inputLine = null;
						String tmsResponse = "";
						while ((inputLine = in.readLine()) != null) {
							tmsResponse += inputLine;
						}
						in.close();
//						if OK return from TMS, delete local file
						if (ServletUtils.isStatusOK(tmsResponse)) {
							logger.info("Upload audit file successfully");
							if (AuditFile.deleteLogger(fileName)) {
								logger.info("Delete audit file successfully");
								result = ServletUtils.OK;
							}
							else {
								logger.error("Failed to delete audit file");
								errorMessage = ServletUtils.getErrorMessage("tdc.servlet.error.deleteAuditFileFailed");
								result = ServletUtils.buildXmlErrorMessage("", errorMessage, "");
							}
						}
						else {
							logger.error("Failed to upload audit file, tmsResponse=" + tmsResponse);
							errorMessage = ServletUtils.getErrorMessage("tdc.servlet.error.uploadFailed");
							result = ServletUtils.buildXmlErrorMessage("", errorMessage, "");
						}
					}
					else {
						logger.error("Failed to upload audit file, responseCode=" + HttpStatus.getStatusText(responseCode));
						result = ServletUtils.buildXmlErrorMessage("", HttpStatus.getStatusText(responseCode), "");
					}
				}
				catch (Exception e) {
					logger.error("Exception occured in uploadAuditFile() : " + ServletUtils.printStackTrace(e));
					errorMessage = ServletUtils.getErrorMessage("tdc.servlet.error.uploadFailed");
					result = ServletUtils.buildXmlErrorMessage("", errorMessage, "");
				}
				finally {
					filePost.releaseConnection();
				}
			}
			else {
				result = ServletUtils.OK;
			}
			return result;
		}

		/**
		 * The verifyAcknowledge method of the servlet. <br>
		 *
		 * verify if there is an acknowledge message returned from TMS to continue
		 * if there is no ack then try again (tms.ack.messageRetry), each time delay 1 second
		 *
		 * @param MemoryCache memoryCache
		 * @param String lsid
		 * @param String mseq
		 */
		/*private boolean verifyAcknowledge(MemoryCache memoryCache, String lsid, String mseq) throws InterruptedException {
			 int retryInterval = memoryCache.getSrvSettings().getTmsMessageRetryInterval();
		        int waitTime = memoryCache.getSrvSettings().getTmsAckMessageWaitTime();
		        int expansion = memoryCache.getSrvSettings().getTmsMessageRetryExpansionFactor();
		        long startTime = System.currentTimeMillis();
		        long currentTime = startTime;
		        boolean timeout = false;
		        boolean pendingState = inPendingState(memoryCache, lsid, mseq);
		        int i = 1;
		        while (!timeout && pendingState) {
		            Thread.sleep(retryInterval * ServletUtils.SECOND * i); // delay 1 second and try again
		            pendingState = inPendingState(memoryCache, lsid, mseq);
		            currentTime = System.currentTimeMillis();
		            timeout = (currentTime - startTime) > (waitTime * ServletUtils.SECOND);
		            logger.info("Waited " + ((currentTime - startTime)/ServletUtils.SECOND) + " for TMS response.");
		            i = i*expansion;
		        }            
		        return (! pendingState);
		}*/

		/**
		 * The inPendingState method of the servlet. <br>
		 *
		 * verify if there is a pending state entry in the list
		 * the index is computed from 'tms.ack.maxLostMessage' in properties file
		 * mseqIndex = mseqCurrent - tmsAckMaxLostMessage;
		 *
		 * @param MemoryCache memoryCache
		 * @param String lsid
		 * @param String mseq
		 */
		/*public boolean inPendingState(MemoryCache memoryCache, String lsid, String mseq) {
			boolean pendingState = false;
			boolean isTmsAckRequired = memoryCache.getSrvSettings().isTmsAckRequired();
			int tmsAckMaxLostMessage = memoryCache.getSrvSettings().getTmsAckMaxLostMessage();

			if (isTmsAckRequired) {
				ArrayList states = (ArrayList)memoryCache.getStateMap().get(lsid);
				if (states != null) {
					int mseqCurrent = Integer.parseInt(mseq);
					int mseqIndex = mseqCurrent - tmsAckMaxLostMessage;
					for (int i=0 ; i<states.size() ; i++) {
						StateVO state = (StateVO)states.get(i);
						if (state.getMseq() <= mseqIndex) {
							if (state.getState().equals(StateVO.PENDING_STATE)) {
								pendingState = true;
								break;
							}
						}
					}
				}
			}
			return pendingState;
		}*/

		/*public String waitForQueueToBeClear()
		{
			 String errorMsg = null;
		        MemoryCache memoryCache = MemoryCache.getInstance();
		        HashMap stateMap = ( HashMap )memoryCache.getStateMap();
		        
		        if ( !stateMap.isEmpty() )
		        {
		            Set lsids = stateMap.keySet();
		            Iterator it = lsids.iterator();
		            if ( it.hasNext() )
		            {
		                String key = ( String )it.next();
		                ArrayList states = ( ArrayList )stateMap.get( key );
		                int messageWait = memoryCache.getSrvSettings().getTmsAckMessageWaitTime();
		                try
		                {
		                    while( anyMessageInPending( states ) && ( messageWait > 0) )
		                    {
		                    	messageWait--;
		                        Thread.sleep( ServletUtils.SECOND ); 
		                    }
		                    if ( anyMessageInPending( states ) )
		                    {
		                        errorMsg = ServletUtils.getErrorMessage( "tdc.servlet.error.noAck" );
		                        logger.error( errorMsg );
		                        errorMsg = ServletUtils.buildXmlErrorMessage( "", errorMsg, "" );
		                    }
		                }
		                catch( Exception e )
		                {
		                    errorMsg = ServletUtils.getErrorMessage( "tdc.servlet.error.noAck" );
		                    logger.error( errorMsg );
		                    errorMsg = ServletUtils.buildXmlErrorMessage( "", errorMsg, "" );
		                }
		            }
		        }
		        return errorMsg;
		}*/

		public boolean anyMessageInPending( ArrayList states )
		{
			boolean somethingPending = false;
			if ( states != null )
			{
				for ( int i = 0; i < states.size() && !somethingPending; i++ )
				{
					StateVO state = ( StateVO )states.get( i );
					if ( state.getState().equals( StateVO.PENDING_STATE ) )
						somethingPending = true;
				}
			}
			return somethingPending;
		}

		
		public void storeSpeexBase64Str(HttpServletRequest request) {
		/*	String studentId = request.getParameter("studentId");
			String speexBase64Str = request.getParameter("speexBase64Str");
			MemoryCache.getInstance().getSpeexBase64Map().put(studentId, speexBase64Str);*/
		}
		
		private String convertSpeexToWav(String studentId) {
			
			
		/*	OutputStream spxFile = null;
			File speexFile = null;
			File wavFile = null;
			try {
				String speexFileName = "tempSpeex_" + studentId + ".spx";
				String wavFileName = "tempWav_" + studentId + ".wav";
				String speexBase64Str = MemoryCache.getInstance().getSpeexBase64Map().get("1234");
				
				if(speexBase64Str != null){
				byte[] decodedBase64 = Base64.decodeToByteArray(speexBase64Str);
				spxFile = new FileOutputStream(speexFileName);
				for(int i = 0; i < decodedBase64.length; i++) {
					spxFile.write(decodedBase64[i]);
					//System.out.println("decodedBase64["+i+"] -> " + decodedBase64[i]);
				}
				speexFile = new File(speexFileName);
				wavFile = new File(wavFileName);
				
				JSpeexDec decoder = new JSpeexDec();
				decoder.destFormat = FILE_FORMAT_WAVE;
				decoder.srcFormat = FILE_FORMAT_OGG;
				decoder.decode(speexFile, wavFile);
				spxFile.close();
				return generateWavBase64String(wavFile);
				}
				//System.out.println("wavToBase64 -> " + wavToBase64);
			} catch (IOException ioe) {
				ioe.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			} finally{
				try {
					if(speexFile != null){
					speexFile.delete();
					wavFile.delete();
					}
				} catch(Exception ioe) {
					ioe.printStackTrace();
				}
			}
		*/
			return null;
		}
		
		private static String generateWavBase64String(File wavFile) {
			String base64EncodedString = "";
			try {
				if (!wavFile.exists()) {
					return base64EncodedString;//file does not exist so return empty string
				}
				FileInputStream fis = new FileInputStream(wavFile);
				ByteArrayOutputStream bos = new ByteArrayOutputStream();
				byte[] buf = new byte[1024];
				try {
					for (int readNum; (readNum = fis.read(buf)) != -1;) {
						bos.write(buf, 0, readNum); //Initial run so no doubt here it's 0
					}
				} catch (IOException ex) {
					ex.printStackTrace();
				}
				bos.close();
				fis.close();
				byte[] bytes = bos.toByteArray();
				base64EncodedString = Base64.encode(bytes);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return base64EncodedString;
		}
		
		private String callScoreItemService(String wavBase64Str, String studentId, String ip,
				  						String dateTime, String grade, String itemId) {
		/*	if(ip == null){
				ip = "192.168.14.46";
				
				
			}
			String requestXml = generateScoreIemReqXML(wavBase64Str, studentId, ip, dateTime, grade, itemId);
			System.out.println("Requestxml of webservice"+requestXml);
			String responseXml = TDCWebservices.callScoreItemService(requestXml);
			System.out.println("responseXml ******************"+ responseXml);
			int startIndex = responseXml.indexOf("<RawScore xmlns=\"\">");
			int endIndex = responseXml.indexOf("</RawScore>");
			if(startIndex > 0 && endIndex > 0) {
				return responseXml.substring(startIndex + 19, endIndex);
			}*/
			return null;
		}
		
		private String generateScoreIemReqXML(String wavBase64Str, String studentId, String ip,
											  String dateTime, String grade, String itemId ) {
			String reqXml = xmlForWebService;
			reqXml = reqXml.replace("**", ip);
			reqXml = reqXml.replace("!!", dateTime);
			reqXml = reqXml.replace("@@", studentId);
			reqXml = reqXml.replace("##", grade);
			reqXml = reqXml.replace("$$", itemId);
			reqXml = reqXml.replace("%%", wavBase64Str);
			System.out.println("reqXml ******************"+ reqXml);
			return reqXml;
		}      
	
	}