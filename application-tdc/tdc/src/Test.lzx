<canvas width="100%" height="100%">
<include href="manipulatives/protractor/Protractor.lzx" />
<include href="manipulatives/calculator/scientificCalculator.lzx"/>
<include href="manipulatives/calculator/standardCalculator.lzx"/>
<include href="manipulatives/ruler/BaseRuler.lzx"/>
<include href="manipulatives/ruler/MaskingRuler.lzx"/>
<include href="manipulatives/scratchpad/Scratchpad.lzx"/>
<include href="manipulatives/refcard/RefCard.lzx"/>
<include href="manipulatives/PleaseWaitPopup.lzx"/>
<include href="manipulatives/Tooltip.lzx"/>

<script src="ctbmodules/controllers/utils/json.js" />
	
<attribute name="srcurl" value="null"/>
<attribute name="manipid" value="null"/>
<attribute name="isLoaded" type="boolean" value="false"/>
<attribute name="scratchpadtext" value="null"/>
<attribute name="freezeui" value="null"/>
<attribute name="unlockui" value="null"/>
<attribute name="showpleasewaitpopup" type="boolean" value="false"/>
<attribute name="hidepleasewaitpopup" type="boolean" value="false"/>
<attribute name="showpleasewaitpopupcontrols" type="boolean" value="false"/>
<attribute name="manipulativedata" type="boolean" value="false"/>
<attribute name="htmlGeneralManip" value="$once{new Object()}" />
<attribute name="scalefactor" value="null"/>
<attribute name="xscalefactor" value="null"/>

<attribute name="yscalefactor" value="null"/>
<attribute name="manipData" value="null"/>
<attribute name="htmlGeneralOpenManip" value="$once{new Object()}" />
<attribute name="readable" value="false" type="boolean" />
<attribute name="currentCursor" value="null" />

<handler name="onscalefactor" args="data">		
	data = data.split('|');
	this.xscalefactor = Number(data[0]);
	this.yscalefactor = Number(data[1]);
</handler>

<handler name="onshowpleasewaitpopup">
	//console.log("onshowPleaseWaitPopup",this.showPleaseWaitPopup);
	gPleaseWaitPopup.show();
	gPleaseWaitPopup.setAttribute('xscale',xscalefactorjs);
	gPleaseWaitPopup.setAttribute('yscale',yscalefactorjs);
</handler>

<handler name="onhidepleasewaitpopup">
	gPleaseWaitPopup.hide();
</handler>

<handler name="onshowpleasewaitpopupcontrols">
	gPleaseWaitPopup.showControls();
</handler>

<handler name="onmanipulativedata" args="data">
	//var maniObj = new Object;
	var maniObj;
	
	maniObj = getManipulativeObject('FCAT_formula_card',gFcatFormulaCard,"false");
	htmlGeneralManip['FCAT_formula_card'] = maniObj;

	maniObj = getManipulativeObject('TN_formula_card',gTnFormulaCard,"false");
	htmlGeneralManip['TN_formula_card'] = maniObj;

	maniObj = getManipulativeObject('half_inch_ruler',gHalfInchRuler,"true");
	htmlGeneralManip['half_inch_ruler'] = maniObj;

	maniObj = getManipulativeObject('mm_ruler',gMmRuler,"true");
	htmlGeneralManip['mm_ruler'] = maniObj;

	maniObj = getManipulativeObject('cm_ruler',gCmRuler,"true");
	htmlGeneralManip['cm_ruler'] = maniObj;

	maniObj = getManipulativeObject('protractor',gProtractor,"true");
	htmlGeneralManip['protractor'] = maniObj;

	maniObj = getManipulativeObject('scientific_calculator',gScientificCalculator,"false");
	htmlGeneralManip['scientific_calculator'] = maniObj;

	maniObj = getManipulativeObject('standard_calculator',gStandardCalculator,"false");
	htmlGeneralManip['standard_calculator'] = maniObj;

	maniObj = getManipulativeObject('straight_edge',gStraightEdge,"true");
	htmlGeneralManip['straight_edge'] = maniObj;
	
	htmlGeneralManip.eid=data;
	var manip = JSON.stringify(htmlGeneralManip);
	//var obj = JSON.parse(manip); 
	//console.log("manip",manip,htmlGeneralManip);
	if(manip){
	var js = "setHtmlGeneralManip('"+manip+"')";
	lz.Browser.loadJS(js);
	}
</handler>

<method name="getManipulativeObject" args="manipName,manipId,isruler"><![CDATA[
	var maniObj = new Object;
	maniObj.toolid = manipName;
	if(manipId.isselected == undefined || manipId.isselected == 'undefined')
		maniObj.isselected = 'undefined';
	else
		maniObj.isselected = manipId.isselected;
	maniObj.x = manipId.x.toString();
	maniObj.y = manipId.y.toString();
	maniObj.width = manipId.width.toString();
	if(isruler && manipId.rotation!=null)
		maniObj.rotation = manipId.rotation.toString();
	else
		maniObj.rotation = 'null';
	return maniObj;
	]]>
</method>

<handler name="onfreezeui" args="data">
 this.blocker.setAttribute('visible',true);
</handler>

<handler name="onunlockui" args="data">
this.blocker.setAttribute('visible',false);
</handler>

<handler name="onsrcurl" args="arg"><![CDATA[
if (!isLoaded){
var url;
//For Previewer
if (arg.indexOf("http") != -1){
	url = arg;
}else{
	url = "http:items/"+arg+"/previewer.html";
}



this.ht.setAttribute('src', url);
this.ht.sendToBack();
canvas.setAttribute('isLoaded', true);
}
]]></handler>

<handler name="onscratchpadtext" args="arg"><![CDATA[
	//console.log("on scratchpad text" + arg);
	gScratchpad.setText(arg);	
]]></handler>

<handler name="onmanipData" args="data">
	//console.log("onmanipData",data);
	this.setAttribute('htmlGeneralOpenManip',JSON.parse(data));
	//console.log("htmlGeneralOpenManip",htmlGeneralOpenManip);
	openManipulative(htmlGeneralOpenManip);	
</handler>

<method name="openManipulative" args="openManipData"><![CDATA[
var manipObjData;
//console.log("openManipulative",openManipData);

	
		manipObjData = openManipData['protractor'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gProtractor.setAttribute('x',Number(manipObjData.x));
			gProtractor.setAttribute('y',Number(manipObjData.y));
			gProtractor.setAttribute('width',Number(manipObjData.width));
			gProtractor.setAttribute('rotation',Number(manipObjData.rotation));
			gProtractor.setAttribute("isselected",true);
			gProtractor.show();
		}
		
		manipObjData = openManipData['standard_calculator'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gStandardCalculator.setAttribute('x',Number(manipObjData.x));
			gStandardCalculator.setAttribute('y',Number(manipObjData.y));
			gStandardCalculator.setAttribute('width',Number(manipObjData.width));
			gStandardCalculator.setAttribute("isselected",true);
			gStandardCalculator.show();
		}

		manipObjData = openManipData['scientific_calculator'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gScientificCalculator.setAttribute('x',Number(manipObjData.x));
			gScientificCalculator.setAttribute('y',Number(manipObjData.y));
			gScientificCalculator.setAttribute('width',Number(manipObjData.width));
			gScientificCalculator.setAttribute("isselected",true);
			gScientificCalculator.show();
		}
		
		manipObjData = openManipData['straight_edge'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gStraightEdge.setAttribute('x',Number(manipObjData.x));
			gStraightEdge.setAttribute('y',Number(manipObjData.y));
			gStraightEdge.setAttribute('width',Number(manipObjData.width));
			gStraightEdge.setAttribute('rotation',Number(manipObjData.rotation));
			gStraightEdge.setAttribute("isselected",true);
			gStraightEdge.show();
		}

		manipObjData = openManipData['oneeighth_inch_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gEighthInchRuler.setAttribute('x',Number(manipObjData.x));
			gEighthInchRuler.setAttribute('y',Number(manipObjData.y));
			gEighthInchRuler.setAttribute('width',Number(manipObjData.width));
			gEighthInchRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gEighthInchRuler.setAttribute("isselected",true);
			gEighthInchRuler.show();
		}
		
		manipObjData = openManipData['half_inch_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gHalfInchRuler.setAttribute('x',Number(manipObjData.x));
			gHalfInchRuler.setAttribute('y',Number(manipObjData.y));
			gHalfInchRuler.setAttribute('width',Number(manipObjData.width));
			gHalfInchRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gHalfInchRuler.setAttribute("isselected",true);
			gHalfInchRuler.show();
		}

		manipObjData = openManipData['mm_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gMmRuler.setAttribute('x',Number(manipObjData.x));
			gMmRuler.setAttribute('y',Number(manipObjData.y));
			gMmRuler.setAttribute('width',Number(manipObjData.width));
			gMmRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gMmRuler.setAttribute("isselected",true);
			gMmRuler.show();
		}

		manipObjData = openManipData['cm_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gCmRuler.setAttribute('x',Number(manipObjData.x));
			gCmRuler.setAttribute('y',Number(manipObjData.y));
			gCmRuler.setAttribute('width',Number(manipObjData.width));
			gCmRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gCmRuler.setAttribute("isselected",true);
			gCmRuler.show();
		}

		manipObjData = openManipData['cm_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gCmRuler.setAttribute('x',Number(manipObjData.x));
			gCmRuler.setAttribute('y',Number(manipObjData.y));
			gCmRuler.setAttribute('width',Number(manipObjData.width));
			gCmRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gCmRuler.setAttribute("isselected",true);
			gCmRuler.show();
		}

		manipObjData = openManipData['FCAT_formula_card'];
		//console.log("FCAT_formula_card ",manipObjData);
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gFcatFormulaCard.setAttribute('x',Number(manipObjData.x));
			gFcatFormulaCard.setAttribute('y',Number(manipObjData.y));
			gFcatFormulaCard.setAttribute('width',Number(manipObjData.width));
			gFcatFormulaCard.setAttribute("isselected",true);
			gFcatFormulaCard.show();
		}

		manipObjData = openManipData['TN_formula_card'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gTnFormulaCard.setAttribute('x',Number(manipObjData.x));
			gTnFormulaCard.setAttribute('y',Number(manipObjData.y));
			gTnFormulaCard.setAttribute('width',Number(manipObjData.width));
			gTnFormulaCard.setAttribute("isselected",true);
			gTnFormulaCard.show();
		}
]]>

</method>

<handler name="onmanipid" args="arg">
	<![CDATA[
//console.log("onmanipid" , arg);
var accom = document.getElementById('__lz0').contentWindow.accomPkg;
switch(arg){

		case 'highlighter': if(accom.enableHighlighterArea){
								accom.enableHighlighter(false);
								//accom.removeHighlighterCursor();
							}else{
								accom.enableHighlighter(true);	
								//accom.setHighlighterCursor("../../includes/css/cursor_highliter.png");
							}
							
		break;
		case 'eraser' :		if(accom.enableEraserArea){
								accom.enableEraser(false);
								//accom.removeHighlighterCursor();
							}else{
								accom.enableEraser(true);
								//accom.setEraserCursor("../../includes/css/cursor_eraser.png");
							}
		break;
		case 'protractor' : if(gProtractor.visible){
								gProtractor.hide();
								gProtractor.setAttribute("isselected",false);
							}else{
								gProtractor.setAttribute("isselected",true);
								gProtractor.show();
							}
		break;
		
		case 'standard_calculator' : if(gStandardCalculator.visible){
								gStandardCalculator.hide();
								gStandardCalculator.setAttribute("isselected",false);
							}else{
								gStandardCalculator.setAttribute("isselected",true);
								gStandardCalculator.show();
							}
		break;
		
		case 'scientific_calculator' :if(gScientificCalculator.visible){
								gScientificCalculator.hide();
								gScientificCalculator.setAttribute("isselected",false);
							}else{
								gScientificCalculator.setAttribute("isselected",true);
								gScientificCalculator.show();
							}
		break;
		

		case 'straight_edge' :if(gStraightEdge.visible){
										gStraightEdge.hide();
										gStraightEdge.setAttribute("isselected",false);
									}else{
										gStraightEdge.setAttribute("isselected",true);
										gStraightEdge.show();
									}
				break;
		case 'oneeighth_inch_ruler' :if(gEighthInchRuler.visible){
										gEighthInchRuler.hide();
										gEighthInchRuler.setAttribute("isselected",false);
									}else{
										gEighthInchRuler.setAttribute("isselected",true);
										gEighthInchRuler.show();
									}
				break;
		case 'half_inch_ruler' :if(gHalfInchRuler.visible){
										gHalfInchRuler.hide();
										gHalfInchRuler.setAttribute("isselected",false);
									}else{
										gHalfInchRuler.setAttribute("isselected",true);
										gHalfInchRuler.show();
									}
				break;
		case 'mm_ruler' :if(gMmRuler.visible){
										gMmRuler.hide();
										gMmRuler.setAttribute("isselected",false);
									}else{
										gMmRuler.setAttribute("isselected",true);
										gMmRuler.show();
									}
				break;
		case 'cm_ruler' :if(gCmRuler.visible){
										gCmRuler.hide();
										gCmRuler.setAttribute("isselected",false);
									}else{
										gCmRuler.setAttribute("isselected",true);
										gCmRuler.show();
									}
				break;
				
		case 'masking_ruler' : 	if(gMaskingRuler.visible){
									gMaskingRuler.hide();
								}else{
									gMaskingRuler.show();
								}
		break;
		
		case 'scratchpad' : 	if(gScratchpad.visible){
									gScratchpad.hide();
									gScratchpad.setAttribute("isselected",false);
								}else{
									gScratchpad.setAttribute("isselected",true);
									gScratchpad.show();
								}
		break;

		case 'FCAT_formula_card' : if(gFcatFormulaCard.visible){
										gFcatFormulaCard.hide();
										gFcatFormulaCard.setAttribute("isselected",false);
									}else{
										gFcatFormulaCard.setAttribute("isselected",true);
										gFcatFormulaCard.show();
									}

		break;

		case 'TN_formula_card' : if(gTnFormulaCard.visible){
										gTnFormulaCard.hide();
										gTnFormulaCard.setAttribute("isselected",false);
									} else{
										gTnFormulaCard.setAttribute("isselected",true);
										gTnFormulaCard.show();
									}



		break;

		
		default :
			//console.log('gscratchpad.vsisible', gScratchpad.visible);
			gScratchpad.bringToFront();
						
		break;

}

]]>
</handler>
<!--  <view name="wrapper" x="5" y="150" width="800" height="560" bgcolor="green">
<html id="ht" name="htTag"  x="5" y="5" width="790" height="550"/>
</view>


<button name="visibleinvi" y="10" text="toggleVisiblity">
	<handler name="onclick">
		ht.setAttribute('visible' , false);
	</handler>
</button>

<button text="LISTEN_AUTO_NRS.html" y="20">
	<handler name="onclick">
	if($dhtml){
	ht.setAttribute('src', this.text);
	}else{
	ht.setAttribute('visible' , true);
	ht.setAttribute('src', 'http:audio/' + this.text);
	}
	</handler>
</button>-->

	<view name="wrapper" width="${760 * xscalefactorjs}" height="${450 * yscalefactorjs}" >
	<Protractor name="protractor" toolid="protractor" id="gProtractor" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<standardCalculator name="standard_calculator"
		toolid="standard_calculator" id="gStandardCalculator" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<scientificCalculator name="scientific_calculator"
		toolid="scientific_calculator" id="gScientificCalculator" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
	<BaseRuler name="straight_edge" toolid="straight_edge"
		labelrsr="straight_label" id="gStraightEdge" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>


	<BaseRuler name="oneeighth_inch_ruler" toolid="oneeighth_inch_ruler"
		tickmarksrsr="eighth_inch_tick_marks" labelrsr="inches_label"
		id="gEighthInchRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<BaseRuler name="half_inch_ruler" toolid="half_inch_ruler"
		tickmarksrsr="half_inch_tick_marks" labelrsr="inches_label"
		id="gHalfInchRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<BaseRuler name="mm_ruler" toolid="mm_ruler"
		tickmarksrsr="millimeter_tick_marks" labelrsr="centimeters_label"
		id="gMmRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<BaseRuler name="cm_ruler" toolid="cm_ruler"
		tickmarksrsr="centimeter_tick_marks" labelrsr="centimeters_label"
		id="gCmRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<MaskingRuler name="masking_ruler" toolid="masking_ruler"
		labelrsr="masking_label" id="gMaskingRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<Scratchpad name="scratchpad" toolid="scratchpad" id="gScratchpad" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
	
	<RefCard name="FCAT_formula_card" 
                 toolid="FCAT_formula_card"
                 refCardRsrc="FCAT_refcard_contents"
                 titleRsrc="FCAT_refcard_title"
                 scrolls="true"
                 id="gFcatFormulaCard" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
    <RefCard name="TN_formula_card" 
                 toolid="TN_formula_card"
                 refCardRsrc="TN_refcard_contents"
                 titleRsrc="TN_refcard_title"
                 scrolls="false"
                 id="gTnFormulaCard" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
             </view>
             
           
<view name="blocker" x="5" y="5" width="${760 * xscalefactorjs}" height="${450 * yscalefactorjs}" opacity="0.01">
<handler name="oninit">
	this.bringToFront();
	var elem = this.getDisplayObject();
	elem.setAttribute('id','htmlUIBlock');
</handler>
</view>

<html id="ht" name="ht" x="5" y="5" width="${760 * xscalefactorjs}" height="${450 * yscalefactorjs}" scrollbars="false" >
 	<handler name="onload">
 	this.sendToBack();
 	parent.blocker.bringToFront();
 	</handler>
 	 <handler name="oninit">
 	this.sendToBack();
 	parent.blocker.bringToFront();
 	</handler>
 </html>


<handler name="oninit">
	this.setAttribute("bgcolor", null);
	var s = "getSPTextInitial()";
	lz.Browser.loadJS(s);
</handler>

<method name="setCurrentCursor" args="cursorName">
	lz.Cursor.setCursorGlobal(cursorName);
	this.setAttribute('currentCursor', cursorName);
</method>

<method name="clearCurrentCursor">
	this.setAttribute('currentCursor', null);
</method>

<method name="clearAndRestoreCurrentCursor">
	clearCurrentCursor();
	restoreCurrentCursor();
</method>

<method name="restoreCurrentCursor">
	lz.Cursor.restoreCursor();
   	if(canvas.currentCursor != null){
    	lz.Cursor.setCursorGlobal(canvas.currentCursor);
    }
</method>

<Tooltip id="gTooltip" options="ignorelayout"/>


<!--<handler name="onclick">
var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|click";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);	
</handler>



<handler name="onmousedown">
var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|mousedown";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);
moustracker_del.register(lz.Idle,'onidle');

</handler>

<handler name="onmouseup">
<![CDATA[
var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|mouseup";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);
moustracker_del.unregisterAll();


]]>
</handler>

<method name="trackmouse" args="v">

var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|mousemove";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);
</method>


	<view width="200" height="200" bgcolor="red">
		<dragstate name="dragger"/>
		<handler name="onmousedown">dragger.apply();</handler>
		<handler name="onmouseup">dragger.remove();</handler>
	</view>-->
</canvas>
