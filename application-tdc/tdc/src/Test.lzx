<canvas width="100%" height="100%">
<include href="manipulatives/protractor/Protractor.lzx" />
<include href="manipulatives/calculator/scientificCalculator.lzx"/>
<include href="manipulatives/calculator/standardCalculator.lzx"/>
<include href="manipulatives/ruler/BaseRuler.lzx"/>
<include href="manipulatives/ruler/MaskingRuler.lzx"/>
<include href="manipulatives/scratchpad/Scratchpad.lzx"/>
<include href="manipulatives/refcard/RefCard.lzx"/>
<include href="manipulatives/PleaseWaitPopup.lzx"/>
<include href="manipulatives/Tooltip.lzx"/>

<script src="ctbmodules/controllers/utils/json.js" />

<!-- array of z order positions for manipulatives 
     the value of the array indicates the depth of the manipulative (eg 1 = on top)
     the index of the array indicates which manipulative - identified in INDEX constants below -->
<attribute name="zOrder" />	

<attribute name="NUMBER_OF_MANIPULATIVES" type="number" value="13" />
<attribute name="SCRATCHPAD_INDEX" type="number" value="0" />
<attribute name="PROTRACTOR_INDEX" type="number" value="1" />
<attribute name="STRAIGHT_EDGE_INDEX" type="number" value="2" />
<attribute name="ONEEIGHTH_INCH_RULER_INDEX" type="number" value="3" />
<attribute name="HALF_INCH_RULER_INDEX" type="number" value="4" />
<attribute name="MM_RULER_INDEX" type="number" value="5" />
<attribute name="CM_RULER_INDEX" type="number" value="6" />
<attribute name="FCAT_FORMULA_CARD_INDEX" type="number" value="7" />
<attribute name="TN_FORMULA_CARD_INDEX" type="number" value="8" />
<attribute name="STANDARD_CALCULATOR_INDEX" type="number" value="9" />
<attribute name="SCIENTIFIC_CALCULATOR_INDEX" type="number" value="10" />
<attribute name="FORMULA_CARD_INDEX" type="number" value="11" />
<attribute name="MASKING_RULER_INDEX" type="number" value="12" />

<attribute name="srcurl" value="null"/>
<attribute name="manipid" value="null"/>
<attribute name="isLoaded" type="boolean" value="false"/>
<attribute name="scratchpadtext" value="null"/>
<attribute name="freezeui" value="null"/>
<attribute name="unlockui" value="null"/>
<attribute name="showpleasewaitpopup" type="boolean" value="false"/>
<attribute name="hidepleasewaitpopup" type="boolean" value="false"/>
<attribute name="showpleasewaitpopupcontrols" type="boolean" value="false"/>
<attribute name="manipulativedata" type="boolean" value="false"/>
<attribute name="htmlGeneralManip" value="$once{new Object()}" />
<attribute name="scalefactor" value="null"/>
<attribute name="xscalefactor" value="null"/>

<attribute name="yscalefactor" value="null"/>
<attribute name="manipData" value="null"/>
<attribute name="htmlGeneralOpenManip" value="$once{new Object()}" />
<attribute name="readable" value="false" type="boolean" />
<attribute name="currentCursor" value="null" />
<attribute name="hasfontaccom" value="false" type="boolean"/>

<handler name="oninit">
	this.reset();
</handler>

<method name="reset"><![CDATA[
	this.zOrder = new Array();
	for(var i = 0; i < NUMBER_OF_MANIPULATIVES; i++){
		this.zOrder[i] = -1;
	}
]]></method>

<handler name="onhasfontaccom" args="data">
if(data == 'true'){
 this.hasfontaccom == true;
 }
else{
 this.hasfontaccom == false;
 }
</handler>
<attribute name="highlighterSel" value="false" type="boolean"/>
<attribute name="eraserSel" value="false" type="boolean"/>

<handler name="onscalefactor" args="data">		
	data = data.split('|');
	this.xscalefactor = Number(data[0]);
	this.yscalefactor = Number(data[1]);
</handler>

<handler name="onshowpleasewaitpopup">
	gPleaseWaitPopup.show();
	gPleaseWaitPopup.setAttribute('xscale',xscalefactorjs);
	gPleaseWaitPopup.setAttribute('yscale',yscalefactorjs);
</handler>

<handler name="onhidepleasewaitpopup">
	gPleaseWaitPopup.hide();
</handler>

<handler name="onshowpleasewaitpopupcontrols">
	gPleaseWaitPopup.showControls();
</handler>

<handler name="onmanipulativedata" args="data">
	//var maniObj = new Object;
	var maniObj;
	
	maniObj = getManipulativeObject('FCAT_formula_card',gFcatFormulaCard,"false");
	htmlGeneralManip['FCAT_formula_card'] = maniObj;

	maniObj = getManipulativeObject('TN_formula_card',gTnFormulaCard,"false");
	htmlGeneralManip['TN_formula_card'] = maniObj;

	maniObj = getManipulativeObject('half_inch_ruler',gHalfInchRuler,"true");
	htmlGeneralManip['half_inch_ruler'] = maniObj;

	maniObj = getManipulativeObject('oneeighth_inch_ruler',gEighthInchRuler,"true");
	htmlGeneralManip['oneeighth_inch_ruler'] = maniObj;

	maniObj = getManipulativeObject('mm_ruler',gMmRuler,"true");
	htmlGeneralManip['mm_ruler'] = maniObj;

	maniObj = getManipulativeObject('cm_ruler',gCmRuler,"true");
	htmlGeneralManip['cm_ruler'] = maniObj;

	maniObj = getManipulativeObject('protractor',gProtractor,"true");
	htmlGeneralManip['protractor'] = maniObj;

	maniObj = getManipulativeObject('scientific_calculator',gScientificCalculator,"false");
	htmlGeneralManip['scientific_calculator'] = maniObj;

	maniObj = getManipulativeObject('standard_calculator',gStandardCalculator,"false");
	htmlGeneralManip['standard_calculator'] = maniObj;

	maniObj = getManipulativeObject('straight_edge',gStraightEdge,"true");
	htmlGeneralManip['straight_edge'] = maniObj;

	maniObj = getManipulativeObject('masking_ruler',gMaskingRuler,"true");
	htmlGeneralManip['masking_ruler'] = maniObj;

	htmlGeneralManip.eid=data;
	var manip = JSON.stringify(htmlGeneralManip);
	var js = "setHtmlGeneralManip('"+manip+"')";
	lz.Browser.loadJS(js);
</handler>

<method name="getManipulativeObject" args="manipName,manipId,isruler"><![CDATA[
	var maniObj = new Object;
	maniObj.toolid = manipName;
	if(manipId.isselected == undefined || manipId.isselected == 'undefined')
		maniObj.isselected = 'undefined';
	else
		maniObj.isselected = manipId.isselected;
	maniObj.x = manipId.x.toString();
	maniObj.y = manipId.y.toString();
	if(isruler==true || isruler=='true'){
		if(manipId.rotation!=null)
			maniObj.rotation = manipId.rotation.toString();
		else
			maniObj.rotation = 'null';
		if(manipName!= 'protractor')
			maniObj.width = manipId.ruler.width.toString();
		else
			maniObj.width = manipId.width.toString();
	}else{
		maniObj.width = manipId.width.toString();
	}
	
	if(manipName == 'standard_calculator' || manipName == 'scientific_calculator'){
		maniObj.displayValue = manipId.displayValue;
		maniObj.input = manipId.input;
		if(manipId.input.indexOf(".") != -1 && manipId.input.indexOf(".") == manipId.input.length-1){
			maniObj.currentOperand = manipId.input.substr(0,manipId.input.length-1);
		}
		else{	
			maniObj.currentOperand = manipId.input;
		}
		maniObj.operators = manipId.operators;
		maniObj.operands = manipId.operands;
		maniObj.isEditing = manipId.isEditing;
		maniObj.operandSet = manipId.operandSet;
	}
	maniObj.z_order = this.zOrder[this.getIndexForTool(manipName)];
	return maniObj;
	]]>
</method>

<handler name="onfreezeui" args="data">
 this.blocker.setAttribute('visible',true);
</handler>

<handler name="onunlockui" args="data">
this.blocker.setAttribute('visible',false);
</handler>

<handler name="onsrcurl" args="arg"><![CDATA[
if (!isLoaded){
var url;
//For Previewer
if (arg.indexOf("http") != -1){
	url = arg;
}else{
	url = "http:items/"+arg+"/previewer.html";
}

this.ht.setAttribute('src', url);
this.ht.sendToBack();
canvas.setAttribute('isLoaded', true);
}
]]></handler>

<handler name="onscratchpadtext" args="arg"><![CDATA[
	gScratchpad.applyText(arg);	
]]></handler>

<handler name="onmanipData" args="data">
	this.setAttribute('htmlGeneralOpenManip',JSON.parse(data));
	openManipulative(htmlGeneralOpenManip);	
</handler>

<method name="sendToFront" args="tool"><![CDATA[
	var theZ = this.zOrder;
	if(theZ != null && typeof theZ != 'undefined'){
		var toolIndex = this.getIndexForTool(tool);
		var oldToolZOrder = this.zOrder[toolIndex];
		for(var i=0; i < this.zOrder.length; i++){
			var otherManipZOrder = this.zOrder[i];
			if(i == toolIndex){
				this.zOrder[i] = 1; // move this tool to the top
			}
			else if (otherManipZOrder != -1){
				if( (oldToolZOrder == -1) || (oldToolZOrder >= otherManipZOrder)){
					this.zOrder[i] = otherManipZOrder + 1;
				}
			}
		}
	}
]]></method>

<method name="removeManipulative" args="tool"><![CDATA[
	var theZ = this.zOrder;
	if(theZ != null && typeof theZ != 'undefined'){
		var toolIndex = this.getIndexForTool(tool);
		var oldToolZOrder = this.zOrder[toolIndex];
		if(oldToolZOrder != -1){
			for(var i=0; i < this.zOrder.length; i++){
				var otherManipZOrder = this.zOrder[i];
				if(i == toolIndex){
					this.zOrder[i] = -1; // remove this tool 
				}
				else if ((oldToolZOrder != -1) && (otherManipZOrder != -1) && (otherManipZOrder > oldToolZOrder)){
					this.zOrder[i] = otherManipZOrder - 1;
				}
			}
		}
	}
]]></method>

<method name="getIndexForTool" args="tool">
	var result = -1;
	if(tool == 'scratchpad'){
		result = SCRATCHPAD_INDEX;
	}
	else if (tool == 'protractor'){
		result = PROTRACTOR_INDEX;
	}
	else if (tool == 'straight_edge'){
		result = STRAIGHT_EDGE_INDEX;
	}
	else if (tool == 'oneeighth_inch_ruler'){
		result = ONEEIGHTH_INCH_RULER_INDEX;
	}
	else if (tool == 'half_inch_ruler'){
		result = HALF_INCH_RULER_INDEX;
	}
	else if (tool == 'mm_ruler'){
		result = MM_RULER_INDEX;
	}
	else if (tool == 'cm_ruler'){
		result = CM_RULER_INDEX;
	}
	else if (tool == 'FCAT_formula_card'){
		result = FCAT_FORMULA_CARD_INDEX;
	}
	else if (tool == 'TN_formula_card'){
		result = TN_FORMULA_CARD_INDEX;
	}
	else if (tool == 'standard_calculator'){
		result = STANDARD_CALCULATOR_INDEX;
	}
	else if (tool == 'scientific_calculator'){
		result = SCIENTIFIC_CALCULATOR_INDEX;
	}
	else if (tool == 'formula_card'){
		result = FORMULA_CARD_INDEX;
	}
	else if (tool == 'masking_ruler'){
		result = MASKING_RULER_INDEX;
	}
	return result;
</method>

<method name="arrangeAccordingToZOrder" args="openManipData"><![CDATA[
    if (!openManipData) return;
	var manips = openManipData;
	if(!manips) return;
	var maxDepth = 0;
	for(var key in manips){
		var obj = manips[key];
		var newDepth = new Number(obj['z_order']);
		if(newDepth > maxDepth){
			maxDepth = newDepth;
		}
	}
	for(var j = maxDepth; j>=0; j--){
		var manip = getManipForDepth(j, manips);
		if(manip != null && typeof manip != 'undefined'){
			manip.bringToFront();
		}
	}
	if(gScratchpad.visible){
		gScratchpad.bringToFront();
	}
]]></method>

<method name="getManipForDepth" args="depth, manips"><![CDATA[
	var result = null;
	for(var key in manips){
		var manip = manips[key];
		var manipDepth = new Number(manip['z_order']);
		if(manipDepth == depth){
			result = getInstanceForTool(key);
		}
	}
	return result;
]]></method>

<method name="getInstanceForTool" args="tool">
	var result = null;
	if(tool == 'scratchpad'){
		result = gScratchpad;
	}
	else if (tool == 'protractor'){
		result = gProtractor;
	}
	else if (tool == 'straight_edge'){
		result = gStraightEdge;
	}
	else if (tool == 'oneeighth_inch_ruler'){
		result = gEighthInchRuler;
	}
	else if (tool == 'half_inch_ruler'){
		result = gHalfInchRuler;
	}
	else if (tool == 'mm_ruler'){
		result = gMmRuler;
	}
	else if (tool == 'cm_ruler'){
		result = gCmRuler;
	}
	else if (tool == 'FCAT_formula_card'){
		result = gFcatFormulaCard;
	}
	else if (tool == 'TN_formula_card'){
		result = gTnFormulaCard;
	}
	else if (tool == 'standard_calculator'){
		result = gStandardCalculator;
	}
	else if (tool == 'scientific_calculator'){
		result = gScientificCalculator;
	}
	/*else if (tool == 'formula_card'){
		result = gFormulaCard;
	}*/
	else if (tool == 'masking_ruler'){
		result = gMaskingRuler;
	}
	return result;
</method>

<method name="openManipulative" args="openManipData"><![CDATA[
var manipObjData;

		manipObjData = openManipData['protractor'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gProtractor.setAttribute('x',Number(manipObjData.x));
			gProtractor.setAttribute('y',Number(manipObjData.y));
			gProtractor.setAttribute('width',Number(manipObjData.width));
			gProtractor.setAttribute('rotation',Number(manipObjData.rotation));
			gProtractor.setAttribute("isselected",true);
			gProtractor.show();
		}
		
		
		manipObjData = openManipData['standard_calculator'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gStandardCalculator.setAttribute('x',Number(manipObjData.x));
			gStandardCalculator.setAttribute('y',Number(manipObjData.y));
			gStandardCalculator.setAttribute('width',Number(manipObjData.width));
			gStandardCalculator.setAttribute("displayValue",manipObjData.displayValue);
			gStandardCalculator.setAttribute("input",manipObjData.input);
			gStandardCalculator.setAttribute('currentOperand',Number(manipObjData.currentOperand));
			gStandardCalculator.setAttribute("operators",manipObjData.operators);
			gStandardCalculator.setAttribute("operands",manipObjData.operands);
			gStandardCalculator.setAttribute("isEditing",manipObjData.isEditing);
			gStandardCalculator.setAttribute("operandSet",manipObjData.operandSet);
			gStandardCalculator.updateDisplay();
			gStandardCalculator.setAttribute("isselected",true);
			gStandardCalculator.show();
			}

		
		manipObjData = openManipData['scientific_calculator'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gScientificCalculator.setAttribute('x',Number(manipObjData.x));
			gScientificCalculator.setAttribute('y',Number(manipObjData.y));
			gScientificCalculator.setAttribute('width',Number(manipObjData.width));
			gScientificCalculator.setAttribute("displayValue",manipObjData.displayValue);
			gScientificCalculator.setAttribute("input",manipObjData.input);
			gScientificCalculator.setAttribute('currentOperand',Number(manipObjData.currentOperand));
			gScientificCalculator.setAttribute("operators",manipObjData.operators);
			gScientificCalculator.setAttribute("operands",manipObjData.operands);
			gScientificCalculator.setAttribute("isEditing",manipObjData.isEditing);
			gScientificCalculator.setAttribute("operandSet",manipObjData.operandSet);
			gScientificCalculator.updateDisplay();
			gScientificCalculator.setAttribute("isselected",true);
			gScientificCalculator.show();
		}
		
		
		manipObjData = openManipData['straight_edge'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gStraightEdge.setAttribute('x',Number(manipObjData.x));
			gStraightEdge.setAttribute('y',Number(manipObjData.y));
			gStraightEdge.ruler.setAttribute('width',Number(manipObjData.width));
			gStraightEdge.setAttribute('rotation',Number(manipObjData.rotation));
			gStraightEdge.setAttribute("isselected",true);
			gStraightEdge.show();
		}

		
		manipObjData = openManipData['oneeighth_inch_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gEighthInchRuler.setAttribute('x',Number(manipObjData.x));
			gEighthInchRuler.setAttribute('y',Number(manipObjData.y));
			gEighthInchRuler.ruler.setAttribute('width',Number(manipObjData.width));
			gEighthInchRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gEighthInchRuler.setAttribute("isselected",true);
			gEighthInchRuler.show();
		}
		
		
		manipObjData = openManipData['half_inch_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gHalfInchRuler.setAttribute('x',Number(manipObjData.x));
			gHalfInchRuler.setAttribute('y',Number(manipObjData.y));
			gHalfInchRuler.ruler.setAttribute('width',Number(manipObjData.width));
			gHalfInchRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gHalfInchRuler.setAttribute("isselected",true);
			gHalfInchRuler.show();
		}

		
		manipObjData = openManipData['mm_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gMmRuler.setAttribute('x',Number(manipObjData.x));
			gMmRuler.setAttribute('y',Number(manipObjData.y));
			gMmRuler.ruler.setAttribute('width',Number(manipObjData.width));
			gMmRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gMmRuler.setAttribute("isselected",true);
			gMmRuler.show();
		}

		
		manipObjData = openManipData['cm_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gCmRuler.setAttribute('x',Number(manipObjData.x));
			gCmRuler.setAttribute('y',Number(manipObjData.y));
			gCmRuler.ruler.setAttribute('width',Number(manipObjData.width));
			gCmRuler.setAttribute('rotation',Number(manipObjData.rotation));
			gCmRuler.setAttribute("isselected",true);
			gCmRuler.show();
		}

		
		manipObjData = openManipData['FCAT_formula_card'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gFcatFormulaCard.setAttribute('x',Number(manipObjData.x));
			gFcatFormulaCard.setAttribute('y',Number(manipObjData.y));
			gFcatFormulaCard.setAttribute('width',Number(manipObjData.width));
			gFcatFormulaCard.setAttribute("isselected",true);
			gFcatFormulaCard.show();
		}

		
		manipObjData = openManipData['TN_formula_card'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gTnFormulaCard.setAttribute('x',Number(manipObjData.x));
			gTnFormulaCard.setAttribute('y',Number(manipObjData.y));
			gTnFormulaCard.setAttribute('width',Number(manipObjData.width));
			gTnFormulaCard.setAttribute("isselected",true);
			gTnFormulaCard.show();
		}

		manipObjData = openManipData['masking_ruler'];
		if((manipObjData.isselected == 'true' || manipObjData.isselected == true) && manipObjData.isselected != 'undefined'){
			gMaskingRuler.setAttribute('x',Number(manipObjData.x));
			gMaskingRuler.setAttribute('y',Number(manipObjData.y));
			gMaskingRuler.ruler.setAttribute('width',Number(manipObjData.width));
			gMaskingRuler.setAttribute("isselected",true);
			gMaskingRuler.show();
		}

		this.arrangeAccordingToZOrder(openManipData);
]]>

</method>

<method name="setManipulativeSelState" args="id,status">
	var messg = id + "|"+ status;
	var s = "passManipulativeState('"+messg+"')";
	lz.Browser.loadJS(s);
</method>

<handler name="onvisible" args="arg">
	if(gScratchpad.visible){
		setFocus();
	}
</handler>
<handler name="onmanipid" args="arg">
	<![CDATA[
var accom = document.getElementById('__lz1').contentWindow.accomPkg;
var newwidth;
var newheigth;
switch(arg){

		case 'highlighter': if(this.eraserSel){
								setManipulativeSelState('eraser', 'up');
								accom.enableEraser(false);
								this.setAttribute('eraserSel',false);
							}
							if(accom.enableHighlighterArea){
								this.setAttribute('highlighterSel',false);
								accom.enableHighlighter(false);
								accom.removeHighlighterCursor();
							}else{
								if(gMaskingRuler.visible){
									gMaskingRuler.hide();
									gMaskingRuler.setAttribute("isselected",false);
								}
								this.setAttribute('highlighterSel',true);
								accom.enableHighlighter(true);
								accom.removeHighlighterCursor();	
								accom.setHighlighterCursor("../../includes/cursor_images/cursor_highliter.png");
							}
							
		break;
		case 'eraser' :	if(this.highlighterSel){
								setManipulativeSelState('highlighter', 'up');
								accom.enableHighlighter(false);
								this.setAttribute('highlighterSel',false);
							}
							if(accom.enableEraserArea){
								this.setAttribute('eraserSel',false);
								accom.enableEraser(false);
								accom.removeHighlighterCursor();
								accom.setEraserCursor("pointer");
							}else{
								if(gMaskingRuler.visible){
									gMaskingRuler.hide();
									gMaskingRuler.setAttribute("isselected",false);
								}
								this.setAttribute('eraserSel',true);
								accom.enableEraser(true);
								accom.removeHighlighterCursor();
								accom.setEraserCursor("../../includes/cursor_images/cursor_eraser.png");
							}
		break;
		case 'protractor' : if(gProtractor.visible){
								gProtractor.hide();
								gProtractor.setAttribute("isselected",false);
							}else{
								gProtractor.setAttribute("isselected",true);
								newwidth = gProtractor.width*xscalefactorjs;
								newheigth = gProtractor.height*yscalefactorjs;
								gProtractor.setAttribute('x',(this.width/2-newwidth/2));
								gProtractor.setAttribute('y',(this.height/2-newheigth/2));
								gProtractor.setAttribute('rotation',0);
								gProtractor.show();
							}
		break;
		
		case 'standard_calculator' : if(gStandardCalculator.visible){
								gStandardCalculator.hide();
								gStandardCalculator.setAttribute("isselected",false);
								gStandardCalculator.popOperator();
								//gStandardCalculator.updateDisplay();
							}else{
								gStandardCalculator.setAttribute("isselected",true);
								newwidth = gStandardCalculator.width*xscalefactorjs;
								newheigth = gStandardCalculator.height*yscalefactorjs;
								gStandardCalculator.setAttribute('x',(this.width/2-newwidth/2));
								gStandardCalculator.setAttribute('y',(this.height/2-newheigth/2));
								gStandardCalculator.show();
								gStandardCalculator.setAttribute('input','0');
								gStandardCalculator.setAttribute('currentOperand','0');
								gStandardCalculator.updateDisplay();
								
							}
		break;
		
		case 'scientific_calculator' :if(gScientificCalculator.visible){
								gScientificCalculator.hide();
								gScientificCalculator.setAttribute("isselected",false);
							}else{
								gScientificCalculator.setAttribute("isselected",true);
								newwidth = gScientificCalculator.width*xscalefactorjs;
								newheigth = gScientificCalculator.height*yscalefactorjs;
								gScientificCalculator.setAttribute('x',(this.width/2-newwidth/2));
								gScientificCalculator.setAttribute('y',(this.height/2-newheigth/2));
								gScientificCalculator.show();
							}
		break;
		

		case 'straight_edge' :if(gStraightEdge.visible){
										gStraightEdge.hide();
										gStraightEdge.setAttribute("isselected",false);
									}else{
										gStraightEdge.setAttribute("isselected",true);
										gStraightEdge.ruler.setAttribute('width',gStraightEdge.maxLength);
										newwidth = gStraightEdge.width*xscalefactorjs;
										newheigth = gStraightEdge.height*yscalefactorjs;
										gStraightEdge.setAttribute('x',(this.width/2-newwidth/2));
										gStraightEdge.setAttribute('y',(this.height/2-newheigth/2));
										gStraightEdge.setAttribute('rotation',0);
										gStraightEdge.show();
									}
				break;
		case 'oneeighth_inch_ruler' :if(gEighthInchRuler.visible){
										gEighthInchRuler.hide();
										gEighthInchRuler.setAttribute("isselected",false);
									}else{
										gEighthInchRuler.setAttribute("isselected",true);
										gEighthInchRuler.ruler.setAttribute('width',gEighthInchRuler.maxLength);
										newwidth = gEighthInchRuler.width*xscalefactorjs;
										newheigth = gEighthInchRuler.height*yscalefactorjs;
										gEighthInchRuler.setAttribute('x',(this.width/2-newwidth/2));
										gEighthInchRuler.setAttribute('y',(this.height/2-newheigth/2));
										gEighthInchRuler.setAttribute('rotation',0);
										gEighthInchRuler.show();
									}
				break;
		case 'half_inch_ruler' :if(gHalfInchRuler.visible){
										gHalfInchRuler.hide();
										gHalfInchRuler.setAttribute("isselected",false);
									}else{
										gHalfInchRuler.setAttribute("isselected",true);
										gHalfInchRuler.ruler.setAttribute('width',gHalfInchRuler.maxLength);
										newwidth = gHalfInchRuler.width*xscalefactorjs;
										newheigth = gHalfInchRuler.height*yscalefactorjs;
										gHalfInchRuler.setAttribute('x',(this.width/2-newwidth/2));
										gHalfInchRuler.setAttribute('y',(this.height/2-newheigth/2));
										gHalfInchRuler.setAttribute('rotation',0);
										gHalfInchRuler.show();
									}
				break;
		case 'mm_ruler' :if(gMmRuler.visible){
										gMmRuler.hide();
										gMmRuler.setAttribute("isselected",false);
									}else{
										gMmRuler.setAttribute("isselected",true);
										gMmRuler.ruler.setAttribute('width',gMmRuler.maxLength);
										newwidth = gMmRuler.width*xscalefactorjs;
										newheigth = gMmRuler.height*yscalefactorjs;
										gMmRuler.setAttribute('x',(this.width/2-newwidth/2));
										gMmRuler.setAttribute('y',(this.height/2-newheigth/2));
										gMmRuler.setAttribute('rotation',0);
										gMmRuler.show();
									}
				break;
		case 'cm_ruler' :if(gCmRuler.visible){
										gCmRuler.hide();
										gCmRuler.setAttribute("isselected",false);
									}else{
										gCmRuler.setAttribute("isselected",true);
										gCmRuler.ruler.setAttribute('width',gCmRuler.maxLength);
										newwidth = gCmRuler.width*xscalefactorjs;
										newheigth = gCmRuler.height*yscalefactorjs;
										gCmRuler.setAttribute('x',(this.width/2-newwidth/2));
										gCmRuler.setAttribute('y',(this.height/2-newheigth/2));
										gCmRuler.setAttribute('rotation',0);
										gCmRuler.show();
									}
				break;
				
		case 'masking_ruler' : 	if(gMaskingRuler.visible){
									gMaskingRuler.hide();
									gMaskingRuler.setAttribute("isselected",false);
								}else{
									gMaskingRuler.setAttribute("isselected",true);
									/*gMaskingRuler.ruler.setAttribute('width',gMaskingRuler.maxLength);*/
									gMaskingRuler.setAttribute('x',(canvas.width/2-gMaskingRuler.width/2));
									gMaskingRuler.setAttribute('y',(canvas.height/2-gMaskingRuler.height/2));
									gMaskingRuler.show();
								}
		break;
		
		case 'scratchpad' : 	if(gScratchpad.visible){
									gScratchpad.hide();
									gScratchpad.setAttribute("isselected",false);
								}else{
									gScratchpad.setAttribute("isselected",true);
									gScratchpad.setAttribute('x',(this.width/2-gScratchpad.width/2));
									gScratchpad.setAttribute('y',(this.height/2-gScratchpad.height/2));
									gScratchpad.show();
									resizeSP();
									//initScratchpad(this.hasfontaccom);
								}
		break;

		case 'FCAT_formula_card' : if(gFcatFormulaCard.visible){
										gFcatFormulaCard.hide();
										gFcatFormulaCard.setAttribute("isselected",false);
									}else{
										gFcatFormulaCard.setAttribute("isselected",true);
										newwidth = gFcatFormulaCard.width*xscalefactorjs;
										newheigth = gFcatFormulaCard.height*yscalefactorjs;
										gFcatFormulaCard.setAttribute('x',(this.width/2-newwidth/2));
										gFcatFormulaCard.setAttribute('y',(this.height/2-newheigth/2));
										gFcatFormulaCard.show();
									}

		break;

		case 'TN_formula_card' : if(gTnFormulaCard.visible){
										gTnFormulaCard.hide();
										gTnFormulaCard.setAttribute("isselected",false);
									} else{
										gTnFormulaCard.setAttribute("isselected",true);
										newwidth = gTnFormulaCard.width*xscalefactorjs;
										newheigth = gTnFormulaCard.height*yscalefactorjs;
										gTnFormulaCard.setAttribute('x',(this.width/2-newwidth/2));
										gTnFormulaCard.setAttribute('y',(this.height/2-newheigth/2));
										gTnFormulaCard.show();
									}


		break;

		
		default :
			gScratchpad.bringToFront();
						
		break;

}

]]>
</handler>
<!--  <view name="wrapper" x="5" y="150" width="800" height="560" bgcolor="green">
<html id="ht" name="htTag"  x="5" y="5" width="790" height="550"/>
</view>


<button name="visibleinvi" y="10" text="toggleVisiblity">
	<handler name="onclick">
		ht.setAttribute('visible' , false);
	</handler>
</button>

<button text="LISTEN_AUTO_NRS.html" y="20">
	<handler name="onclick">
	if($dhtml){
	ht.setAttribute('src', this.text);
	}else{
	ht.setAttribute('visible' , true);
	ht.setAttribute('src', 'http:audio/' + this.text);
	}
	</handler>
</button>-->

	<view name="wrapper" width="${760 * xscalefactorjs}" height="${450 * yscalefactorjs}" >
	<Protractor name="protractor" toolid="protractor" id="gProtractor" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<standardCalculator name="standard_calculator"
		toolid="standard_calculator" id="gStandardCalculator" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<scientificCalculator name="scientific_calculator"
		toolid="scientific_calculator" id="gScientificCalculator" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
	<BaseRuler name="straight_edge" toolid="straight_edge"
		labelrsr="straight_label" id="gStraightEdge" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>


	<BaseRuler name="oneeighth_inch_ruler" toolid="oneeighth_inch_ruler"
		tickmarksrsr="eighth_inch_tick_marks" labelrsr="inches_label"
		id="gEighthInchRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<BaseRuler name="half_inch_ruler" toolid="half_inch_ruler"
		tickmarksrsr="half_inch_tick_marks" labelrsr="inches_label"
		id="gHalfInchRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<BaseRuler name="mm_ruler" toolid="mm_ruler"
		tickmarksrsr="millimeter_tick_marks" labelrsr="centimeters_label"
		id="gMmRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<BaseRuler name="cm_ruler" toolid="cm_ruler"
		tickmarksrsr="centimeter_tick_marks" labelrsr="centimeters_label"
		id="gCmRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<MaskingRuler name="masking_ruler" toolid="masking_ruler"
		labelrsr="masking_label" id="gMaskingRuler" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>

	<Scratchpad name="scratchpad" toolid="scratchpad" id="gScratchpad" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
	
	<RefCard name="FCAT_formula_card" 
                 toolid="FCAT_formula_card"
                 refCardRsrc="FCAT_refcard_contents"
                 titleRsrc="FCAT_refcard_title"
                 scrolls="true"
                 id="gFcatFormulaCard" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
    <RefCard name="TN_formula_card" 
                 toolid="TN_formula_card"
                 refCardRsrc="TN_refcard_contents"
                 titleRsrc="TN_refcard_title"
                 scrolls="false"
                 id="gTnFormulaCard" xscale="$immediately{xscalefactorjs}" yscale="$immediately{yscalefactorjs}"/>
             </view>
             
           
<view name="blocker" x="5" y="5" width="${760 * xscalefactorjs}" height="${450 * yscalefactorjs}" opacity="0.01">
<handler name="oninit">
	this.bringToFront();
	var elem = this.getDisplayObject();
	elem.setAttribute('id','htmlUIBlock');
</handler>
</view>

<html id="ht" name="ht" x="5" y="5" width="${760 * xscalefactorjs}" height="${450 * yscalefactorjs}" scrollbars="false" >
 	<handler name="onload">
 	this.sendToBack();
 	parent.blocker.bringToFront();
 	</handler>
 	 <handler name="oninit">
 	this.sendToBack();
 	parent.blocker.bringToFront();
 	</handler>
 </html>


<handler name="oninit">
	this.setAttribute("bgcolor", null);
	var s = "getSPTextInitial()";
	lz.Browser.loadJS(s);
</handler>

<method name="setCurrentCursor" args="cursorName">
	lz.Cursor.setCursorGlobal(cursorName);
	this.setAttribute('currentCursor', cursorName);
</method>

<method name="clearCurrentCursor">
	this.setAttribute('currentCursor', null);
</method>

<method name="clearAndRestoreCurrentCursor">
	clearCurrentCursor();
	restoreCurrentCursor();
</method>

<method name="restoreCurrentCursor">
	lz.Cursor.restoreCursor();
   	if(canvas.currentCursor != null){
    	lz.Cursor.setCursorGlobal(canvas.currentCursor);
    }
</method>

<Tooltip id="gTooltip" options="ignorelayout"/>


<!--<handler name="onclick">
var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|click";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);	
</handler>



<handler name="onmousedown">
var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|mousedown";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);
moustracker_del.register(lz.Idle,'onidle');

</handler>

<handler name="onmouseup">
<![CDATA[
var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|mouseup";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);
moustracker_del.unregisterAll();


]]>
</handler>

<method name="trackmouse" args="v">

var coord = this.getMouse ('x') + "|"+ this.getMouse ('y')  +"|mousemove";
var s = "passCoordinates('"+coord+"')";
lz.Browser.loadJS(s);
</method>


	<view width="200" height="200" bgcolor="red">
		<dragstate name="dragger"/>
		<handler name="onmousedown">dragger.apply();</handler>
		<handler name="onmouseup">dragger.remove();</handler>
	</view>-->
</canvas>
