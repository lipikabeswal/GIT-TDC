<library>

    <include href="../BaseManipulative.lzx"/>
    <include href="protractorResources.lzx"/>

    <class name="Protractor" extends="BaseManipulative"
                resource="protractorBackground_rsrc"
                clickable="true" showhandcursor="false"
                clickregion="resource/protractorBackground.swf">

        <attribute name="xpos"/>
        <attribute name="ypos"/>

        <attribute name="rotatedel" 
                   value="$once{new LzDelegate (this, 'doRotate')}"/>


        <attribute name="dragxmin" value="null"/>
        <attribute name="dragymin" value="null"/>
        <attribute name="dragxmax" value="null"/>
        <attribute name="dragymax" value="null"/>

        <dragstate name="dragger"
                   drag_min_x="${this.dragxmin}"
                   drag_min_y="${this.dragymin}"
                   drag_max_x="${this.dragxmax}"
                   drag_max_y="${this.dragymax}">

            <attribute name="rrotation" value="$once{this.rotation * (Math.PI/180)}"/>
            <attribute name="__dragstate_ydoffset" 
                       value="$once {this.getMouse('x') * Math.sin (this.rrotation) +
                                     this.getMouse('y') * Math.cos (this.rrotation)}"/>
            <attribute name="__dragstate_xdoffset" 
                       value="$once {this.getMouse('x') * Math.cos (this.rrotation) -
                                     this.getMouse('y') * Math.sin (this.rrotation)}"/>


            <method event="onapply">
                var rotation = classroot.rotation * (Math.PI/180);
                var grabber = classroot.grabber;

                var gxstart = (grabber.x) * Math.cos (rotation) -
                                 (grabber.y + grabber.height/2) * Math.sin (rotation);
                var gystart = (grabber.x) * Math.sin (rotation) +
                                 (grabber.y + grabber.height/2) * Math.cos (rotation);

                var gxend   = (grabber.x + grabber.width) * Math.cos (rotation) -
                                 (grabber.y + grabber.height/2) * Math.sin (rotation);
                var gyend   = (grabber.x + grabber.width) * Math.sin (rotation) +
                                 (grabber.y + grabber.height/2) * Math.cos (rotation);

                //set drag max and min
                classroot.setAttribute ('dragxmin', - (Math.min (gxstart, gxend)));
                classroot.setAttribute ('dragymin', - (Math.min (gystart, gyend)));

                classroot.setAttribute ('dragxmax', 
                                        classroot.parent.width - (Math.max (gxstart, gxend)));
                classroot.setAttribute ('dragymax', 
                                        classroot.parent.height - 6  - (Math.max (gystart, gyend)));
            </method>

        </dragstate>
        
        <method event="oninit">
            this.setAttribute ('xpos', this.width/2);
            this.setAttribute ('ypos', this.height);
        </method>
		<handler name="onmousedown">
			this.bringToFront();
		</handler>

        <method event="ondata" args="data"><![CDATA[
            var hasstate = false;
            for (var i in data.attributes) {
                hasstate = true;
                break;
            }

            if (data && hasstate) {
                this.setAttribute ('rotation', data.getAttr ('rotation'));

                this.setAttribute ('x', data.getAttr ('x'));
                this.setAttribute ('y', data.getAttr ('y'));
	            // if restoring manipulative with Scratchpad open - need Scratchpad to be top window
	            if(gScratchpad.visible){
	                gScratchpad.bringToFront();
	            }
            } else {
                this.setAttribute ('rotation', 0);

                this.setAttribute ('x', (classroot.width - this.width)/2);
                this.setAttribute ('y', (classroot.height - this.height)/2);

                //save defaults in data
                if (data) {
                    data.setAttr ('rotation', this.rotation);
                    data.setAttr ('x', this.x);
                    data.setAttr ('y', this.y);
                }
            }
            
        ]]></method>


        <method name="startRotate">
            this.rotatedel.register (LzIdle, 'onidle');
            
            this.setAttribute ('xoffset', this.xpos);
            this.setAttribute ('yoffset', this.ypos);
            
            var rad = this.rotation * (Math.PI/180);
            
            var dx = Math.cos (rad) * this.xpos - Math.sin (rad) * this.ypos;
            var dy = Math.sin (rad) * this.xpos + Math.cos (rad) * this.ypos;
            
            this.setAttribute ('x', this.x + dx);
            this.setAttribute ('y', this.y + dy);                
        </method>

        <method name="endRotate">
            this.rotatedel.unregisterAll ();
            
            this.setAttribute ('xoffset', 0);
            this.setAttribute ('yoffset', 0);
            
            var rad = this.rotation * (Math.PI/180);
            
            var dx = Math.cos (rad) * this.xpos - Math.sin (rad) * this.ypos;
            var dy = Math.sin (rad) * this.xpos + Math.cos (rad) * this.ypos;
            
            this.setAttribute ('x', this.x - dx);
            this.setAttribute ('y', this.y - dy);                

            datapath.p.setAttr ('rotation', this.rotation);
            datapath.p.setAttr ('x', this.x);
            datapath.p.setAttr ('y', this.y);
        </method>

        <method name="doRotate"><![CDATA[
            var mx = parent.getMouse ('x') - this.x;
            var my = parent.getMouse ('y') - this.y;
            
            if (this.xoffset > this.width/2) {
                mx = -mx;
                my = -my;
            }

            var mousedist = Math.sqrt (mx*mx + my*my);
            var endang = Math.asin (my/mousedist) * (180/Math.PI);

            if (mx < 0) endang = 180 - endang;

            this.setRotation (endang);
        ]]></method>



        <view resource="protractorMarks_rsrc"/>

        <view name="grabber" resource="protractorHandle_rsrc" y="97" align="center" >
            <method event="onmouseover">
                gController.setCurrentCursor('cangrab_cursor');
            </method>
            <method event="onmouseout">
                gController.clearAndRestoreCurrentCursor();
            </method>
            <method event="onmousedown">
            	classroot.bringToFront();
                LzCursor.setCursorGlobal ('grabbing_cursor');
                LzCursor.lock ();
                classroot.dragger.apply ();
            </method>
            <method event="onmouseup">
                LzCursor.unlock ();
                gController.restoreCurrentCursor();
                classroot.dragger.remove ();
                
                classroot.datapath.p.setAttr ('x', classroot.x);
                classroot.datapath.p.setAttr ('y', classroot.y);
            </method>
        </view>


        <view resource="protractorRotator_rsrc" y="110" x="${classroot.width-65}"
              onmousedown="classroot.bringToFront(); classroot.startRotate (); " 
              onmouseup="classroot.endRotate()"/>
    </class>

</library>