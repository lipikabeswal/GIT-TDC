<library>

    <class name="ManipulativeButton">
        <datapath/>

        <attribute name="toolid" type="string"/>
        <attribute name="isenabled" value="false"/>
        <attribute name="isselected" value="false"/>
        <attribute name="tooltip" type="string"/>

        <attribute name="tooltipdel" value="$once{new lz.Delegate (this, 'showTooltip')}"/>

        <handler name="oninit">
            this.datapath.setXPath ('@' + this.toolid);
        </handler>

        <handler name="ondata" args="data"><![CDATA[
        	//Debug.write("MANIPULATIVE BUTTON ", data);
            this.setAttribute ('isselected', data == 'sel');
            if(data == null || data == 'disable'){
	            this.setAttribute ('isenabled', false);
	            this.setAttribute ('visible', false);
            }
            else{
	            this.setAttribute ('isenabled', true);
	            this.setAttribute ('visible', true);
            }

            this.setAttribute('frame', this.isselected ? 2 : 1);

            if (!this.isselected) {
                this.setAttribute('frame', this.isenabled  ? 1 : 3);
            }
            
        ]]></handler>

        <handler name="onmouseover"><![CDATA[
            if (!this.isselected && this.isenabled) this.setAttribute('frame', 2); 
            lz.Timer.addTimer (tooltipdel, 500);
        ]]></handler>

        <handler name="onmouseout"><![CDATA[
            if (!this.isselected && this.isenabled) this.setAttribute('frame', 1); 
            gTooltip.hideTooltip ();
            lz.Timer.removeTimer (this.tooltipdel);
        ]]></handler>

        <handler name="onclick"><![CDATA[
            if (this.isenabled) {
            var currentEid = gController.dpstudentdata.xpathQuery("current_item/item_model/@eid");
             if(gController.htmlFields.length > 0){
             	if(this.isselected == false){
                	this.setAttribute ('isselected', true);
                }else{
                	this.setAttribute ('isselected', false);
					if(gController.htmlFields.length > 0){
	                	var selManip = gController.htmlmanipStateHtml[toolid];
						if(selManip!=null && selManip!='undefined'){
		                	selManip['isselected'] = false;
						}
	                	
	                	for(var i=0;i<gController.htmlGeneralManipData.length;i++){
							if(gController.htmlGeneralManipData[i].eid == currentEid){
	                			var manip = gController.htmlGeneralManipData[i][toolid];
								if(manip!=null && manip!='undefined'){
		                			manip['isselected'] = false;
								}
							}
	                	}
					}
                }
                this.setAttribute('frame', this.isselected ? 2 : 1);

           		 if (!this.isselected) {
                	this.setAttribute('frame', this.isenabled  ? 1 : 3);
            		}
                
                var comp = gController.htmlFields[0];
                Debug.write("Manipulative button" , comp);
                comp.ref.showHideManipulative(this.toolid, this);
              }else{
                gController.setManipulativeSelState (this.toolid, 
                                                         this.isselected ? 'up' : 'sel');
                                                         
              }
               
            }
            lz.Timer.removeTimer (this.tooltipdel);
       ]]> </handler>
       
       <method name="resetState"><![CDATA[
       		Debug.write("RESET STATE: ", this.isenabled, this.isselected);
           if (this.isenabled) {
             	if(this.isselected == false){
                	this.setAttribute ('isselected', true);
                }else{
                	this.setAttribute ('isselected', false);
                }
                this.setAttribute('frame', this.isselected ? 2 : 1);

           		 if (!this.isselected) {
                	this.setAttribute('frame', this.isenabled  ? 1 : 3);
            		}
           }
       ]]></method>
       
       <method name="showManipState"><![CDATA[
       		Debug.write("RESET STATE showManipState: ", this.isenabled, this.isselected);
           if (this.isenabled && this.isselected) {
                this.setAttribute('frame', this.isselected ? 2 : 1);
           }else if (this.isenabled && !this.isselected) {
               this.setAttribute('frame', this.isenabled  ? 1 : 3);
           }
           ]]>
       </method>

        <method name="showTooltip">
            gTooltip.showTooltip (this.tooltip);
        </method>

    </class>

</library>
