<view name="magnifyingGlass" id="gMagnifyingGlass"
	x="$once{canvas.width/2 - this.width/2}" valign="middle" width="${canvas.width/4}"
	height="${canvas.height/8}" visible="false">
	<dragstate name="dragger" drag_axis="both" drag_min_x="0"
		drag_max_x="$once{canvas.width - this.width}" drag_min_y="0"
		drag_max_y="$once{canvas.height - this.height}" />
	<attribute name="bg" type="color" value="gray" />
	<attribute name="fg" type="color" value="gray" />

	<attribute name="trackDel"
		value="$once{new lz.Delegate( this , 'magnify' ) }" />
	<attribute name="lastxpos" value="0" type="number" />
	<attribute name="lastypos" value="0" type="number" />
	<attribute name="isEnabled" value="false" />

		<handler name="onwidth">
			//Debug.write("onwidth....");
			magnifyingGlass.width = canvas.width/4;
			magnifyingGlass.height = canvas.height/8;
			this.windowbg.drawMe();
			this.ratioW = this.width/(canvas.width + this.width);
			this.ratioH = this.height/(canvas.height + this.height);
			mouseMove();
		</handler>

		<handler name="onheight">
			//Debug.write("onheight....");
			magnifyingGlass.width = canvas.width/4;
			magnifyingGlass.height = canvas.height/8;
			this.windowbg.drawMe();
			this.ratioW = this.width/(canvas.width + this.width);
			this.ratioH = this.height/(canvas.height + this.height);
			mouseMove();
		</handler>

		<handler name="onvisible">
			//Debug.write("onvisible....", this.visible);
			if(this.isinited) {	
				magnifyingGlass.width = canvas.width/4;
				magnifyingGlass.height = canvas.height/8;
				this.windowbg.drawMe();
				//this.setX(canvas.width / 2 - this.width / 2);
				this.ratioW = this.width/(canvas.width + this.width);
				this.ratioH = this.height/(canvas.height + this.height);
				mouseMove();
			}
		</handler>

		<handler name="onmousedown">
			magnifyingGlass.dragger.apply();
			magnifyingGlass.magnify();
			lz.Cursor.setCursorGlobal ('grabbing_cursor');
		    lz.Cursor.lock();		
		</handler>
		
		<handler name="onmouseup">
	        magnifyingGlass.dragger.remove();
			lz.Timer.removeTimer(magnifyingGlass.trackDel);
			lz.Cursor.unlock();
	        gController.restoreCurrentCursor();
  		</handler>

	<drawview name="windowbg" width="${canvas.width/4}"
			height="${canvas.height/8}">
		 <attribute name="isready" value="false" type="boolean" />
		 
		 	<handler name="oncontext">
		            this.clear();
	            
	            var roundness = 5;
	            var thickness = 3;
	            var shadow = 4;
	
	            this.changeColor(parent.bg, parent.fg);

			  </handler>
			  
		
			<method name="drawMe">
				//Debug.write("parent width", parent.width);
				if(this.isready){
	            this.clear();
	            
	            var roundness = 5;
	            var thickness = 3;
	            var shadow = 4;
	
	            this.changeColor(parent.bg, parent.fg);
	            }
	         </method>
	
			<method name="changeColor" args="bgcolor, fgcolor">
	            var roundness = 5;
	            var thickness = 0;
				//Debug.write("changecolor", parent.width,this.height);
	            drawRoundRect (thickness, thickness, this.width, this.height, 
	                           roundness,
	                           bgcolor, fgcolor, 1);
	        </method>
	
			<method name="drawRoundRect"
				args="x0, y0, x1, y1, roundness, fill, stroke, alpha">
				if(this.isready){
		            this.beginPath();
		            this.rect(x0 , y0 , x1 , y1 , roundness);
		
		            this.closePath();
		            this.setAttribute("globalAlpha", alpha);
		
		            if (fill) {
		                this.setAttribute("fillStyle", fill);
		                this.fill();
		            }
		            if (stroke) {
		                this.setAttribute("strokeStyle", stroke);
		                this.stroke();
		            }
	            }
	        </method>
	
		<view name="magnifiedContent" x="5" y="5"
				width="${parent.width - 10}" height="${parent.height - 10}"
				bgcolor="gray" opacity="1" resource="magnifierBlank" />
		</drawview>



		<drawview name="handle" x="${parent.width - 15}" y="${parent.height - 1}"
		bgcolor="0x333333" rotation="-45" height="${parent.height}" width="20">

			<handler name="onmousedown">
				//Debug.write("startTracking2");
			    magnifyingGlass.dragger.apply();
				magnifyingGlass.magnify();
				lz.Cursor.setCursorGlobal ('grabbing_cursor');
			    lz.Cursor.lock();		
			</handler>
			
			<handler name="onmouseup">
		        magnifyingGlass.dragger.remove();
				lz.Timer.removeTimer(magnifyingGlass.trackDel);
				lz.Cursor.unlock();
		        gController.restoreCurrentCursor();
	  		</handler>
		</drawview>

	<method name="setUpGlass">
		 this.setAttribute("x",canvas.width/2 - this.width/2);
		 this.setAttribute("valign",'middle');
		 this.setAttribute("visible", true);	
	</method>

	<method name="hideGlass">
		this.setAttribute("visible", false);
	</method>

	<method name="showGlass">
		this.setAttribute("visible", true);
		lz.FlashUtils.show(canvas.titleView,this.windowbg.magnifiedContent);
		lz.FlashUtils.doMouseMove(this.x,this.y,this.ratioW,this.ratioH);	
	</method>

	<method name="magnify">
		mouseMove();
		lz.Timer.resetTimer(trackDel, 10); 
	</method>
	
	<method name="mouseMove">
            <![CDATA[
				lz.FlashUtils.doMouseMove(this.x,this.y,this.ratioW,this.ratioH);		
            ]]>
	</method>

</view>

