<library>
 	
	<include href="scrolledittext.lzx" />
	<include href="ScratchpadWindow.lzx" />

    <class name="Scratchpad" 
           extends="ScratchpadWindow"
           datapath="dsstudentdata:/testing_client_model/current_item/item_model/manipulatives/global"           
           visible="${gController.scratchpadOpen}"
           height="$once{this.DEFAULT_HEIGHT}"   
		   width="$once{this.DEFAULT_WIDTH}" 
		   x="$once{this.DEFAULT_X}"
		   y="$once{this.DEFAULT_Y}"
		   title="Scratchpad"
		   resizable="true" 
		   closeable="true"
		   bgcolor="${Number(gController.answerBgColor)}"
		   fontsize="12"
		   minwidth="130"
		   minheight="130"
		   initstage="defer"
		   focustrap="true">

		<attribute name="DEFAULT_HEIGHT" type="number" value="227" />
		<attribute name="DEFAULT_WIDTH" type="number" value="400" />
		<attribute name="DEFAULT_X" type="number" value="200" />
		<attribute name="DEFAULT_Y" type="number" value="113" />
        <attribute name="toolid" type="string"/>
        <attribute name="toolstate" value="$once{new lz.datapointer ()}"/>
        <attribute name="scratchpadHasFocus" type="boolean" value="false"/>
        <attribute name="scratchpadJustLostFocus" value="false" />
        <attribute name="scrollPosition" value="$once{new Array()}"/>
        <attribute name="calledFromHtml" type="boolean" value="false"/>
		<attribute name="characterLimit" type="number" value="10000" />
		<attribute name="isTestInterrupted" type="boolean" value="false"/>
        <handler name="onmousedown">
        	this.bringToFront();
        	this.sp.inp.setAttribute('selectable',false);
            lz.Cursor.setCursorGlobal ('grabbing_cursor');
            lz.Cursor.lock ();
        </handler>

		<handler name="onmouseup" reference="lz.GlobalMouse" args="who"><![CDATA[
			if(who){
				if(lz.Focus.getFocus() == sp.inp){  // user may have changed selection using mouse
						this.sp.storeSelection();
					}
				if (who == this){
						this.sp.inp.setAttribute('selectable',true);
		            	lz.Cursor.unlock ();
		            	gController.restoreCurrentCursor();
		            	restoreFocusAndCursor();
					}
					
				if(who instanceof lz.basescrollarrow || who instanceof lz.basescrollbar){
					//Debug.write("who", who);
					//restoreFocusAndCursor();
				}
				if (who == gPauseButton || who == gStopButton || who == gFinishTestButton ){
					if(gScratchpad.visible){
						gController.setAttribute("focusOnScratchpad", true);
					}
				}
				}
		]]></handler>
		
		<handler name="onmousedown" reference="gItemInterface">
			/*if(gController.scratchpadOpen){
				if(gScratchpad.sp.inp.getTextHeight() > gScratchpad.sp.height) {
					gScratchpad.sp.inp.setAttribute("scroll",gScratchpad.sp.inp.maxscroll);
				}
			}*/
		</handler>		

		<method name="isScratchpadSubcomponent" args="who">
			var ancestor = _getAncestor(who);
			var parentalUnit = typeof (who.parent) == "undefined" ? null : who.parent;
			return (parentalUnit == gScratchpad || ancestor == gScratchpad);
		</method>
		
		<!--  eliminate annoying Debug warnings -->
		<method name="_getAncestor" args="who">
			var result = null;
			if(typeof (who.parent) != "undefined"){
				if(typeof (who.parent.parent) != "undefined"){
					if(typeof (who.parent.parent.parent) != "undefined"){
						if(typeof (who.parent.parent.parent.parent) != "undefined"){
							result = who.parent.parent.parent.parent;
						}
					}
				}
			}
			return result;
		</method>
		
 		<handler name="onmouseover">
            gController.setCurrentCursor('cangrab_cursor');
        </handler>
        
        <handler name="onmouseout">
            gController.clearAndRestoreCurrentCursor();
        </handler>
        
        <method name="restoreFocusAndCursor" >
        	this.sp.inp.onfocus.sendEvent();
       		this.sp.resetTheSelection();
        	this.setAttribute("scratchpadHasFocus", true);
			gHotKeys.disableKeys();
        </method>
        
        <method name="getText">
        	return sp.getText();
        </method>
        
        <method name="read">
 	    	gReadableText.read(sp.getSelectedText(), true);
        	restoreFocusAndCursor();
        </method>
        
        <method name="setText" args="txt">
          sp.inp.onfocus.sendEvent();
          sp.inp.onblur.sendEvent();
          //sp.setAttribute('text',gController.formatXml(txt));
          sp.setAttribute('text',txt);
        </method>
        
        <handler name="oninit">
            this.toolstate.setAttribute ('rerunxpath', true);
            this.toolstate.setXPath (this.datapath.xpath + '/@' + this.toolid);
            this.datapath.setXPath (this.toolid);

        </handler>

        <handler name="onvisible"><![CDATA[
			//Debug.write("onvisible....",this.visible);
        	if(!this.calledFromHtml){
			if(this.visible){ 
 // restore defaults
				//Debug.write("onvisible..if.......",this.visible);
				this.setAttribute("height", this.DEFAULT_HEIGHT);
				this.setAttribute("width", this.DEFAULT_WIDTH);
				this.setAttribute("x", this.DEFAULT_X);
				this.setAttribute("y", this.DEFAULT_Y);
           		this.restoreFocusAndCursor();
           		
           }else{
           		gReadableText.stopReading(true);
				gScratchpad.sp.inp.onblur.sendEvent();
            }  
            }   
            
            if(gController.htmlFields.length > 0){
            	this.setAttribute('visible',false);
            }  
        ]]> </handler>
         
         <handler name="onblur" reference="sp.inp">
			//Debug.write("onblur of scratchpad********* ");
			this.setAttribute("scratchpadHasFocus", false);
			this.setAttribute("scratchpadJustLostFocus", true);
			gHotKeys.enableKeys();
         </handler>
         
         <!-- Specific to TE START-->
         <method name="hide" args="arg">
         this.setAttribute('visible', false);
         this.setAttribute('calledFromHtml',true);
         </method>
         
         <method name="show" args="arg">
         this.setAttribute('visible', true);
         this.setAttribute('x',arg.x);
         this.setAttribute('y',arg.y);         
         </method>
         <method name="resetCall">
         this.setAttribute('calledFromHtml',false);
         </method>
         
         <!-- TE END -->
	     <scrolledittextnew name="sp" 
	                             height="${immediateparent.height}" 
	                             width="${immediateparent.width}" 
	                             focusable="true">
	            	<attribute name="start" type="number" value="0" />
	            	<attribute name="end" type="number" value="0" />
	            	<attribute name="scrollPos" type="number" value="0" />					
	            <method name="init">
	            	
	                super.init();
	                this.style.setAttribute("textfieldcolor", gController.answerBgColor);
					//this.setAttribute('fontcolor',gController.answerFontColor);
					this.inp.setAttribute("fgcolor", gController.answerFontColor);
					
				 	if(gController.hasFontAccommodation){
						this.setAttribute('fontsize',18);
					}
					else{
						this.setAttribute('fontsize',12);
					}
					//this.inp.setMaxLength(10000);
	            </method>
	            
	            <method name="updateScrollText" args="a">
						this.setAttribute('text',a);						
				</method>
				
				<handler name="ontext"><![CDATA[
					var textContent = "";
					textContent = this.text.split('\n').join('~|||||||');
					//Debug.write("scratchpad text ",this.text);
					storeSelection();
					var s = "storeScratchPadText('"+textContent+"')";
					lz.Browser.loadJS(s);
				 	if(this.text.length > 10000){	
								//Debug.write("classroot.characterLimit",classroot.characterLimit);							
								textContent = this.text;
								textContent = textContent.substring(0,Number(classroot.characterLimit));
								updateScrollText(textContent);
								//Debug.write("storeScratchPadText***** ",textContent);
								var s = "storeScratchPadText('"+textContent+"')";
								lz.Browser.loadJS(s);
								
								if(gScratchpad.sp.inp.getTextHeight() > gScratchpad.sp.height) {
									gScratchpad.sp.inp.setAttribute("scroll",gScratchpad.sp.inp.maxscroll);
								}
							}
				]]></handler>
         		  
         		<handler name="onpos" reference="this.inp" args="_pos">
				  	if(typeof _pos == 'number'){
        				//this.setAttribute("scrollPos", _pos);
       			  	}
        	    </handler>
        
				<handler name="onfocus" reference="inp">
					classroot.setAttribute("scratchpadHasFocus", true);
					gHotKeys.disableKeys();
					classroot.bringToFront();
				</handler>
				
				<handler name="onblur" reference="inp">
					//Debug.write("onblur.....");	
					if(gItemInterface.visible == true || gTutorial.visible == true){
						gHotKeys.enableKeys();
					}
				</handler>
				
				<handler name="onkeyup" reference="inp">
					storeSelection();
				</handler>
				
				<method name="storeSelection">
					var pos = getSelectionPosition();
					var size = getSelectionSize();
					if(pos == -1){
						pos = 0;
					}
					if(size == -1){
						size = 0;
					}
					this.setAttribute('start', pos);
					this.setAttribute('end', pos + size);
				</method>
				
				<method name="resetTheSelection">
        			this.setSelection(this.start, this.end);
        			//this.inp.setAttribute('pos', this.scrollPos);
        			//Debug.write("RESET TEH SELECTION" , this.start, this.end, this.scrollPos,this.inp.pos);
				</method>
				
				<method name="getSelectedText">
					if(start == end){
						return getText();
					}
					else{
						return getText().substring(start, end);
					}
				</method>
	       </scrolledittextnew>
     </class>
</library>
