<!--
    Class: windowpanel
    implements an area of the screen that can be dragged or closed
    by the user, may display a text name in the top area.
-->
<library>
    <include href="ScratchpadBaseWindow.lzx" />
    
    <class name="ScratchpadWindowPanel" extends="ScratchpadBaseWindow">
        <!--- the title of a window : this string appears at the top
              of the window.  Default: none -->
        <attribute name="title" value="" type="string"/>
        <!--- If true, the window will have a close control.  Default: false -->
        <attribute name="closeable" value="false"/>
        <!--- The left inset for the window content area.  Default: 6 -->
        <attribute name="inset_left" value="6"/>
        <!--- The top inset for the window content area.  Default: 22 -->
        <attribute name="inset_top" value="22"/>
        <!--- The right inset for the window content area.  Default: 11 -->
        <attribute name="inset_right" value="11"/>
        <!--- The bottom inset for the window content area.  Default: 20 -->
        <attribute name="inset_bottom" value="20"/>
        <!--- The top inset for the window title area.  Default: 6 -->
        <attribute name="titlearea_inset_top" value="6"/>
        <attribute name="defaultplacement" value="content" type="string"/>

        <state applied="${parent._usecontentwidth}">
            <attribute name="width" value="${this.content.width + this.inset_left + this.inset_right}" />
        </state>
        <state applied="${parent._usecontentheight}">
            <attribute name="height" value="${this.content.height + this.inset_top + this.inset_bottom}" />
        </state>

        <!--- @keywords private -->
        <method name="setBGColor" args="c">
            this.bgcolor = c;
            // don't actually set the bgcolor, since 'content' view
            // sets its bgcolor from this attribute
            if (this['onbgcolor']) {
                this.onbgcolor.sendEvent(c);
            }
        </method>

        <!--- @keywords private -->
        <attribute name="_usecontentwidth" value="true"/>
        <!--- @keywords private -->
        <attribute name="_usecontentheight" value="true"/>

        <attribute name="bgcolor" setter="this._setBGColor( bgcolor );" />
        <!--- @keywords private -->
        <attribute name="_bgcolor"  value="null" />

        <!--- @keywords private -->
        <method name="construct" args="p,args"> <![CDATA[
            super.construct(p, args);
            // need to set these attributes before subviews are created
            // otherwise they will calculate width/height incorrectly
            setAttribute('_usecontentwidth', !hassetwidth);
            setAttribute('_usecontentheight', !hassetheight);
        ]]> </method>

        <!--- @keywords private -->
        <method name="init"> <![CDATA[
            super.init();
            // need to check minwidth/height after subviews have inited
            // just in case the window is sized by content, yet too small
            if (this.width <  this.minwidth ) {
                if ( !this._usecontentwidth ){
                    Debug.write( "requested width smaller than minwidth," +
                                 " ignored: "+ this);
                }
                this.setWidth(this.minwidth);
                setAttribute('_usecontentwidth', false );
            }
            if (this.height <  this.minheight && !this._usecontentheight ) {
                if ( !this._usecontentheight ){
                    Debug.write( "requested height smaller than minheight," +
                                " ignored: "+ this );
                }
                this.setHeight(this.minheight);
                setAttribute('_usecontentheight', false );
            }
        ]]> </method>

        <resizeview_x name="top" width="100%" frame="${parent.state}"
            left="window_TL_rsc" middle="window_TM_rsc" right="window_TR_rsc">
        </resizeview_x>

        <resizeview_x name="middle" width="100%" frame="${parent.state}"
            left="window_ML_rsc" middle="window_MM_rsc" right="window_MR_rsc">
        </resizeview_x>

        <resizeview_x name="bottom" width="100%" frame="${parent.state}"
            left="window_BL_rsc" middle="window_BM_rsc" right="window_BR_rsc">
        </resizeview_x>

		<view name="hider" bgcolor="0xDCDCDC" oninit="this.sendToBack();" 
			  x="5" y="5"
		      height="${parent.top.height + parent.middle.height + parent.bottom.height - 15}" 
		      width="${parent.top.width - 15}">
		</view>
		
        <stableborderlayout axis="y"/>

        <!-- stableborderlayout only acts on the first 3 views -->

        <view name="title_area"
            x="${classroot.inset_left}" 
            y="${classroot.titlearea_inset_top}"
            width="${classroot.width-classroot.inset_left-classroot.inset_right}">
            <view name="gripper_left" 
                  y="1" 
                  resource="window_gripper_rsc" 
                  width="${((parent.width - parent.title.width - parent.controls.width)/2) - 5}"
                  clip="true" 
                  frame="${classroot.state}" 
                  x="0"/>
            <text name="title" 
                  fgcolor="${classroot['style'] ? classroot.style.textcolor : null}"
                  opacity="${classroot.state == 2 ? .7 : 1}"
                  text="${classroot.title}" 
                  y="-3" 
                  x="${parent.gripper_left.x + parent.gripper_left.width + 5 &lt; 0 ? 0 : parent.gripper_left.x + parent.gripper_left.width + 5 }"
                  resize="true"/>
            <view name="gripper_right" 
                  y="1" 
                  resource="window_gripper_rsc"
                  clip="true" 
                  x="${parent.title.x + parent.title.width + 5}"
                  width="${parent.gripper_left.width - 5}"
                  frame="${classroot.state}"/>

            <view name="controls" align="right">
            	<simplelayout axis="x" spacing="5"/>
			 	<basebutton resource="read_btn" 
			 		        name="readBtn"
			 		        y="-1"
			 		        visible="${canvas.readable}">
					<handler name="onclick">
			        	gScratchpad.read();
					</handler>
				</basebutton>
                <basebutton x="2" 
                            name="close_btn" 
                            styleable="true"
                        	resource="window_closebtn_rsc">
					<handler name="onmouseover">
						gTooltip.showTooltip("Save and Close");
					</handler>
					<handler name="onmouseout">
						gTooltip.hideTooltip();
					</handler>
		 			<handler name="onmousedown">
		 				classroot.bringToFront();
		 			</handler>
					<handler name="onclick" >
						gController.setManipulativeSelState("scratchpad", "up");
		 			</handler>
				</basebutton>
           </view>

        </view>

        <view name="content" x="${parent.inset_left}" y="${parent.inset_top}"
            bgcolor="${classroot.bgcolor}" clip="true">
            <state applied="${!classroot._usecontentwidth}">
                <attribute name="width" value="${classroot.width - classroot.inset_left - classroot.inset_right}"/>
            </state>
            <state applied="${!classroot._usecontentheight}">
                <attribute name="height" value="${classroot.height - classroot.inset_bottom - classroot.inset_top}"/>
            </state>
            <!-- this is the defaultplacement view -->
        </view>

        <!--- @keywords private -->
        <method name="_applystyle" args="s">
            //setTint(this.title_area.gripper_left, color, brightness);
            //setTint(this.title_area.gripper_right, color, brightness);
            setTint(this.top, s.basecolor);
            setTint(this.middle, s.basecolor);
            setTint(this.bottom, s.basecolor);
            title_area.title.setAttribute('fgcolor', s.textcolor);
            if (this._bgcolor == null) {
                this.content.setAttribute("bgcolor", s.bgcolor);
            } else {
                this.content.setAttribute("bgcolor", this._bgcolor);
            }
        </method>

        <!--- @keywords private -->
        <method name="_setBGColor" args="color">
            this._bgcolor = color;
            if (_initcomplete) {
                this.content.setAttribute("bgcolor", color );
            }
        </method>

    </class>


</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
