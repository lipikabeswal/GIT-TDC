<library>
<include href="ExitButton.lzx"/>

<dataset name="dsscore"/>
<class name="DisplayScoresScreen">

	<datapath name="dpscore" xpath="dsscore:/student_feedback_data"/>
	<attribute name="scos" value="$once{new Array}"/>
	<attribute name="totalRecords" type="number" value="0"/>
	<!--<attribute name="gridHeight" type="number"/>
	<attribute name="gridColumnHeight" type="number"/> -->
	<attribute name="subtestCount" type="number" value="0"/>
	<attribute name="statusCount" type="number" value="0"/>
	<attribute name="totalVisitedCount" type="number" value="0"/>
	<datapointer name="dpstudentdata"
			xpath="dsstudentdata:/testing_client_model" />

	<method name="showScores" args="response"><![CDATA[
		var allScos = new Array();
		var node = LzDataNode.stringToLzData(response);
		Debug.write("feedback response*********", response);
		printBigString(response);
        dsscore.setChildNodes(new Array(node));
   		var unsortedScos = dpscore.xpathQuery('title/sco');
		if(unsortedScos!=null)
		{
			if(unsortedScos instanceof LzDataElement){
				 allScos[0] = unsortedScos;
			}
			else{ // array of LzDataElements
				for(var i=0; i<unsortedScos.length; i++){
					var sco = unsortedScos[i];  // this sco has the title, need to add the raw, max, and unscored from lms
					var seq = new Number(sco.getAttr('seq'));
					allScos[seq -1] = sco;
				}
			}
		}
		var scoIndex = 0;
		for(var i=0; i<allScos.length; i++){		
			var thisSco = allScos[i];
			if(thisSco != null){
				scos[scoIndex] = thisSco;
				scoIndex++;
			}
		}

		var scdp = new LzDatapointer();
        scdp.setPointer( dsscore );
		for(var i=1 ; i<=scoIndex; i++){
			var xp="dsscore:/student_feedback_data/title/sco[" + i + "]";
			scdp.setXPath(xp);
			if(scdp.getNodeAttribute('isSample') == 'true'){
				var scoId = scdp.getNodeAttribute('id');
				scdp.deleteNode(); 
				scdp.setXPath("dsscore:/student_feedback_data/lms/sco[@scid = '"+ scoId +"']");
				scdp.deleteNode(); 
				i--;
				scoIndex--;
			}
		}
		
		var completionCount = 0;
		var scoArray = dpscore.xpathQuery('title/sco');
		if(scoArray && scoArray instanceof Array) {
			for(var i=0; i<scoArray.length; i++){
				var sco = scoArray[i]; 
				var title = sco.getAttr('title');
				var titleArray = title.split("::");
				var completionStatus = titleArray[6];
				if(completionStatus == 'CO') {
					completionCount++;
				}
			}
		}		
		else if(scoArray && scoArray instanceof LzDataElement) { //added for practice tests
			var title = scoArray.getAttr('title');
			var titleArray = title.split("::");
			var completionStatus = titleArray[6];
			if(completionStatus == 'CO') {
				completionCount++;
			}		
		}

		this.setAttribute('statusCount',completionCount);		
		this.setAttribute('subtestCount',scoIndex);
		this.setAttribute('totalRecords',scoIndex);
		if(this.getAttribute('subtestCount') == this.getAttribute('statusCount')) {
			addScoValues();
		}
		//this.scoringGrid.settingDimension();
		]]></method>

	<method name="addScoValues"><![CDATA[
		var totalRaw = 0;
		var isRetest = 'false';
		var totalViewedCount = 0;
		var scoArr = dpscore.xpathQuery('title/sco');
		var testTitle = dpscore.xpathQuery('title/@name'); // For FT Item
		dprestart.xpathQuery('tsd[@scid ="'+restartId+'"]/@scid');
		if((gController.dptest.xpathQuery('test_title[@id="'+testTitle+'"]/raw_score')) != null){
			var FTMsg = (gController.dptest.xpathQuery('test_title[@id="'+testTitle+'"]/raw_score')).childNodes[0]; // For FT Item
		}
		var isXmlFT =  gController.dptest.xpathQuery('test_title[@id="'+testTitle+'"]/@isFT'); // For FT item
		if(scoArr && scoArr instanceof Array) {
			for(var i=0; i<scoArr.length; i++){
				var sco = scoArr[i];  
				var scoid = sco.getAttr('id');
				var title = sco.getAttr('title');
				var titleArr = title.split("::");			
				var testName = titleArr[1];
				var form = titleArr[3];
				if(testName.indexOf('Biology I')>0 || testName.indexOf('U.S. History')>0) {		
					if(form == 'Retest') {
						isRetest = 'true';
					}
				}
				var lmsXpath = "lms/sco[@scid='" + scoid + "']";
				var unscoredXpath = lmsXpath +  "/lsv/ext.core/@number_of_unscored_items";
				var coreXpath = lmsXpath + "/lsv/cmi.core";
				var coreNode = dpscore.xpathQuery(coreXpath);
				var raw = coreNode.getAttr('score.raw');
				totalRaw = Number(totalRaw) + Number(raw);
				var maxScore = coreNode.getAttr('score.max');		
				var unscoredXPath = lmsXpath + "/lsv/ext.core";
				var unscoredNode = dpscore.xpathQuery(unscoredXPath);
				var unscoredCount = unscoredNode.getAttr('number_of_unscored_items');
				var viewedCount = Number(maxScore) - Number(unscoredCount);
				totalViewedCount = Number(totalViewedCount) + Number(viewedCount);
				info.testName.setAttribute('text',testName);
				/* For FT Item*/
				if(isXmlFT && isXmlFT != null && FTMsg !=null){
					info.raw.setAttribute('text',FTMsg);
				}else{
					info.raw.setAttribute('text',totalRaw);
				}
			}
		}
		else if(scoArr && scoArr instanceof LzDataElement) { //added for practice tests
			var scoid = scoArr.getAttr('id');
			var title = scoArr.getAttr('title');
			var titleArr = title.split("::");			
			var testName = titleArr[1];
			var form = titleArr[3];
			
			/*if(testName.indexOf('Biology I')>0 || testName.indexOf('U.S. History')>0) {		
				if(form == 'Retest') {
					isRetest = 'true';
				}
			}*/
			
			var lmsXpath = "lms/sco[@scid='" + scoid + "']";
			var unscoredXpath = lmsXpath +  "/lsv/ext.core/@number_of_unscored_items";
			var coreXpath = lmsXpath + "/lsv/cmi.core";
			var coreNode = dpscore.xpathQuery(coreXpath);
			var raw = coreNode.getAttr('score.raw');
			totalRaw = Number(totalRaw) + Number(raw);
			var maxScore = coreNode.getAttr('score.max');		
			var unscoredXPath = lmsXpath + "/lsv/ext.core";
			var unscoredNode = dpscore.xpathQuery(unscoredXPath);
			var unscoredCount = unscoredNode.getAttr('number_of_unscored_items');
			var viewedCount = Number(maxScore) - Number(unscoredCount);
			totalViewedCount = Number(totalViewedCount) + Number(viewedCount);
			info.testName.setAttribute('text',testName);
			/* For FT Item*/
				if(isXmlFT && isXmlFT != null){
					info.raw.setAttribute('text',FTMsg);
				}else{
					info.raw.setAttribute('text',totalRaw);
				}

		}
		this.setAttribute('totalVisitedCount',totalViewedCount);		
		
		
	// For every test title present in xml
	var perfLevel = getPLScore(totalRaw,form,testTitle);
		if(perfLevel == null || perfLevel == ""){
			//Debug.write("perfLevel :",perfLevel);
			info.perfLevelLabel.setAttribute('visible',false);
			info.perfLevel.setAttribute('visible',false);
		}else{
			info.perfLevel.setAttribute('text',perfLevel);
		}
		
		/* if(testTitle.indexOf('Geometry')>0 || testTitle.indexOf('Algebra I')>0 || testTitle.indexOf('Algebra II')>0 || isRetest=='true') {
	
			var perfLevel = getPLScore(totalRaw,form,testTitle);
			if(perfLevel == null || perfLevel == "") {//for avoiding undefined perf level for practice tests
				info.perfLevelLabel.setAttribute('visible',false);
				info.perfLevel.setAttribute('visible',false);
			}
			else {
				info.perfLevel.setAttribute('text',perfLevel);
			}
		} 
		else {
			info.perfLevelLabel.setAttribute('visible',false);
			info.perfLevel.setAttribute('visible',false);
		}*/
		
	]]></method>

	<method name="getPLScore" args="raw,form,testTitle"><![CDATA[
		Debug.write("raw,form,testTitle : ",raw," : ",form," : ",testTitle);
		var PerfLevel = "";
		//For tests with multiple form, will have the same range of raw score - proficiency level combinations.
		//var test_title = dptest.xpathQuery('test_title');
		//var test_idVal = gController.dptest.xpathQuery("test_title[@id='"+testTitle+"']");
		//var test_FormVal = gController.dptest.xpathQuery("test_title[@id='"+testTitle+"']/form[@id='"+form+"']");
		var rawScoreArr = gController.dptest.xpathQuery('test_title[@id="'+testTitle+'"]/raw_score');
			/* For FT Item*/
		var isXmlFT =  gController.dptest.xpathQuery('test_title[@id="'+testTitle+'"]/@isFT');
		if(isXmlFT && isXmlFT != null){
			PerfLevel = "";
		}
		else{
			if(rawScoreArr != null){
				for(var i=0; i<rawScoreArr.length; i++){
					var score = rawScoreArr[i]; 
					var minScore = score.getAttr('minscore');
					var maxScore = score.getAttr('maxscore');
					if(raw >= minScore && raw <= maxScore){
						PerfLevel = rawScoreArr[i].childNodes[0];
						break;
					}
				}
			}
		}
		return PerfLevel;
	// Below code is no longer required as values will be read dynamically from file testScore.xml
	/* 
		var PerfLevel = "";
		if(testTitle.indexOf('Geometry')>0){//GEOMETRY
			if(form == 'EQ') {
				if(raw >=0 && raw <= 17)
					PerfLevel="Unsatisfactory";
				else if(raw >=18 && raw <=26)
					PerfLevel="Limited knowledge";
				else if(raw >=27 && raw <=42)
					PerfLevel="Proficient";
				else if(raw >=43 && raw <=55)
					PerfLevel="Advanced";
			}
			else if(form == 'Retest') {
				if(raw >=0 && raw <= 19)
					PerfLevel="Unsatisfactory";
				else if(raw >=20 && raw <=27)
					PerfLevel="Limited knowledge";
				else if(raw >=28 && raw <=42)
					PerfLevel="Proficient";
				else if(raw >=43 && raw <=55)
					PerfLevel="Advanced";
			}
			else if(form == '1') {
				if(raw >=0 && raw <= 18)
					PerfLevel="Unsatisfactory";
				else if(raw >=19 && raw <=27)
					PerfLevel="Limited knowledge";
				else if(raw >=28 && raw <=42)
					PerfLevel="Proficient";
				else if(raw >=43 && raw <=55)
					PerfLevel="Advanced";
			} 
		}else if(testTitle.indexOf('Algebra II')>0){//Algebra II
			if(form == 'EQ') {
				if(raw >=0 && raw <= 19)
					PerfLevel="Unsatisfactory";
				else if(raw >=20 && raw <=24)
					PerfLevel="Limited knowledge";
				else if(raw >=25 && raw <=40)
					PerfLevel="Proficient";
				else if(raw >=41 && raw <=55)
					PerfLevel="Advanced";
			}
			else if(form == 'Retest') {
				if(raw >=0 && raw <= 18)
					PerfLevel="Unsatisfactory";
				else if(raw >=19 && raw <=25)
					PerfLevel="Limited knowledge";
				else if(raw >=26 && raw <=40)
					PerfLevel="Proficient";
				else if(raw >=41 && raw <=55)
					PerfLevel="Advanced";
			}
			else if(form == '1') {
				if(raw >=0 && raw <= 19)
					PerfLevel="Unsatisfactory";
				else if(raw >=20 && raw <=25)
					PerfLevel="Limited knowledge";
				else if(raw >=26 && raw <=40)
					PerfLevel="Proficient";
				else if(raw >=41 && raw <=55)
					PerfLevel="Advanced";
			}
		}else if(testTitle.indexOf('Algebra I')>0){//Algebra I
			if(form == 'EQ') {
				if(raw >=0 && raw <= 19)
					PerfLevel="Unsatisfactory";
				else if(raw >=20 && raw <=26)
					PerfLevel="Limited knowledge";
				else if(raw >=27 && raw <=39)
					PerfLevel="Proficient";
				else if(raw >=40 && raw <=55)
					PerfLevel="Advanced";
			}
			else if(form == 'Retest') {
				if(raw >=0 && raw <= 19)
					PerfLevel="Unsatisfactory";
				else if(raw >=20 && raw <=25)
					PerfLevel="Limited knowledge";
				else if(raw >=26 && raw <=40)
					PerfLevel="Proficient";
				else if(raw >=41 && raw <=55)
					PerfLevel="Advanced";
			}
			else if(form == '1') {
				if(raw >=0 && raw <= 17)
					PerfLevel="Unsatisfactory";
				else if(raw >=18 && raw <=25)
					PerfLevel="Limited knowledge";
				else if(raw >=26 && raw <=41)
					PerfLevel="Proficient";
				else if(raw >=42 && raw <=55)
					PerfLevel="Advanced";
			}
		}
		else if(testTitle.indexOf('Biology I')>0){//Biology I
			if(form == 'Retest') {
				if(raw >=0 && raw <= 24)
					PerfLevel="Unsatisfactory";
				else if(raw >=25 && raw <=34)
					PerfLevel="Limited knowledge";
				else if(raw >=35 && raw <=48)
					PerfLevel="Proficient";
				else if(raw >=49 && raw <=60)
					PerfLevel="Advanced";
			}
		}else if(testTitle.indexOf('U.S. History')>0){//U.S. History
			if(form == 'Retest') {
				if(raw >=0 && raw <= 23)
					PerfLevel="Unsatisfactory";
				else if(raw >=24 && raw <=34)
					PerfLevel="Limited knowledge";
				else if(raw >=35 && raw <=46)
					PerfLevel="Proficient";
				else if(raw >=47 && raw <=60)
					PerfLevel="Advanced";
			}
		}	
		Debug.write("PerfLevel....", PerfLevel);	
		return PerfLevel;
	
	*/
	]]>
	</method>
	
	<method name="isTestValidAndCompleted"><![CDATA[
		if(this.getAttribute('subtestCount') == this.getAttribute('statusCount')) {
			this.score.setVisible(true);
			this.controls.setVisible(true);
			this.feedbackWait.setVisible(true);
			if(this.getAttribute('totalVisitedCount') < 5) {
				this.info.setVisible(true);
				info.raw.setAttribute('text','No valid attempt');
				info.perfLevel.setAttribute('text','No valid attempt');
			}
			else { 
				this.info.setVisible(true);
			}
		}
		else {
			this.info.setVisible(false);
			this.score.setVisible(false);
			this.controls.setVisible(false);
			this.feedbackWait.setVisible(false);
			gController.terminate();
		}
	]]></method>	
	
	<text name="score" x="5" y="0" fontsize="24" height="36" fgcolor="white" visible="false"> Your Test Results</text>
	<!--<grid name="scoringGrid" datapath="dsscore:/student_feedback_data/title" contentpath="sco" height="130" showhlines="true"
			showvlines="true" x="${parent.score.x}" y="${parent.score.y+parent.score.height+5}" visible="false">
		<method name="settingDimension"><![CDATA[
			classroot.setAttribute('gridHeight',parent.scoringGrid.getHeight());
			classroot.setAttribute('gridColumnHeight',parent.scoringGrid.contentArea.subTitle.getHeight()* classroot.getAttribute('totalRecords'));
			if(classroot.getAttribute('gridHeight') > classroot.getAttribute('gridColumnHeight')) {
				parent.scoringGrid.setHeight(classroot.getAttribute('gridColumnHeight')+20);
			}]]>
		</method>
		<gridcolumn name="contentArea" width="260" showheader="false">
			<view bgcolor="#B2DFEE" width="260" height="20" placement="header">
				<text>Content Area</text>
		    </view>
		    <view name="subTitle" width="260">
		    	<text width="260" datapath="@contentArea"/>
		    </view>
	    </gridcolumn>
		<gridcolumn showheader="false" width="70" resizable="false"> 
			<view bgcolor="#B2DFEE" width="70" height="20" placement="header">
		    	<text>Raw Score</text>
		    </view>
	      	<text datapath="@totalRaw"/>
	    </gridcolumn>
		<gridcolumn name="performanceLevel" showheader="false" width="135" resizable="false"> 
			<view bgcolor="#B2DFEE" width="135" height="20" placement="header">
		    	<text>Performance Level</text>
		    </view>
	      	<text datapath="@plScore"/>
	    </gridcolumn>
	</grid> -->
	<view name="info" bgcolor="white" width="450" x="5" height="120" fontsize="12" y="40" visible="false">
        <text name="testLabel" y="20" x="20" fgcolor="0x5D5D5D" fontstyle="bold" fontsize="12">Content Area:</text>
        <text name="testName"  y="20" x="120" fgcolor="black" fontstyle="bold" fontsize="12" width="350"/>
        <text name="rawScoreLabel" y="45" x="20" fgcolor="0x5D5D5D" fontstyle="bold" fontsize="12">Raw Score:</text>
        <text name="raw" y="45" x="100" fgcolor="black" fontstyle="bold" fontsize="12" width="350"/>
		<text name="perfLevelLabel" y="70" x="20" fgcolor="0x5D5D5D" fontstyle="bold" fontsize="12">Performance Level:</text>
		<text name="perfLevel" y="70" x="160" fgcolor="black" fontstyle="bold" fontsize="12" width="300"/>
    </view>
	<view name="controls" y=" 200" width="550" visible="false">
		<ExitButton x="${ parent.width - width - 15 }"
                        enabled="${ gScreens.allowclick }"> 
            <handler name="onclick">
                gController.terminate();
            </handler>
       </ExitButton> 
   	</view>
	<view name="feedbackWait" y="10" x="470" resource="feedbackWait" visible="false"/>
	

</class>
</library>