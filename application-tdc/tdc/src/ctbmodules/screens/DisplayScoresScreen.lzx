<library>
<include href="OkButton.lzx"/>

<dataset name="dsscore"/>
<class name="DisplayScoresScreen">

	<datapath name="dpscore" xpath="dsscore:/student_feedback_data"/>
	<attribute name="scos" value="$once{new Array}"/>
	<attribute name="totalRaw" type="number" value="0"/>
	<attribute name="totalRecords" type="number" value="0"/>
	<attribute name="gridHeight" type="number"/>
	<attribute name="gridColumnHeight" type="number"/>

	<method name="showScores" args="response"><![CDATA[
		var allScos = new Array();
		var node = LzDataNode.stringToLzData(response);
        dsscore.setChildNodes(new Array(node));
   		var unsortedScos = dpscore.xpathQuery('title/sco');
		if(unsortedScos!=null)
		{
			if(unsortedScos instanceof LzDataElement){
				 allScos[0] = unsortedScos;
			}
			else{ // array of LzDataElements
				for(var i=0; i<unsortedScos.length; i++){
					var sco = unsortedScos[i];  // this sco has the title, need to add the raw, max, and unscored from lms
					var seq = new Number(sco.getAttr('seq'));
					allScos[seq -1] = sco;
				}
			}
		}
		var scoIndex = 0;
		for(var i=0; i<allScos.length; i++){		
			var thisSco = allScos[i];
			if(thisSco != null){
				scos[scoIndex] = thisSco;
				scoIndex++;
			}
		}
		var scdp = new LzDatapointer();
        scdp.setPointer( dsscore );
		for(var i=1 ; i<=scoIndex; i++){
			var xp="dsscore:/student_feedback_data/title/sco[" + i + "]";
			scdp.setXPath(xp);
			if(scdp.getNodeAttribute('isSample') == 'true'){
				scdp.deleteNode();
				i--;
				scoIndex--;
			}
		} 
		this.setAttribute('totalRecords',scoIndex);
		addScoValues();
		this.scoringGrid.settingDimension();
		]]></method>

	<method name="addScoValues"><![CDATA[
		for(var i=0; i<scos.length; i++){
			var sco = scos[i];  
			var scoid = sco.getAttr('id');
			var isSample = sco.getAttr('isSample');
			var lmsXpath = "lms/sco[@scid='" + scoid + "']";
			var unscoredXpath = lmsXpath +  "/lsv/ext.core/@number_of_unscored_items";
			var coreXpath = lmsXpath + "/lsv/cmi.core";
			var coreNode = dpscore.xpathQuery(coreXpath);
			var raw = coreNode.getAttr('score.raw');
			var plScore = getPLScore(raw);
			setAttribute('totalRaw', totalRaw + new Number(raw));
			sco.setAttr('raw', raw);
			sco.setAttr('plScore', plScore);
		}
	]]></method>

	<method name="getPLScore" args="raw"><![CDATA[
		var PLScore = 0;
		if(raw >=0 && raw < 20)
			PLScore=20;
		else if(raw >=20 && raw < 40)
			PLScore=30;
		else if(raw >=40 && raw < 60)
			PLScore=50;
		else 
			PLScore=70;
		return PLScore;
	]]>
	</method>
		
	
	<text name="score" x="5" y="0" fontsize="24" height="36" fgcolor="white"> Score Sheet</text>
	<grid name="scoringGrid" datapath="dsscore:/student_feedback_data/title" contentpath="sco" height="130" showhlines="true"
			showvlines="true" x="${parent.score.x}" y="${parent.score.y+parent.score.height+5}">
		<method name="settingDimension"><![CDATA[
			classroot.setAttribute('gridHeight',parent.scoringGrid.getHeight());
			classroot.setAttribute('gridColumnHeight',parent.scoringGrid.contentArea.getHeight()* classroot.getAttribute('totalRecords'));
			if(classroot.getAttribute('gridHeight') > classroot.getAttribute('gridColumnHeight')) {
				parent.scoringGrid.setHeight(classroot.getAttribute('gridColumnHeight')+15);
			}]]>
		</method>
		<gridcolumn name="contentArea" width="270" showheader="false">
			<view bgcolor="#B2DFEE" width="270" height="20" placement="header">
				<text>Content Area</text>
		    </view>
		    <text datapath="@title"/>
	    </gridcolumn>
		<gridcolumn showheader="false" width="90" resizable="false"> 
			<view bgcolor="#B2DFEE" width="90" height="20" placement="header">
		    	<text>Raw Score</text>
		    </view>
	      	<text datapath="@raw"/>
	    </gridcolumn>
		<gridcolumn showheader="false" width="90" resizable="false"> 
			<view bgcolor="#B2DFEE" width="90" height="20" placement="header">
		    	<text>PL Score</text>
		    </view>
	      	<text datapath="@plScore"/>
	    </gridcolumn>
	</grid>

	<view name="controls" y=" 200" width="550">
		<OkButton x="${ parent.width - width - 15 }"
                        enabled="${ gScreens.allowclick }">
            <handler name="onclick">
                gController.terminate();
            </handler>
        </OkButton>
   	</view>
	<view y="10" x="470" resource="feedbackWait"/>

</class>
</library>