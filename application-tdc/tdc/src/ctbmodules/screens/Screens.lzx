<library>

    <include href="LoginScreen.lzx"/>

    <include href="LoginErrorScreen.lzx"/>

    <include href="DownloadScreen.lzx"/>

    <include href="WelcomeScreen.lzx"/>
    <include href="PauseScreen.lzx"/>
    <include href="FinishScreen.lzx"/>
    <include href="FeedbackScreen.lzx"/>

    <include href="ErrorScreen.lzx"/>
    <include href="OutOfTimeScreen.lzx"/>
    <include href="GoodbyeScreen.lzx"/>

   <include href="OptOutScreen.lzx"/>
 
    <include href="Frame.lzx"/>
	<include href="DisplayScoresScreen.lzx"/>
	<include href="TimeOutScreen.lzx"/>

    <class name="Screens" extends="Frame">

       <attribute name="onFeedbackScreen" value="false"/>
		
        <attribute name="allowclick" value="false"/>
		
        <method name="isOnFeedbackScreen">
            return onFeedbackScreen;
        </method>
        
        <method name="isOnPauseScreen"><![CDATA[
        	return (contents.ps.isinited && contents.ps.visible);
        ]]></method>
        
        <method name="clicked">
            setAttribute( 'allowclick', false );
        </method>

        <method name="resetClicked">
            setAttribute( 'allowclick', true );
        </method>


		<method name="isOnFinishScreen"><![CDATA[
			return (contents.fs.isinited && contents.fs.visible);
		]]></method>
		
			<method name="removeFinishState"><![CDATA[
			 contents.fs.setVisible (false);
		]]></method>

		<method name="isOnTimeOutScreen"><![CDATA[
			return (contents.os.isinited && contents.os.visible);
		]]></method>
		
        <method name="removeAllStates">
            setAttribute( 'allowclick', true );

            if ( contents.ls.isinited ) contents.ls.setVisible( false );

            if ( contents.les.isinited ) contents.les.setVisible( false );

            if ( contents.ds.isinited ) contents.ds.setVisible( false );

            if ( contents.es.isinited ) contents.es.setVisible( false );
            if ( contents.fs.isinited ) contents.fs.setVisible( false );
            if ( contents.fbs.isinited ) contents.fbs.setVisible( false );

            if ( contents.ps.isinited ) contents.ps.setVisible( false );
            if ( contents.os.isinited ) contents.os.setVisible( false );
            if ( contents.ws.isinited ) contents.ws.setVisible( false );
            if ( contents.gs.isinited ) contents.gs.setVisible( false );
            if ( contents.oos.isinited ) contents.oos.setVisible( false );
            
            if ( contents.ss.isinited ) contents.ss.setVisible( false );
            if ( contents.ts.isinited ) contents.ts.setVisible( false );
 

            prancingMan.remove();
            standingMan.remove();
        </method>

        <method name="showDownload" args="totalSubtests">

            removeAllStates();

            if ( !contents.ds.isinited ) contents.ds.completeInstantiation();

            contents.ds.setTotalSubtests(totalSubtests);
            contents.ds.setVisible( true );

            show();

        </method>

        

        <method name="incrementSubtestDownload" args="totalItems,totalFileParts">

        	contents.ds.incrementSubtest(totalItems, totalFileParts);

        </method>

        <method name="incrementFilePartDownload" args="totalItems">
        	contents.ds.incrementFilePart();
        </method>

        <method name="incrementItemDownload">

        	contents.ds.incrementItem();

        </method>

        

         <method name="showError" args="xml">

         Debug.write("gScreens.showError");
			gMusicPlayer.stop();
         printBigString(xml);

            removeAllStates();

            if ( !contents.es.isinited ) contents.es.completeInstantiation();

            contents.es.showError(xml);

            contents.es.setVisible( true );

            show();

        </method>

        <method name="showRestart" args="m,q,u, sn">
            removeAllStates();
            if ( !contents.ws.isinited ) contents.ws.completeInstantiation();
            prancingMan.apply();
            contents.ws.setupRestart( m, q, u, sn );
            contents.ws.setVisible( true );
            show();
        </method>
        <method name="showFinish" args="a, m">
            removeAllStates();
            if ( !contents.fs.isinited ) contents.fs.completeInstantiation();
            standingMan.apply();
            contents.fs.setStats( a, m );
            contents.fs.setVisible( true );
            show();
        </method>
        <method name="showOutOfTime" args="a, m">
            removeAllStates();
            if ( !contents.os.isinited ) contents.os.completeInstantiation();
            standingMan.apply();
            contents.os.setStats( a, m );
            contents.os.setVisible( true );
            show();
        </method>
        
        <method name="resetTextFieldColor">
            contents.ps.pw.passwordField.style.setAttribute('textfieldcolor', gController.answerBgColor);
        </method>
        
        <method name="showPause" args="sn"><![CDATA[
            removeAllStates();
            if ( !contents.ps.isinited ) contents.ps.completeInstantiation();
            standingMan.apply();
            //contents.ps.pw.passwordField.setText( '' );
            contents.ps.prompt.setText( 'Log in to resume your paused test.' );
            contents.ps.studentName.setAttribute('text', 'Hello ' + sn);
            //contents.ps.pw.passwordField.style.setAttribute('textfieldcolor', 0xFFFFFF);
            contents.ps.setVisible( true );
            if(gController.isWV==true || gController.isWV=='true')
             {
			   contents.ps.pw.wvpasswordField.setAttribute('visible',true);
			   contents.ps.pw.passwordField.setAttribute('visible',false);
			   contents.ps.pw.wvpasswordField.setText("");
			   contents.ps.pw.wvpasswordField.style.setAttribute('textfieldcolor', 0xFFFFFF);
			  // LzFocus.setFocus(contents.ps.pw.wvpasswordField);
			   contents.ps.ac.otheraccesscodeField.setAttribute('visible', true );
			   contents.ps.ac.accesscodeField.setAttribute('visible', false );
			 }
			 else
			 {
			    contents.ps.pw.wvpasswordField.setAttribute('visible',false);
			    contents.ps.pw.passwordField.setAttribute('visible',true);
			    contents.ps.pw.passwordField.setText("");
			    contents.ps.pw.passwordField.style.setAttribute('textfieldcolor', 0xFFFFFF);
			    //LzFocus.setFocus(contents.ps.pw.passwordField);
			    contents.ps.ac.accesscodeField.setAttribute('visible', true );
			    contents.ps.ac.otheraccesscodeField.setAttribute('visible', false );
			    
			 }
            show();
            if(gController.isWV==true || gController.isWV=='true')
             {
        	   //Debug.write("IN WV");
        	   LzFocus.setFocus(contents.ps.pw.wvpasswordField);
        	 }
        	 else
        	 {
        	  //Debug.write("IN OK");
        	  LzFocus.setFocus(contents.ps.pw.passwordField);
        	 }
        	
        	// for the defect 76048 
        	if(gController.refCardReff != null && gController.refCardReff !=undefined){
				gController.refCardReff.onmouseout.sendEvent();
			}
        ]]></method>
        <method name="showLogin">
			
            removeAllStates();

//            if ( !contents.ls.isinited ) contents.ls.completeInstantiation();

			contents.ls.li.loginIdField.setText("");

			//contents.ls.pw.passwordField.setText("");

			contents.ls.ac.accesscodeField.setText("");
			if(gController.productTypeVal.indexOf('LASLINKS') >= 0) {
				contents.ls.lasHelpText.setVisible(true);
			} else {
				contents.ls.lasHelpText.setVisible(false);
			}
            if(gController.isWV==true || gController.isWV=='true')
             {
			   contents.ls.pw.wvpasswordField.setAttribute('visible',true);
			   contents.ls.pw.passwordField.setAttribute('visible',false);
			   contents.ls.pw.wvpasswordField.setText("");
			   contents.ls.ac.otheraccesscodeField.setText("");
			   contents.ls.ac.otheraccesscodeField.setAttribute('visible', true );
			   contents.ls.ac.accesscodeField.setAttribute('visible', false );
			 }
			 else
			 {
			    contents.ls.pw.wvpasswordField.setAttribute('visible',false);
			    contents.ls.pw.passwordField.setAttribute('visible',true);
			    contents.ls.pw.passwordField.setText("");
			    contents.ls.ac.accesscodeField.setText("");
			    contents.ls.ac.accesscodeField.setAttribute('visible', true );
			    contents.ls.ac.otheraccesscodeField.setAttribute('visible', false );
			 }

            standingMan.apply();

            contents.ls.setVisible( true );

            show();

        </method>
        <method name="showLoginError" args="e">

            removeAllStates();

            if ( !contents.les.isinited ) contents.les.completeInstantiation();

            standingMan.apply();

            contents.les.setupError(e);

            contents.les.setVisible( true );

            show();

        </method>

        <method name="showWelcome" args="m,q,u, sn">
            removeAllStates();
            if ( !contents.ws.isinited ) contents.ws.completeInstantiation();
			standingMan.remove();
            prancingMan.apply();
            contents.ws.setupNewSubtest( m, q, u, sn );
            contents.ws.setVisible( true );
            show();
        </method>
        <method name="showContinue" args="m,q,u, sn">
            removeAllStates();
            if ( !contents.ws.isinited ) contents.ws.completeInstantiation();
            prancingMan.apply();
            contents.ws.setupContinue( m, q, u , sn);
            contents.ws.setVisible( true );
            show();
        </method>

        <method name="showFeedback" args="feedback">

            removeAllStates();

            if ( !contents.fbs.isinited ) contents.fbs.completeInstantiation();

            contents.fbs.showFeedback( feedback );

            contents.fbs.setVisible( true );
			setAttribute("onFeedbackScreen", true);
            show();

        </method>


        <method name="nextFeedback">

        	contents.fbs.next();

        </method>



		<method name="previousFeedback">

			contents.fbs.previous();

		</method>

		

        <method name="showFeedback" args="scoName, raw, max, unscored, index">

            removeAllStates();

			setAttribute("onFeedbackScreen", true);
            if ( !contents.fbs.isinited ) contents.fbs.completeInstantiation();

            contents.fbs.showFeedback( scoName, raw, max, unscored, index );

            contents.fbs.setVisible( true );

            show();

        </method>
        
        <method name="showScores" args="response">
        	removeAllStates();
        	if ( !contents.ss.isinited ) contents.ss.completeInstantiation();
			 gHotKeys.disableKeys();
            contents.ss.showScores( response );
			contents.ss.isTestValidAndCompleted();
            contents.ss.setVisible( true );
            show();
        </method>
        

        <method name="showGoodbye">

            removeAllStates();

            if ( !contents.gs.isinited ) contents.gs.completeInstantiation();
            
            contents.gs.isTimeout();
            contents.gs.setVisible( true );

            show();

        </method>
        
        <method name="showTimeout">
        	removeAllStates();

            if ( !contents.gs.isinited ) contents.gs.completeInstantiation();
            
            contents.gs.isTimeout();
            contents.gs.setVisible( true );

            show();
        </method>

		<method name="showTimeoutForInactivity">
        	removeAllStates();

            if ( !contents.ts.isinited ) contents.ts.completeInstantiation();
            contents.ts.setVisible( true );

            show();
        </method>
       <method name="showOptOut" args="sn">

            removeAllStates();

            if ( !contents.oos.isinited ) contents.oos.completeInstantiation();
			contents.oos.setStudentName(sn);
            contents.oos.setVisible( true );

            show();

        </method>

         <method name="show">
         	gItemInterface.setVisible(false);
         	gTutorial.setVisible(false);
            this.setVisible( true );
            var hasmode = LzModeManager.hasMode( this );
            Debug.write( 'show ', hasmode );
            if ( !hasmode ) {
                LzModeManager.makeModal( this );
            }
        </method>

        <method name="hide">
            this.setVisible( false );
            LzModeManager.release( this );
        </method>

        <view name="contents" options="ignorelayout"
              x="${ classroot.middle.center.x }"
              y="${ classroot.middle.y }"
              width="${ classroot.middle.center.width }"
              height="${ classroot.middle.center.height }">

            <LoginScreen   name="ls" width="100%" height="100%"
                           initstage="immediate"/>

            <LoginErrorScreen   name="les" width="100%" height="100%"
                                initstage="defer"/>

            <DownloadScreen   name="ds" width="100%" height="100%"
                              initstage="defer"/>

            <WelcomeScreen name="ws" width="100%" height="100%"
                           initstage="defer"/>
            <PauseScreen   name="ps" width="100%" height="100%"
                           initstage="defer"/>
            <FeedbackScreen  name="fbs" width="100%" height="100%"
                          initstage="defer"/>
			<DisplayScoresScreen name="ss" width="100%" height="100%"
                          initstage="defer"/>

            <FinishScreen  name="fs" width="100%" height="100%"
                           initstage="defer"/>
            <ErrorScreen   name="es" width="100%" height="100%"
                           initstage="defer"/>
            <OutOfTimeScreen name="os" width="100%" height="100%"
                             initstage="defer"/>
            <GoodbyeScreen name="gs" width="100%" height="100%"
                             initstage="defer"/>
            <OptOutScreen name="oos" width="100%" height="100%"
                             initstage="defer"/>
            <TimeOutScreen name="ts" width="100%" height="100%"
                             initstage="defer"/>
        </view>
	
        <state name="prancingMan" apply="false">
            <view resource="animations/prancingMan.swf"
                  x="-120" y="${ parent.contents.height }"/>
        </state>

        <state name="standingMan" apply="false">
            <view resource="animations/standingMan.swf"
                  x="500" y="${ parent.contents.height +50 }"/>
        </state>

    </class>

</library>
