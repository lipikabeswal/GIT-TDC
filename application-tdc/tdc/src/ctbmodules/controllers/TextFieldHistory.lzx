<library>

    <!-- canvas attribute used by JS methods in embedding page to send JSON string into OpenLaszlo app.
         This only happends when the text field has changed. -->
    <attribute name="texthistoryupdate" type="string" value="" />

    <handler name="ontexthistoryupdate">
        if (gController) {
            gController.textHistory.checkForChangeCallback( JSON.parse( texthistoryupdate ) );
            gController.textHistory.setAttribute( "locked", false );
        }
    </handler>

    <!-- Used to pass the new value for the textfield after an undo/redo action into the app. -->
    <attribute name="newtextvalue" type="string" value="" />

    <handler name="onnewtextvalue">
        if (gController) {
            var change = JSON.parse( newtextvalue );
            gController.textHistory[ change.methodName ]( change );
            gController.textHistory.setAttribute( "locked", false );
        }
    </handler>

    <!-- Used to unlock the history. Set by some functions in TextHistory.js, when no value
         needs to be passed into the history, but the history has to be unlocked. -->
    <attribute name="unlocktexthistory" type="string" value="" />

    <handler name="onunlocktexthistory">
        if (gController) {
            gController.textHistory.setAttribute( "locked", false );
            // Debug.write( "onunlocktexthistory: gController.textHistory.locked=" + gController.textHistory.locked);
        }
    </handler>


    <!-- ===============
         ==
         == TextFieldHistory
         ==
         ==  Class for managing the history data inside the application. The original
         ==  strings with diffs are stored in the TextHistory class in the HTML/JS file.
         ==  See the following classes/files as well:
         ==    * scrollrichedittext.lzx: Tracks delete/backspace and text selection for history.
         ==    * CachableMultilineAnswer.lzx: Calls initialization methods and contains buttons.
         ==
         =============== -->

    <class name="TextFieldHistory">

		<passthrough when="$as3">
            import flash.system.Capabilities;
        </passthrough>

        <!--- Object with history entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="history" value="$once{{}}" type="expression" />

        <!--- Used for measuring how long history transactions take.
              @type number
              @access public
          -->
        <attribute name="transactiontime" value="0" type="number" />

        <!--- Just for debugging the paste functionality.
              @type number
              @access public
          -->
        <attribute name="pasteStartTime" value="0" type="number" />

        <!-- value of the textfield with focus will be stored here to be able to create diff -->
        <attribute name="previousvalue" value="" type="string" />

        <!-- Reference to active textfield -->
        <attribute name="activeinput" value="null" type="expression" />

        <!-- Reference to previously active textfield -->
        <attribute name="previnput" value="null" type="expression" />

        <!--- Object with history entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="delayedCheckForChangeDel" value="$once{new lz.Delegate( this, 'checkForChange' )}" type="expression" />
        
        <!--- createHistory called after a delay
              @type Object
              @access private
          -->
        <attribute name="delayedCrtHist" value="$once{new lz.Delegate( this, 'createHistDelayed' )}" type="expression" />
        
         <!--- createHistory javascript call expression
              @type Object
              @access private
          -->
        <attribute name="createHistoryExp" value="null" type="string"/>
        

        <!--- Object with history entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="delayedSetTextcursor" value="$once{new lz.Delegate( this, 'setTextCursorPos' )}" type="expression" />

        <!--- Set to true, if there are changes which the user user can undo.
              @type boolean
              @access public
        -->
        <attribute name="locked" value="false" type="boolean" />

        <!--- Used for measuring how long the history has been locked.
              @type number
              @access public
          -->
        <attribute name="locktime" value="0" type="number" />

        <!--- Textcursor position after redo/undo.
              @type number
              @access private
        -->
        <attribute name="newCaretIndex" value="0" type="number" />

		<!--- Object with CachableMultiline instances entries for multiple textfields. Textfied id is used as index.
              @type Object
              @access private
          -->
        <attribute name="CRinstances" value="$once{{}}" type="expression" />

        <handler name="onactiveinput"><![CDATA[
            Debug.write( "TextFieldHistory#onactiveinput: activeinput=" + activeinput );
            if ( activeinput != null && this.previnput !== this.activeinput ) {
                var jsExpr = 'TextHistory.setFocus( "' + activeinput.id + '");';
                this.callToJS( jsExpr );
                this.previnput = this.activeinput;
                this.previousvalue = activeinput.getText();
            }
        ]]>
        </handler>

        <!--- Keydown handler for keycombos like Control-v, etc.
              @keywords private
        -->
        <handler name="onkeydown" reference="lz.Keys" args="k"><![CDATA[
            this.keyaction = "";
            var down = lz.Keys.downKeysArray;
            var isPaste = false;
			var ctrlVPressed = false;
            Debug.write( "onkeydown: downKeysArray=" + JSON.stringify( down ));
            if (down.length > 1) {
            	Debug.write("platform= "+Capabilities.os);
				var platform = Capabilities.os;
				if(platform.indexOf( "Linux" ) != -1 || platform.indexOf( "Mac" ) != -1){
					Debug.write("inside Linux/Mac");
					ctrlVPressed = (down[ 0 ] == 17 && Number( down[ 1 ] ) == -1) || (down[ 0 ] == -1 && Number( down[ 1 ] ) == 17);
				}else{
					ctrlVPressed = (down[ 0 ] == 17 && Number( down[ 1 ] ) == 86) || (down[ 0 ] == 86 && Number( down[ 1 ] ) == 17);
				}
				Debug.write("ctrlVPressed********* "+ctrlVPressed);
                //Debug.write( "onkeydown: down[ 0 ]=" + down[ 0 ]+ " down[ 1 ]= "+down[ 1 ]);
                if ( ctrlVPressed ) {
                    checkForChange();
					if ($debug) Debug.write( "Paste / Control-v detected: calling checkForChange() in 200ms" );
                    lz.Timer.resetTimer( delayedCheckForChangeDel, 100 );
                    lz.Keys.downKeysArray = [];
                }
            }
        ]]>
        </handler>

        <!--- Handler for lock attribute changes.
              @keywords private
        -->
        <handler name="onlocked"><![CDATA[
            if ( this.locked ) {
                this.locktime = new Date();
            } else {
                var date = new Date();
                var lockDur = date.getTime() - this.locktime.getTime();
                // Debug.error( "TextFieldHistory.onlocked: lockDur=" + lockDur );
            }
        ]]>
        </handler>

       <!--- Initializes the history for a text field. Called from the ontext event handler
             of CachableMultiLineAnswer.outer.rich.answer richtexteditarea.
             @access private
             @parameter scrollrichedittext theText: Instance of scrollrichedittext.
        -->
        <method name="initializeHistoryForText" args="theText">
            Debug.write( "TextFieldHistory.initializeHistoryForText() theText.getText=" + theText.getText() );
            // If no ID is set, set one on the text component. When the
            // history of a component is cleared, the historycleared
            // property will be set to true.
            Debug.write("typeof theText = "+typeof theText+" theText.id= "+theText.id+" theText.historycleared= "+theText.historycleared);
            if ( typeof theText == "undefined" || theText.id == null || theText.historycleared == true ) {
                if ( theText.id == null ) {
                    theText.setAttribute( 'id', theText.classroot.widget_id );
                }
                Debug.write("inside if of initializeHistoryForText"+theText);
                theText.historycleared = false;
				CRinstances[theText.id] = theText;
				this.createHistory( theText.id );
                this.setAttribute( "activeinput", theText );
                this.setAttribute( "previousvalue", theText.getText() );
            }
        </method>
        
         <!--- createHistory is called after a delay as the simultaneous calls ro clearHistory resulted in createHistory call to be lost
             @access private
        -->
        <method name="createHistDelayed">
        	this.callToJS( this.createHistoryExp );
        	lz.Timer.removeTimer(delayedCrtHist);
        </method>


        <!--- Creates a history for a text field.
              @access private
              @parameter String id: The id of the textfield.
        -->
        <method name="createHistory" args="textId"><![CDATA[
            Debug.write("TextFieldHistory.createHistory: textId=" + textId);
            Debug.write("CRinstances "+CRinstances);
            var theText = CRinstances[textId];
			Debug.write("theText "+theText);
			Debug.write("theText.id "+theText.id);
			Debug.write(" theText.text() "+theText.text);
            var jsonStr = null;
            if ( theText ) {
            	Debug.write("typeof history[ theText.id ] "+typeof history[ theText.id ]+" history[ theText.id ] "+history[ theText.id ]);
                if (typeof history[ theText.id ] == 'undefined' || history[ theText.id ] == null) {
					Debug.write("insisde if of createHistory");
                    jsonStr = JSON.stringify( theText.text );
                    this.history[ theText.id ] = {};
                    var jsExpr = "TextHistory.createHistory('"+ theText.id + "','" + theText.text + "')";
                    this.setAttribute('createHistoryExp',jsExpr);
                    Debug.write("insisde if of createHistory jsExpr = "+jsExpr);
                    //this.callToJS( jsExpr );
                    lz.Timer.resetTimer(delayedCrtHist,100);
                }
            }
        ]]>
        </method>

        <!--- Clears all history entries.
                  @access public
            -->
        <method name="clearHistory"><![CDATA[
            for (var p in history) {
                var text = global[ p ];
                if ( text ) {
                    text.historycleared = true;
                }
                history[ p ] = null;
            }
            lz.Focus.clearFocus();
            this.setAttribute( "activeinput", null );
            this.callToJS( 'TextHistory.clearHistory()' );
        ]]>
        </method>

        <!--- Sets the currently active textfield.
              @access private
              @parameter Object text: Instance of _richinternalinputtext.
        -->
        <method name="setActiveInput" args="text"><![CDATA[
             Debug.write( "setActiveInput: text=" + text );
             if ( this.activeinput !== text ) {
                  if ( this.activeinput != null ) {
                      // With multipl CR texts, there might be unsaved content
                      // for the currently activeinput.
                      this.checkForChange();
                  }
                 this.setAttribute( "activeinput", text );
             }
        ]]>
        </method>


        <!--- Checks if a the text has changed and creates a new history entry if needed.
              @access public
        -->
        <method name="checkForChange">
            Debug.write( "TextFieldHistory.checkForChange(): activeinput" + activeinput );
            var jsonStr = null;
            var jsExpr = null;
            var caretIndex = 0;
            if ( activeinput != null ) {
                 Debug.write("activeinput.getText(): |" + activeinput.getText() + "|" );
                 Debug.write("this.previousvalue:    |" + this.previousvalue + "|" );
                if ( activeinput.getText() != this.previousvalue ) {
                    this.previousvalue = activeinput.getText();
                    caretIndex = this.getCaretIndex();
                    jsonStr = JSON.stringify( activeinput.getText() )
                    jsExpr = 'TextHistory.createDiff( "' + activeinput.id + '", ' + caretIndex + ', ' + jsonStr + ');'
                    this.callToJS( jsExpr );
                } else if ( previnput !== activeinput ) {
                    jsExpr = 'TextHistory.setFocus( "' + activeinput.id + '", "checkForChange" );';
                    this.previnput = this.activeinput;
                    this.callToJS( jsExpr );
                }
            }
        </method>

        <!--- Callback method for the checkForChange method. Sets the status of the undo/redo
              button, and is used to show the duration of the total action.
              @access private
              @parameter Object status: Status object, e.g. {"canredo":false,"canundo":true,"pointer":1,"textId":"t1"}.
        -->
        <method name="checkForChangeCallback" args="status">
            this.setButtonStatus( status );
            if ( $debug ) this._showDuration();
        </method>

        <!---  a history transaction.
              @access public
          -->
        <method name="undo"><![CDATA[
        	Debug.write( "undo");
            if ( activeinput != null ) {
                var caretIndex = this.getCaretIndex();
                var jsonStr = JSON.stringify( activeinput.getText() );
                var js = 'TextHistory.undo("' + activeinput.id + '", "' + caretIndex + '", ' + jsonStr + ' );'
                this.callToJS( js );
            }
        ]]>
        </method>

        <!--- Callback method called after the TextHistory._undo() function has been processed.
              @access public
              @parameter String status: Object with history status.
          -->
        <method name="undoCallback" args="status"><![CDATA[
            this._showDuration();
            var text = CRinstances[ status.textId ];
            if ( text ) {
                this.newCaretIndex = status.caretIndex;
                text.setText( status.text );
                lz.Timer.resetTimer( delayedSetTextcursor, 200 );
                this.setButtonStatus( status );
            }
        ]]>
        </method>

        <!--- Redo a history transaction.
              @access public
          -->
        <method name="redo"><![CDATA[
            // Debug.write( "TextFieldHistory.redo: activeinput.id=" + activeinput.id );
            if ( activeinput != null ) {
                this.callToJS( 'TextHistory.redo("' + activeinput.id + '");' );
            }

        ]]>
        </method>

        <!--- Callback method called after the TextHistory._redo() function has been processed.
              @access public
              @parameter String status: Object with history status.
          -->
        <method name="redoCallback" args="status"><![CDATA[
            this._showDuration();
            var text = CRinstances[ status.textId ];
            if ( text ) {
                this.newCaretIndex = status.caretIndex;
                text.setText( status.text );
                lz.Timer.resetTimer( delayedSetTextcursor, 200 );
                this.setButtonStatus( status );
            }
        ]]>
        </method>

        <!--- Used to set the text cursor position with a slight delay to allow text to beg
              updated for the selection is set.
              @access private
        -->
        <method name="setTextCursorPos"><![CDATA[
            if ( this.activeinput ) {
                // Set the cursor position, will automatically focus the text
                this.activeinput.setSelection( newCaretIndex, newCaretIndex );
            }
        ]]></method>

         <!--- Helper method for calling JavaScript and tracking the round trip time.
               @access private
               @parameter String jsExpr: JavaScript expression to evaluate in HTML page.
         -->
        <method name="callToJS" args="jsExpr"><![CDATA[
            if ( jsExpr ) {
                this.transactiontime = new Date();
                this.setAttribute( "locked", true );
                Debug.write("callToJS jsExpr= "+jsExpr);
                lz.Browser.loadJS( jsExpr );
            }
        ]]></method>


        <!--- Used to track how long it takes to execute actions like creating a diff, undo or redo.
             @access private
          -->
        <method name="_showDuration"><![CDATA[
            var date = new Date();
            var dur = Math.ceil( date.getTime() - this.transactiontime.getTime() );
            // if ($debug) Debug.write("History transaction processing took " + dur + " ms.");
         ]]>
         </method>

         <!--- Sets the undo/redo properties on the CachableMultilineAnswer class.
               @access private
               @parameter Object status: Status object from JS callback methods.
         -->
         <method name="setButtonStatus" args="status"><![CDATA[
            // answer is an instance of CachableMultilineAnswer
            var text = CRinstances[ status.textId ];
            var answer = text.classroot;
            Debug.write("setButtonStatus = "+answer);
            answer.setAttribute( "canundo", status.canundo );
            answer.setAttribute( "canredo", status.canredo );
         ]]>
         </method>

         <!--- Returns the caret index value for the textfield
               @access private
               @return {number} Caret index position.
         -->
         <method name="getCaretIndex"><![CDATA[
             var caretIndex = 0;
             if ( typeof this.activeinput._field.caretindex != 'undefined' ) {
                 caretIndex = this.activeinput._field.caretindex;
             } else {
                 caretIndex = this.activeinput.caretindex;
             }
             return caretIndex;
         ]]></method>

    </class>

</library>
