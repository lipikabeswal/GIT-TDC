<view id="gPleaseWaitPopup"
      valign="middle"
      align="center" 
      visible="false"
      clickable="false"
      showhandcursor="false">

	<attribute name="popupHeight" type="number" value="185"/>
	<attribute name="popupWidth" type="number" value="330"/>
	<attribute name="bg" type="color" value="0xFFFFFF"/>
	<attribute name="fg" type="color" value="0xE0E0E0"/>
	<attribute name="navigateFrom"/>
	<attribute name="exitButtonStatus" type="boolean" value="false" />
	
	<!-- the default setup should always be ready as this popup can be shown at login time also -->
	<handler name="oninit">
		setup(); 
	</handler>
	
	<method name="setup" args="fm, fc, bc"><![CDATA[
//Debug.write("setup: " + this.fm + " , " + this.fc + " , " + this.bc);
		if(fc != null && fc.length > 0){
			this.setAttribute("fg", new Number(this.fc));
		}
		else{
			this.setAttribute("fg", new Number("0xE0E0E0"));
		}
		if(bc != null && bc.length > 0){
			this.setAttribute("bg", new Number(bc));
		}
		else{
			this.setAttribute("bg", new Number("0x1D4896"));
		}
		this.windowbg.drawMe();
	]]></method>
	
	<method name="hide">
	    gMaskingRuler.onmouseup.sendEvent();
		 gMagnifyingGlass.onmouseup.sendEvent();
        this.setAttribute("visible", false);
		this.contents.networkLost.inBar.barAnimator.stop();
		LzModeManager.release(this);
		recalltrackMouseMove();
		if(gController.timeoutforpause){
		    timeoutDialog.open();
			//gController.setAttribute('timeoutforpause',false);
		}
    </method>
	
    <method name="show">
    	 if(gController.timeoutforpause){
    	 	timeoutDialog.close();
    	 }
         gMaskingRuler.onmouseup.sendEvent();
	  	 gMagnifyingGlass.onmouseup.sendEvent();
        this.setAttribute("visible", true);
        this.contents.networkLost.inBar.barAnimator.doStart();
        LzModeManager.makeModal(this);
        resetControls();
        gHotKeys.disableKeys();
        gTooltip.hideTooltip();
        gController.manipulativeSelected();
        gController.removeTrackTimer();
        if(gScratchpad.visible) gScratchpad.onmouseup.sendEvent();
    </method>

    <drawview name="windowbg" width="${parent.popupWidth}" height="${parent.popupHeight}">

        <method name="drawMe">
            this.clear();
            
            var roundness = 5;
            var thickness = 3;
            var shadow = 4;

            this.changeColor(parent.bg, parent.fg);
         </method>

        <method name="changeColor" args="bgcolor, fgcolor">
            var roundness = 5;
            var thickness = 0;

            drawRoundRect (thickness, thickness, this.width, this.height, 
                           roundness,
                           bgcolor, fgcolor, 1);
        </method>

        <method name="drawRoundRect" args="x0, y0, x1, y1, roundness, fill, stroke, alpha">
			
            this.beginPath();
            this.rect(x0 , y0 , x1 , y1 , roundness);

            this.closePath();
            this.setAttribute("globalAlpha", alpha);

            if (fill) {
                this.setAttribute("fillStyle", fill);
                this.fill();
            }
            if (stroke) {
                this.setAttribute("strokeStyle", stroke);
                this.stroke();
            }

            this.setAttribute("globalAlpha", 1);
        </method>

    </drawview>

    <view name="contents" x="6" y="6"      
          width="${parent.windowbg.width - 12}" height="${parent.windowbg.height - 12}" bgcolor="0xC0C0C0"><!--97B8E2"-->
         
       <view name="pleaseWait">
          <text name="pleaseWaitHeading" 
        	  font="CTB"	
              fontsize="15" 
              fgcolor="0x1D4896"
              width="200"
              multiline="true" y="90" x="40">
				Please Wait ......         
		  </text>
		</view> 
		<view name="networkLost" x="1" y="12" stretches="both" width="250" height="55" align="center">
        	<view name="computer" x="6" y="10" resource="system_btn" stretches="both" width="45" height="55"></view>
			<view name="redcross" x="80" y="15" resource="exit_redcross" stretches="both" width="45" height="55"
			visible="false" oninit="this.bringToFront()"></view>
         	<view name="Bar"  x="50" y="38" width="14" height="5" resource="simple_bar_btn" />
			<view name="inBar"  x="${parent.Bar.x}" y="${parent.Bar.y}" width="4" height="5" resource="bar_btn">

                <animator name="barAnimator" attribute="x" from="50" to="136" motion="linear" duration="3000" repeat="9" start="false">
                    <handler name="onstop">
						this.setAttribute('x',50);
                    	if(gPleaseWaitPopup.getAttribute("visible") == true){	                         	
                      	this.doStart();
                      }
                   </handler>
               </animator>
                 
			</view>		     
		   <view name="Globe" x="157" y="10" resource="globe_btn" stretches="both" width="45" height="55"></view>  
		</view>
         
		<view name="retryingPopupMessage" visible="false">
          <text name="quitMessage" 
        	  font="CTB"	
              fontsize="9"
              fgcolor="0x000000"
              multiline="true" y="78" x="20" width="290">
	                This computer is having trouble with the test. <br/>
					Please raise your hand for a teacher or proctor to help you. <br/>
					You may finish the test on a different computer.
	      </text> 
       </view> 

		<basebutton	name="exitButton" enabled="false" resource="exit_button_rsc" x="220" y="120"  width="62" height="32" 
		stretches="both">
		<method event="onclick">
            gController.setAttribute('timeoutforpause',false);
		    gController.exitPopups();
			gController.terminate();  
			resetControls();
        </method>
		</basebutton>
   		<basebutton	name="exitButtonWV" resource="exit_button_new_rsc" x="90" y="130" width="130" height="32"
		 stretches="both" visible="false">
		<method event="onclick">
            gController.setAttribute('timeoutforpause',false);
		    gController.exitPopups();
			gController.terminate();  
			resetControls();
        </method>
		</basebutton>
	</view>
		
		<method name="showControls">
            gPleaseWaitPopup.contents.pleaseWait.setAttribute("visible", false);
	        gPleaseWaitPopup.contents.retryingPopupMessage.setAttribute("visible", true);
	            
            if(gController.isWV || gController.getAttribute('productTypeVal').indexOf('OKLAHOMA')>=0){
                gPleaseWaitPopup.contents.exitButtonWV.setAttribute("visible", true);
				//gPleaseWaitPopup.contents.exitButton.setAttribute("visible", false);
				gPleaseWaitPopup.contents.networkLost.redcross.setAttribute("visible", true);
				gPleaseWaitPopup.contents.networkLost.inBar.setAttribute("visible", false);
			}else{
				//this.exitButtonStatus = true;
				gPleaseWaitPopup.contents.exitButton.setAttribute("enabled", true);
            }            
		</method>
		<method name="resetControls">
            gPleaseWaitPopup.contents.pleaseWait.setAttribute("visible", true);
	        gPleaseWaitPopup.contents.retryingPopupMessage.setAttribute("visible", false);
	        gPleaseWaitPopup.contents.networkLost.inBar.setAttribute("visible", true);
			gPleaseWaitPopup.contents.networkLost.redcross.setAttribute("visible", false);
			gPleaseWaitPopup.contents.exitButtonWV.setAttribute("visible", false);
			
			if(gController.isWV || gController.getAttribute('productTypeVal').indexOf('OKLAHOMA')>=0){
                gPleaseWaitPopup.contents.exitButton.setAttribute("visible", false);
               
			}else{
				//this.exitButtonStatus = false;
                gPleaseWaitPopup.contents.exitButton.setAttribute("enabled", false);
                gPleaseWaitPopup.contents.exitButton.setAttribute("visible", true);
			}
		</method>
		
</view>