
<view id="gRationalePopup" 
      valign="middle"
      align="center" 
      visible="false"
      clickable="true"
      showhandcursor="false">

 	<attribute name="clickdel" value="$once{new LzDelegate(this, 'checkClick')}" />
	<attribute name="popupWidth" type="number" value="220"/>
	<attribute name="popupHeight" type="number" value="165"/>
	<attribute name="fs" type="number" value="12"/>
	<attribute name="bg" type="color" value="0xFFFFFF"/>
	<attribute name="fg" type="color" value="0x000000"/> 	
	<method name="checkClick">
		if(!this.containsPt(this.getMouse('x'), this.getMouse('y'))){
			this.hide();
		}
        else if(!this.contents.closeButton.containsPt(this.contents.closeButton.getMouse('x'),
                                                   this.contents.closeButton.getMouse('y'))){
        	readMe();
        }
	</method>
	<method name="readMe">
		if(canvas.readable){
       		gReadableText.read(gReadableText.stripHtmlTags(this.contents.rationale.text));
       	}
	</method>
	<method name="setup" args="fm, fc, bc"><![CDATA[
		if(fm != null && fm.length > 0){
			var mag = new Number(fm);
			this.setAttribute("fs", mag * 12);
			this.setAttribute("popupWidth", mag * 220);
			this.setAttribute("popupHeight", mag * 165);
		}
		if(fc != null && fc.length > 0){
			this.setAttribute("fg", new Number(fc));
		}
		if(bc != null && bc.length > 0){
			this.setAttribute("bg", new Number(bc));
		}
		this.windowbg.drawMe();
	]]></method>
	
	<method name="hide">
        this.clickdel.unregisterAll();   
        this.setAttribute("visible", false);	
   </method>
	
   <method name="show" args="txt">
		if(canvas.readable){
            this.setAttribute("showhandcursor", true);
		}
		else{        
			this.setAttribute('showhandcursor', false);
        }
        contents.rationale.setAttribute('text', ' ');
        contents.rationale.setAttribute('text', txt);
        this.clickdel.register (LzGlobalMouse, 'onmousedown');        
        this.setAttribute("visible", true);
    </method>

    <drawview name="windowbg" width="${parent.popupWidth}" height="${parent.popupHeight}">

        <method name="drawMe">
            this.clear();
            
            var roundness = 5;
            var thickness = 3;
            var shadow = 4;

            drawRoundRect (shadow, shadow, this.width + shadow, this.height + shadow, 
                           roundness,
                           gray70, null, .5);
            drawRoundRect (0, 0, this.width, this.height, 
                           roundness,
                           0xC4C4C4, 0x7195B1, 1);
 //           Debug.write("before changeColor " + parent.bg);
            this.changeColor(parent.bg);
 //           Debug.write("after changeColor");
        </method>
        
        

        <method name="changeColor" args="color">
            var roundness = 5;
            var thickness = 3;

            drawRoundRect (thickness, thickness, this.width - thickness, this.height - thickness, 
                           roundness,
                           color, 0x7195B1, 1);
        </method>

        <method name="drawRoundRect" args="x0, y0, x1, y1, roundness, fill, stroke, alpha">
            this.beginPath();
            this.moveTo(roundness + x0 , y0);
            this.lineTo(x1 - roundness, y0);
            this.quadraticCurveTo(x1, y0, x1, roundness + y0);
            this.lineTo(x1, y1 - roundness);
            this.quadraticCurveTo(x1, y1, x1 - roundness, y1 );
            this.lineTo(x0 + roundness, y1);
            this.quadraticCurveTo(x0, y1, x0, y1 - roundness);
            this.lineTo(x0, y0 + roundness);
            this.quadraticCurveTo(x0, y0, roundness, y0);
            this.closePath();


            this.setAttribute("globalAlpha", alpha);

            if (fill) {
                this.setAttribute("fillStyle", fill);
                this.fill();
            }
            if (stroke) {
                this.setAttribute("strokeStyle", stroke);
                this.stroke();
            }

            this.setAttribute("globalAlpha", 1);
        </method>

    </drawview>

    <view name="contents" x="10" y="10"
          width="${parent.windowbg.width - 20}" height="${parent.windowbg.height - 10}">
        
        <text name="rationale" 
              width="${parent.width - 20}"
              multiline="true"
              valign="middle"
              align="left"
              resize="true"
              fontsize="${parent.parent.fs}"
              fgcolor="${parent.parent.fg}"/>
	    <basebutton name="closeButton"
	                resource="footnote_close_btn" 
	                y="0" x="${parent.width - this.width}">
	        <method event="onclick">
	            parent.parent.hide();
	        </method>
	    </basebutton>
    </view>
</view>