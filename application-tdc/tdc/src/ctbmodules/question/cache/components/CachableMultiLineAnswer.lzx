<library>
    <include href="CachableComponent.lzx"/>
	<include href="lib/scrolledittext.lzx" /> 


    <!-- ===============
         ==
         == CachableMultiLineAnswer
         ==
         ==  A cachable multiLine input capable of supporting rich text input with  
         ==  a format bar containing different font styles (bold, italic and underline) and these
         ==  cut and paste (cut, copy and paste) operations.
         ==
         =============== -->

    <class name="CachableMultiLineAnswer" 
           extends="CachableComponent"
           comptype="$once{gCompTypes.WIDGET_MULTI_LINE_ANSWER}" 
           aaactive="true" 
           aasilent="false"
           clickable="true"
           showhandcursor="false"> 

        <attribute name="hasAltText" value="false"/>
		<attribute name="altText" type="string" />
		<attribute name="hasReadableText" type="boolean" value="true"/>
        
        <attribute name="lmargin" type="number" value="12"/>
        <attribute name="rmargin" type="number" value="5"/>
        <attribute name="halign" type="string" value="left"/>
        <attribute name="widget_id" value="widget10000000000" type="string"/>
        <attribute name="w_id" type="number" value="10000000000" />
        <attribute name="editTextWidth" type="number" value="100"/>
        <attribute name="isInitialText" type="boolean" value="false" />
         
         <attribute name="characterLimit" type="number" value="10000" />
         <attribute name="numCharacters" type="number" value="0" />
         <attribute name="showFormatBar" type="boolean" value="false" />
		 

         
        <!-- ===============
             = METHODS
             =============== -->
		<method name="enable">
			//Empty method to handle enable() made from controller for cr responses dont delete it.
		</method>
		
		<method name="disable">
			//Empty method to handle enable() made from controller for cr responses dont delete it.
		</method>

        <handler name="ondata" args="data"><![CDATA[
//Debug.write("cachableMulti : " + data);
            var cl = 10000;
			if (data.getAttr("char_limit")){
				this.setAttribute("showFormatBar", true);
				cl =  Number(data.getAttr("char_limit"));
			}
			else{
				this.setAttribute("showFormatBar", false);
			}
			
			
			Debug.write(this, "set characterLimit", cl);
            this.setAttribute("characterLimit", cl);
			this.outer.rich.answer.inp.setAttribute("maxlength",cl);
			Debug.write("maxlength ", outer.rich.answer.maxlength);

            // To distinguish between numerous input fields, we'll maintain an array of hashes
            // containing their widget ID and answered state (filled or empty). Additionally each
            // class also stores its widget ID to allow them to be matched up.
            if (data.getAttr("id")) {
                this.setAttribute('widget_id', data.getAttr("id"));
            	var answer = gController.getAnswerForInputWidgetId(this.widget_id);
//Debug.write("CachableMultiLineAnswer.ondata", answer, answer.length);
            	var answered = (typeof answer != "undefined" && answer.length != 0);
            	if(answered) {
            		var idPresent = this.widget_id.split("$");
            		if(idPresent.length > 1) {
						var idVal = idPresent[0];
						var idPresenceCheck = answer.split(idVal+":");
						if(idPresenceCheck.length > 1) {
							var tempAnswer = "";
							for(var k = 1; k < idPresenceCheck.length; k++) {
								tempAnswer = tempAnswer + idPresenceCheck[k];
							}
							answer = tempAnswer;
						}
            		}
            	}
                gController.addCrField({"widget_id" : this.widget_id, 
                                              "answered" : answered, "answer" : answer, "ref" : this}); 
                this.setAttribute("isInitialText", true);
                if (answered) {
                   //this.setAnswer(gController.formatXml(answer));
                   this.setAnswer(answer);
                   }
                else
                   this.setAnswer("");
            }
            
            if (data.getAttr("width")) {
                this.setAttribute('editTextWidth', Number(data.getAttr("width")));				
            }
            if(data.getAttr('acc_width') && gController.hasFontAccommodation){
//Debug.write("CachableMultiLineAnswer", "got acc_width", data.getAttr('acc_width'));
                this.setAttribute('editTextWidth', Number(data.getAttr("acc_width")));
            }
            if (data.getAttr("height")){
                this.setAttribute('height', Number(data.getAttr("height"))); 
            }
            if (data.getAttr('acc_height') && gController.hasFontAccommodation){
            	this.setAttribute('height', Number(data.getAttr("acc_height")));
            }
 			if (data.getAttr("halign")) 
                this.setAttribute("halign", data.getAttr("halign")); 
			if (data.getAttr("lmargin")){
				var lm = Number(data.getAttr("lmargin"));
				var newEditTextWidth = this.editTextWidth - lm;
				this.setAttribute('editTextWidth', newEditTextWidth);
                this.setAttribute("lmargin", lm); 
            }
			if (data.getAttr("rmargin"))
                this.setAttribute("rmargin", Number(data.getAttr("rmargin")));
            this.setAttribute("showhandcursor", false);
            if(gController.isaudio){
				gController.disableResponseArea();
			}
            doneLoading();
        ]]></handler>
        
        <handler name="onwidget_id">
			var num = this.widget_id.substring(6, this.widget_id.length);
        	this.setAttribute('w_id', new Number(num));
        </handler>
        
       <handler name="onw_id"><![CDATA[
			if(this.w_id < gController.currentCrId){
				gController.setAttribute('currentCrId', this.w_id);
				canvas.setAttribute('focusobj', this.outer.rich.answer);
			}
        ]]></handler>
        
        <method name="setAnswer" args="text">
          var currentFocus = lz.Focus.getFocus();
          this.outer.rich.answer.onfocus.sendEvent();
		  this.outer.rich.answer.inp.onfocus.sendEvent();
          this.outer.rich.answer.onblur.sendEvent();
          this.outer.rich.answer.setAttribute('text', text);
          if(currentFocus != null){
          	currentFocus.onfocus.sendEvent();
          }
        </method>

		<method name="read">
			var txt = outer.rich.answer.getSelectedText();
			if(txt.length == 0){
				txt = gReadableText.getReadableTextForCharacter(' ');
			}
			gReadableText.read(txt,false);
		</method>

		<method name="setSelectionVars">
			outer.rich.answer.setSelectionVars();
		</method>
		
		<method name="updateCharacterMeter"><![CDATA[
			//Debug.write(this, "updateCharacterMeter", this.numCharacters, this.characterLimit, this.numCharacters/this.characterLimit, this.outer.controls.meter.limit.width);
			var ratio = this.numCharacters/this.characterLimit;
			if(ratio<=1){
				this.outer.controls.meter.limit.used.setAttribute('width', this.outer.controls.meter.limit.width * (this.numCharacters/this.characterLimit));
			}
			else if(ratio>1){
				this.outer.controls.meter.limit.used.setAttribute('width', this.outer.controls.meter.limit.width * (1));
			}
		]]></method>

		
        <!-- ===============
             = VIEWS
             =============== -->

 		<simplelayout axis="x" spacing="5" />
		
			<view name="outer">
				<simplelayout axis="y" spacing="0"/>				
					 		<view name="controls" width="${parent.rich.width}" height="30" bgcolor="0xC4C4C4" 
	 		      visible="${classroot.showFormatBar}">
	 			<view align="center" name="meter" height="20" width="${parent.width - 20}">
	 				<view name="limit" width="${parent.width - 10}" height="${parent.height}" 
	 				      bgcolor="0xA7BEDF" x="5" y="5">
	 					<handler name="onwidth">
	 						classroot.updateCharacterMeter();
	 					</handler>
	 					<view name="used" width="0" height="${parent.height}" bgcolor="0x6691B4" >
	 						<drawview width="${parent.width}" 
		                          height="${parent.height}">								  
						<attribute name="isready" value="false" type="boolean" />
							<handler name="oncontext">
								this.setAttribute("isready", true);
								this.draw();
							</handler>
			             		<handler name="onwidth">
			                		this.draw();
			            		</handler>
			            		<method name="draw"><![CDATA[
									if(this.isready){
										this.clear ();
										var minX = .5;
										var endX = this.width - .5;
										if(endX < minX) endX = minX;
										this.beginPath ();
										this.moveTo (endX, .5);
										this.lineTo (endX, this.height - .5);
										this.strokeStyle = 0x000000;
										this.strokeWidth = 1;
										this.stroke();
									}
			            		]]></method>
		 					</drawview>
	 					</view>
						<drawview width="${parent.width}" 
		                          height="${parent.height}">
						<attribute name="isready" value="false" type="boolean" />
							<handler name="oncontext">
								this.setAttribute("isready", true);
								this.draw();
							</handler>
		
		             		<handler name="onwidth">
		                		this.draw();
		            		</handler>
		            		<handler name="onheight">
		                		this.draw();
		            		</handler>
		
		            		<method name="draw"><![CDATA[
								if(this.isready){
									this.clear ();
									this.beginPath ();
								
									//has to be .5 so is draws exactly inside the border of the view
									this.moveTo (.5,.5);
									this.lineTo (this.width - .5, .5);
									this.lineTo (this.width - .5, this.height - .5);
									this.lineTo (.5, this.height - .5);
									this.lineTo (.5, .5);
									this.strokeStyle = 0x000000;
									this.strokeWidth = 1;
									this.stroke();
								}
		                	]]></method>
		 				</drawview>
	 				</view>
	 			</view>
 	 		</view>
				<view name="rich" bgcolor="${Number(gController.answerBgColor)}">
				   <scrolledittext name="answer" 
									 height="${classroot.showFormatBar ? classroot.height - classroot.outer.controls.height : classroot.height }" 
									 width="${classroot.editTextWidth}" x="${classroot.lmargin}">
						<attribute name="start" type="number" value="0" />
						<attribute name="end" type="number" value="0" />
						<attribute name="isCtrl" type="boolean" value="false"/>
						<attribute name="isAlt" type="boolean" value="false"/> 
						<handler name="onmaxlength">
							Debug.write("maxlength in scrolledittext*****",this.maxlength);
						</handler>
					  <method name="init">
						 super.init();
						this.style.setAttribute("textfieldcolor", gController.answerBgColor);
						//this.setFontColor(gController.answerFontColor);
						this.inp.setAttribute("fgcolor", gController.answerFontColor);		
						if(gController.hasFontAccommodation)
								this.setAttribute('fontsize', 18);
							else
								this.setAttribute('fontsize', 12);
					  </method>
					  <handler name="onfocus">
							this.setSelection(0,0);
					  </handler>
					  <handler name="onkeydown" reference="lz.Keys" args="k"> <![CDATA[
							Debug.write("onkeydown of multiline CR********",k);
				  			if(k==17){
								Debug.write("CTrl pressed********");
				      			this.setAttribute('isCtrl', true);
				  			}else if(isCtrl
				           		&& (k!=67 && k!=86 && k!=88 && k!=4294967295)){
								Debug.write("CTrl +C, V or X pressed********");
				      			this.inp.setAttribute('enabled', false);
				  			}
				  			if(k==18) {
				  				this.setAttribute('isAlt', true);
				  			}else if(isAlt){
				      			this.inp.setAttribute('enabled',false);
				  			}
							if(k==-1){
							     this.setEnabled(true);
							}
							
						 ]]>
					 </handler>
					 
					 <handler name="onkeyup" reference="lz.Keys" args="k"><![CDATA[
						  Debug.write("onkeyup of multiline CR********",k);	
						  if(k==17){
						     this.inp.setAttribute('enabled',true);
						      this.setAttribute('isCtrl', false);
						  }
						  if(k==18){
						      this.inp.setAttribute('enabled',true);
						      this.inp.setAttribute('isAlt', false);
						  }
						Debug.write("inp.enabled********",this.inp.enabled);
					]]></handler> 					  
					  
					  
				  	<method name="updateScrollText" args="a">
				  		//Debug.write("updatescrolltext...");
						this.setAttribute('text',a);	
					</method>
		
					  <handler name="ontext"><![CDATA[
						//Debug.write("maxlength in ontext before *********",this.maxlength);
						//this.setAttribute("maxlength",Number(classroot.characterLimit));	
						//Debug.write("maxlength in ontext after *********",this.maxlength);
					  	//Debug.write("Cursor Position :",this.inp.getSelectionPosition());
                    	//Debug.write("Number of Chars :",text.length);
                   
						 if(!classroot.isInitialText){
							 if (text) {
							 	if(this.inp.getSelectionPosition()== text.length)
									if(this.inp.getTextHeight() > this.height) {
									this.inp.setAttribute("scroll",this.inp.maxscroll);
								}
								var answered = false;
								for(var i=0; (i< text.length) && !answered; i++){
									var c = text.substring(i, i+1);
									if(c != ' ' && c!= '\n' && c!= '\r'){
										answered = true;
									}
								}
								gController.updateCrField(classroot.widget_id, text, answered);
							 }
							 else {  // Field is now empty
								gController.updateCrField(classroot.widget_id, '', false);
							 }
						 }
	//Debug.write(classroot, "ontext", text.length);
						 classroot.setAttribute("numCharacters", text.length);
						 classroot.updateCharacterMeter();
						 classroot.setAttribute("isInitialText", false);
						 
						 	/*if(this.text.length > Number(classroot.characterLimit)){
								var textContent = this.text;
								textContent = textContent.substring(0,Number(classroot.characterLimit));
								updateScrollText(textContent);
							}*/
												 
						 
					   ]]></handler>
		
		<handler name="onkeydown" reference="lz.Keys" args="k"><![CDATA[
		
		/*
		if (lz.Keys.isKeyDown("control") &&
                    lz.Keys.isKeyDown("v"))
                    {
                    Debug.write("getTextHeight:",this.inp.getTextHeight(),this.inp.maxscroll);
                    Debug.write("Height:",this.height);
					if(this.inp.getTextHeight() > this.height) {
									this.inp.setAttribute("scroll",this.inp.maxscroll);
									}
                    }
         */        
                   ]]>
		</handler>
					<method name="getSelectedText">
						if(end == 0){
							return '';
						}
						else{
						
							return getText().substring(start, end);
						}
					</method>
					<method name="setSelectionVars">
						var pos = getSelectionPosition();
						var size = getSelectionSize();
						if(pos == -1 || size == -1 || size == 0){
							pos = 0;
							size = getText().length;
						}
						this.setAttribute('start', pos);
						this.setAttribute('end', pos + size);
					</method>
					
					
									 
					<method name="updateText" args="a">
						this.setAttribute('text',a);		
					</method>

				  </scrolledittext>
				  <handler name="onmouseover">
				  	classroot.setAttribute("showhandcursor",false);
				  	gController.clearAndRestoreCurrentCursor();
				  </handler>
				 </view>
			</view>

		<basebutton resource="read_btn" 
 		            name="readBtn"
 		            visible="${canvas.readable}">
			<handler name="onclick">
                classroot.read();
			</handler>
			<handler name="onmouseover">
				classroot.setSelectionVars();
			</handler>
		</basebutton>
		 <drawview options="ignorelayout" width="${classroot.editTextWidth + classroot.lmargin}" 
		                  height="${classroot.height}">
					<attribute name="isready" value="false" type="boolean" />
									  <handler name="oncontext">
										this.setAttribute("isready", true);
										this.draw();
									  </handler>
		            <handler name="onwidth">
		                this.draw();
		            </handler>
		            <handler name="onheight">
		                this.draw();
		            </handler>
		
		            <method name="draw">
						if(this.isready){
		                this.clear ();
		                this.beginPath ();
		                
		                //has to be .5 so is draws exactly inside the border of the view
		                this.moveTo (.5,.5);
		                this.lineTo (this.width - .5, .5);
		                this.lineTo (this.width - .5, this.height - .5);
		                this.lineTo (.5, this.height - .5);
		                this.lineTo (.5, .5);
		                if(classroot.showFormatBar){
							this.moveTo(.5, classroot.outer.rich.y);
							this.lineTo(this.width - .5, classroot.outer.rich.y); 
						}
		                this.strokeStyle = Number(gController.answerFontColor);
		                this.strokeWidth = 1;
		                this.stroke();
						}
		            </method>
		
		 </drawview>
    </class>
</library>
