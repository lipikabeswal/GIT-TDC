<library>
<include href="lz/vscrollbar.lzx"/>

<!--- Implements visual baseedittext with scrollbar. -->
<class name="scrolledittext" extends="baseedittext" multiline="true" clip="true" height="100">
    <!--// ATTRIBUTES //-->
    <attribute name="border" type="number" value="0"/>

    <!--- Name of class to instantiate for vertical scroll bar.
          @keywords public -->
    <attribute name="vscrollbarclassname" type="string" value="vscrollbar"/>

    <!--- Width to give for scrollbar
          @keywords private -->
    <attribute name="_vscrollwidth" type="number" value="0"/>

    <!--- Our vertical scrollbar
          @keywords private -->
    <attribute name="_vs" value="null"/>


    <!--// METHODS //-->
    <!--- @keywords overrides -->
    <method name="init">
        super.init();
        
        // Instantiate vertical scrollbar using configured classname.
        var scrollClass:Class = lz[this.vscrollbarclassname];
        
        if ($debug) {
            if (scrollClass === undefined) {
                Debug.warn("scrollbarclassname undefined", this);
            }
        }
        
        if (scrollClass) {
            this._vs = new scrollClass(this, {
                axis:"y",
                scrollattr:"pos",
                scrollmax:0,
                scrolltarget:this.inp
            });
            
            var xDel:LzDelegate = new lz.Delegate(this, '_updateX');
            xDel.register(this._vs, 'onwidth');
            xDel.register(this, 'onwidth');
            xDel.register(this, 'onborder');
            
            new lz.Delegate(this, '_updateScrollMax', this.inp, 'onscrollheight');
            new lz.Delegate(this, '_updateStepSize', this.inp, 'onlineheight');
            new lz.Delegate(this, '_setVScrollWidthFromVisibility', this._vs, "onvisible");
            
            // call once manually
            this._updateX();
            this._updateStepSize();
            this._setVScrollWidthFromVisibility(this._vs.visible);
        }
    </method>

    <!--- @keywords private -->
    <method name="_updateX" args="ignore=null" returns="void">
        if (this._vs) this._vs.setAttribute("x", this.width - this._vs.width);
    </method>

    <!--- @keywords private -->
    <method name="_updateStepSize" args="ignore=null" returns="void">
        if (this._vs) this._vs.setAttribute("stepsize", this.inp.lineheight);
    </method>

    <!--- @keywords private -->
    <method name="_updateScrollMax" args="ignore=null" returns="void">
        if (this._vs) this._vs.setAttribute("scrollmax", this.inp.scrollheight);
    </method>

    <!--- @keywords private -->
    <method name="_setVScrollWidthFromVisibility" args="visible:Boolean" returns="void">
        this.setAttribute("_vscrollwidth", visible ? this._vs.width : 0);
    </method>

    <!--- Overrides a parent method which calculates y position for text
          in a way that doesn't make sense for this class. We just trap the 
          call and do nothing. This field is positioned in y by the constraint
          y=${parent.border}
          Note: although this method is a no-op, it still has to be declared,
          so the parent class's method does not get called on instances of 
          this class. 
          @keywords overrides
          @keywords private -->
    <method name="_placeTextY">
    </method>


    <!--// VIEWS //-->
    <!--- @keywords private -->
    <view name="_face" bgcolor="0xffffff" 
        x="${parent.border}" y="${parent.border}"
        width="${parent.width - parent.border * 2}" 
        height="${parent.height - parent.border * 2}" 
    />

    <!--- @keywords private -->
    <_newinternalinputtext name="inp" scrollevents="true" multiline="true"
        x="${parent.border}" y="${parent.border}" 
        width="${parent.width - parent.border * 2 - parent._vscrollwidth}"
        height="${parent.height - parent.border * 2}" 
    	pattern="[A-Za-z0-9!@;:#$%\*()-\=+/&amp;,./?&lt;&gt;&quot;&apos;{}[]\\\\\_|`~ \\^]*">
        <attribute name="pos" type="number" value="0"/>
		
        <!-- Used for the enter key bug with ontext event not being sent all the times when enter is pressed. -->
        <attribute name="enterpressed" value="false" type="boolean" />

        <!-- Delegate used for detecting changes to the textfield through enter key presses. -->
        <attribute name="enterKeyDel" value="$once{new LzDelegate( this, 'processEnterDelayed' )}" />

        <!--- Index position of caret/cursor in text. Value used by
              TextFieldHistory for cursor positioning -->
        <attribute name="caretindex" type="string" value="" />

        <!--- Action for the last keypresses; used by the history -->
        <attribute name="keyaction" type="string" value="" />
        
        <!--- Helper function for checking if the text has changed when the enter key
         was pressed. Workaround for the bug with enter keys and ontext events
         not being sent when enter is pressed on a line with content in it.
         @access private
       -->
        <method name="processEnterDelayed">
			this.keyaction = "";
            this.caretindex = this.getSelectionPosition();
            gController.textHistory.checkForChange();
        </method>

		<handler name="onfocus">
			gController.textHistory.setActiveInput( classroot );
	  	</handler>
        
        <setter name="pos" args="p">
            if (this.p == p) return;
            
            if (this.inited) {
                var scroll:Number = 1 - Math.floor(p / this.lineheight);
                if (scroll !== this.scroll) {
                    this.setAttribute('scroll', scroll);
                    Debug.write('pos', p, this.scroll)
                }
                this.pos = p;
                if (this.onpos) this.onpos.sendEvent(p);
            }
        </setter>
        
        <handler name="onscroll" args="IGNORE_THIS_ARG">
            this.setAttribute('pos', -this.lineheight * (this.scroll - 1));
        </handler>

		<handler name="onkeydown" reference="lz.Keys" args="k"> <![CDATA[
			// Keyboard handling for TextFieldHistory support
				Debug.write("mytext.selectionSize ",this.getSelectionSize());
               if ( gController.textHistory.activeinput == classroot ) {
				Debug.write("mytext.selectionSize inside if");
                if ( k == 13 ) {
                    // Due to a bug where the ontext event is not
                    // sent when pressing enter at the end of a line
                    // with some text we need to manually add the action
                    // to the history using the processEnterDelayed() method.
                    lz.Timer.resetTimer( enterKeyDel, 50 );
                    var lengthBeforeEnter = this.getText().length;
                    enterpressed = true;
					keyaction = "enter";
                } else if ( k == 8 ) {
					keyaction = "backspace";
                   } else if ( k == 46 ) {
					keyaction = "delete";
                   } else if ( k == 32 ) {
					keyaction = "space";
				} 
                   if ( keyaction != "" ) {
                        gController.textHistory.checkForChange();
                   }
               }
			
		 ]]>
	 </handler>

	<handler name="onkeyup" reference="lz.Keys" args="k"> <![CDATA[
		if ( this.getSelectionSize()>0) {
            keyaction = "overwrite";
        }
		]]>
	</handler>

	<handler name="onmouseup" reference="lz.GlobalMouse"> <![CDATA[
		if ( this.getSelectionSize()>0) {
            keyaction = "overwrite";
        }
		]]>
	</handler>

	<handler name="ontext">
		this.caretindex = this.getSelectionPosition();
		if ( this.keyaction != "" ) {
            gController.textHistory.checkForChange();
        }
        this.keyaction = "";
	</handler>
	
    </_newinternalinputtext>
</class>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006-2011 Laszlo Systems, Inc. All Rights Reserved.               *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
