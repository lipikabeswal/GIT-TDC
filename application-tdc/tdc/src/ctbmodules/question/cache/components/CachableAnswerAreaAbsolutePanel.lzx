<library>
	<include href="BaseCachablePanel.lzx"/>

	<!-- ************************************
         CachablePanel
         
         A cachable panel.  
         *************************************-->
	<class name="CachableAnswerAreaAbsolutePanel" extends="BaseCachablePanel" 
           comptype="$once {gCompTypes.WIDGET_ANSWER_AREA_ABSOLUTE_PANEL}"
           bgcolor="0xFFFFB0" >

        <attribute name="stereotype" value="$path{'@stereotype'}"/>
        
        <method name="doReturnToCache"><![CDATA[
            super.doReturnToCache ();
            this.abslayout.clearSubviews ();
        ]]></method>


        <method name="_initSubnodes"><![CDATA[        
            // We only translate if the answers contain images, and they are
            // autoenlargeable
            var containsAutoEnlargeImages = this.datapath.xpathQuery(
                "answer_choice_widget/image_widget[@autoenlargeable='yes']");
        
            if((this.fontsize > canvas.basefontsize) &&
               (containsAutoEnlargeImages != null))
            {
                translatePlacement();
            }
        
            super._initSubnodes();
        ]]></method>

        <method name="translatePlacement">
        <![CDATA[
            // In the absolute layout, we allow the choices to grow to the
            // width of the answer area panel divided by two.  In this case, we
            // also need to adjust the y position of the second row            
            var availWidth = Number(this.data.getAttr("width"));
            if(this.data.hasAttr("left_padding")) {
                availWidth -= Number(this.data.getAttr("left_padding"));
            }
            if(this.data.hasAttr("spacing")) {
                availWidth -= Number(this.data.getAttr("spacing"));
            }

            var maxElemSize = availWidth / 2;
            var answerChoices = this.datapath.xpathQuery("answer_choice_widget");
            
            if(answerChoices instanceof lz.DataElement) {
                answerChoices = new Array(answerChoices);
            }
             
            var rowYs = this.datapath.xpathQuery("answer_choice_widget/@y");
            var baseY = null;
            for(var i in rowYs)
            {
                if(baseY == null)
                {
                    baseY = Number(rowYs[i]);
                }
            
                else
                {
                    baseY = Math.min(baseY, Number(rowYs[i]));
                }
            }
            
            var firstRow = new Array();
            var secondRow = new Array();           
            var heightDiff = 0;
            for(var i in answerChoices)
            {
                        
                if(Number(answerChoices[i].getAttr("y")) == baseY) {
                    firstRow.push(answerChoices[i]);
                } else {
                    secondRow.push(answerChoices[i]);
                }
            
                var newWidth = maxElemSize;
                if(answerChoices[i].hasAttr("width")) 
                {
                    var oldWidth = Number(answerChoices[i].getAttr("width"));
            
                    newWidth = Math.min(newWidth,
                        oldWidth * this.fontsize/canvas.basefontsize);
                        
                    if(heightDiff == 0)
                    {
                        var oldHeight 
                            = Number(answerChoices[i].getAttr("height"));

                        var selectorHeight = 22;
                        heightDiff = (oldHeight - selectorHeight) 
                            * (newWidth / oldWidth - 1) + selectorHeight;

                        // Per Giuseppe on 12/27, if we're growing the answer
                        // images, then we allow the answer panel to grow also
                        wrapper.setAttribute('height', null);
            
                    }        
            
                }
            
                answerChoices[i].setAttr("width", newWidth);
            
            }
            
            for(var i in secondRow)
            {
                secondRow[i].setAttr("y", 
                    Number(secondRow[i].getAttr("y")) + heightDiff);
            }
       ]]>
        </method>
        
        <AbsoluteLayout name="abslayout"/>
    </class>




<?ignore
	<class name="CachableAnswerAreaAbsolutePanel" extends="CachableComponent" 
           comptype="$once {gCompTypes.WIDGET_ANSWER_AREA_ABSOLUTE_PANEL}"
           clip="true" defaultplacement="container">

        <attribute name="stereotype" value="$path{'@stereotype'}"/>
        
        <!-- ================================
             method
             ================================= -->
        <!--
            When the data changes reset all of our properties/info
        -->

		<handler name="ondata" args="data">
            //width and height
			if (data.hasAttr ('width')) {
				this.setAttribute ('width', Number (data.getAttr ('width')));
            }
			if (data.hasAttr ('height')) {
				this.setAttribute ('height', Number (data.getAttr ('height')));
            }

            //x and y of component
			if (data.hasAttr ('x')){
				this.setAttribute ('x', Number (data.getAttr ('x')));
			}
			if (data.hasAttr ('y')) {
    			this.setAttribute ('y', Number (data.getAttr ('y')));
			}
            
    
            // x and y of the contents
			this.contents.setAttribute ('x', 0);
			this.contents.setAttribute ('y', 0);

			if (data.hasAttr ('left_padding')){
				this.contents.setAttribute ('x', Number (data.getAttr ('left_padding')));
			}
			if (data.hasAttr ('top_padding')) {
    			this.contents.setAttribute ('y', Number (data.getAttr ('top_padding')));
			}

           //accomodations
            var style = gController.getAccomStyleForType (this.stereotype);
            
            if(style.bgcolor != null){
            	this.setAttribute ('bgcolor', style.bgcolor);
            }
            this.setAttribute ('fontcolor', Number (style.font_color));
            if(style.font_magnification != null){
            	this.setAttribute ('fontsize', style.font_magnification * canvas.basefontsize);
            }
            else{
           		this.setAttribute ('fontsize', canvas.basefontsize);
            }

            this._initSubnodes ();

            doneLoading();
		</handler>



        <method name="doReturnToCache"><![CDATA[
            var contsubviews = this.contents.container.subviews;
            for (var i in contsubviews) {

                if (contsubviews [i] instanceof CachableComponent &&
                        contsubviews [i].visible) {
                    this.cache.returnComponent (contsubviews [i]);
                }
            }

            this.contents.container.abslayout.clearSubviews ();
        ]]></method>


        <method name="_initSubnodes"><![CDATA[
            var subnodes = this.datapath.p.childNodes;
            var newcomp = null;
            for (var i = 0; i < subnodes.length; i++) {
                if ( subnodes[i] instanceof lz.DataElement ) {
                    newcomp = this.cache.getComponent (subnodes [i]);
					if(newcomp!=null)
                    	this.contents.container.abslayout.addSubview (newcomp);
                }
            }
        ]]></method>


        <!-- ================================
             Views
             ================================= -->
        <view name="contents" clip="true"
              width="${parent.width - x}" height="${parent.height - y}">
            <view name="container">
                <AbsoluteLayout name="abslayout"/>
            </view>
            <vscrollbar visible="${this.scrollable}"/>
        </view>
    </class>
?>
</library>