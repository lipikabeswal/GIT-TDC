<library>
    
    <include href="CachableComponent.lzx"/>

    <!-- ============================
         ==
         ==    CachableTable
         ==
         ==
         ==
         ============================ -->

    <class name="CachableTable" extends="CachableComponent"
           comptype="${gCompTypes.WIDGET_TABLE}"
           defaultplacement="table">


        <!-- ============================
             =====    ATTRIBUTES   ======
             ============================ -->

        <!-- border around table -->
        <attribute name="bordersize" value="2" type="number"/>

        <!-- autoenlarge table -->
        <attribute name="autoenlarge" value="false"/>       

        <!-- ============================
             =====     METHODS     ======
             ============================ -->

        <handler name="ondata" args="data"><![CDATA[
        	// reset heights and widths
			this.thetable.setAttribute("width", null);
			this.thetable.setAttribute("height", null);
			
             //set border size
            this.setAttribute("bordersize", 
                              data.getAttr("border") == "yes" ? 2: 0);

            if (gController.hasFontAccommodation && parent['stereotype']) {
                var style = gController.getAccomStyleForType(parent.stereotype);
            }

            // Autoenlarge : automatically handle scrolling and size related issues
            // Values are "no", "yes", "fixed" and "fitpanel"
            // "NO"       : keep same fontsize for both regular and accommodated users
            // "YES"      : Larger fontsize for accommodated users
            // "FIXED"    : increase fontsize for accommodated users (only add vertical scrolling)
            // "FITPANEL" : shrink or enlarge table text font to fit a panel (no scrolling)
            //
            this.setAttribute("autoenlarge", data.getAttr("autoenlargeable"));
            // Set title and title width
            if (data.hasAttr("titlewidth")) {
                this.thetable.contents.title.setAttribute("titlewidth", Number(data.getAttr("titlewidth")));
            } else {
                this.thetable.contents.title.setAttribute("titlewidth", -1);
            }

            // Fixed: Increase title fontsize for accommodated users
            if (this.autoenlarge == "fixed" && this.thetable.contents.title.fontsize < 16 &&
                 gController.hasFontAccommodation && parent['stereotype']) {
                this.thetable.contents.title.setAttribute("fontsize", 
                                    this.thetable.contents.title.fontsize * style['font_magnification']);
//Debug.write("fixed : "  + this.thetable.contents.title.fontsize);
            }
            var titleTxt = "";
            if(data.hasAttr('title')){
            	titleTxt = data.getAttr('title');
            }

            if(titleTxt.length > 0){
            	this.thetable.contents.title.setAttribute('visible', true);
	            this.thetable.contents.title.setAttribute("text", 
	                    '<p align="center">' + decodeBrackets(titleTxt) + '</p>');
	        }
	        else{
            	this.thetable.contents.title.setAttribute('visible', false);
	        }

            // Toggle border lines
            var hspace = data.getAttr("showvlines") == "yes" ? 1 : 0;
            var vspace = data.getAttr("showhlines") == "yes" ? 1 : 0;
			var brdrSpace=data.getAttr("border") == "yes" ? 1 : 0;
            // Show enlarge button if necessary
            // Values are:
            // "YES"          : Display for everyone
            // "NO"           : Don't display for anyone (default)
            // "ACCOMMODATED" : Only display for accommodated users
            //

            // Accommodated mode creates new panels
            if (gController.hasFontAccommodation)
                this.table_ht = parent.parent.height;
            else 
                this.table_ht = parent.height;

			var enlargeAttr = data.getAttr("enlargeable");
			var isEnlargeable = false;
   			if (enlargeAttr == "yes"){ 
   				isEnlargeable = true;
                this.table_ht -=  24;
   			}
   			else if (enlargeAttr == "accommodated"){
   				isEnlargeable = gController.hasFontAccommodation;
   			}
            this.enlarge.setAttribute("visible", isEnlargeable);

            //init cell props
            var rows = datapath.xpathQuery("row");
            if (!(rows instanceof Array)) rows = [rows];

            var cells;
            var maxwidth = 0;
            var nx = 0;
            var ny = 0;

            for (var i = 0; i < rows[0].childNodes.length; i++) {
                cells = datapath.xpathQuery("row/cell[" + String(i + 1) + "]");
                if (!(cells instanceof Array)) cells = [cells];                

                for (var j = 0; j < cells.length; j++) {
                    if (Number(cells[j].attributes.width) > maxwidth) {
                        maxwidth = Number(cells[j].attributes.width);
                    }
                }

                for (j = 0; j < cells.length; j++) {
                    cells[j].attributes.width = maxwidth;
                    cells[j].attributes.height = Number(rows[j].attributes.height);
        
                    cells[j].attributes.x = nx;

                    // Fixed : only enlarge text widgets within tables
                    if (this.autoenlarge == "fixed" && cells[j].getElementsByTagName("text_widget") 
                         												&& gController.hasFontAccommodation) {
                        cells[j].attributes.height = cells[j].attributes.height * 2;
                        cells[j].attributes.y = ny;
                        ny += Number(cells[j].attributes.height + vspace); 
                    }
                    else {
                       cells[j].attributes.y = ny;
                       ny += Number(rows[j].attributes.height) + vspace;
                    }
                }

                nx += maxwidth + hspace;
                ny = 0;
                maxwidth = 0;
            }

			// don't show stray lines if no vlines and hlines
			// This is commented to display the border lines which otherwise gets hidden in some scenarios.
			/*if(hspace == 0 && vspace == 0){
				thetable.contents.borderview.table.setAttribute("bgcolor", this.bgcolor);
			}
			else{*/
				thetable.contents.borderview.table.setAttribute("bgcolor", null);
			//}
             /*Added to fix defect 77517--for extra line apprearing*/
            if(hspace == 0 && vspace == 0){
            	thetable.contents.borderview.setAttribute("bgcolor", null);
            }
            this._initSubnodes();
            doneLoading();
            ]]>
        </handler>
        
        <method name="show">
        //Dummy method which will be called by masking answer dont remove this
        
        </method>

        <method name="decodeBrackets" args="s"><![CDATA[
	        var ltstr = "";
	        var ltstrs = s.split('&lt;');
	        for (var i=0; i<ltstrs.length; i++){
	        	if(i != 0){
	        		ltstr = ltstr + '<';
	        	}
	        	ltstr = ltstr + ltstrs[i];
	        }
	        var gtstrs = ltstr.split('&gt;');
	        var result = "";
	        for (var j=0; j<gtstrs.length; j++){
	        	if(j != 0){
	        		result = result + '>';
	        	}
	        	result = result + gtstrs[j];
	        }
	
	        return result;
        ]]></method>

        <method name="_initSubnodes">
            <![CDATA[
            //we only want to init the cells
            var cells = datapath.xpathQuery("row/cell");
            if (!(cells instanceof Array)) cells = [cells];
            
            var newcomp = null;
            for (var i = 0; i < cells.length; i++) {  
//Debug.write("get cell: " );
//Debug.write(cells[i]);          
                this.cache.getComponent (cells[i]);
            }
            ]]>
        </method>


        <method name="doReturnToCache">
            <![CDATA[
            var table = this.thetable.contents.borderview.table;
            for (var i in table.subviews) {

                if (table.subviews [i] instanceof lz.CachableComponent &&
                        table.subviews [i].visible) {
                    this.cache.returnComponent (table.subviews [i]);
                }
            }
            ]]>
        </method>

        <method name="getAttrRelComp" args="attr, from">
            var p = from.immediateparent;
            var toreturn = from[attr];

            while (!(p instanceof lz.CachableComponent)) {
                toreturn += getAttrRelComp(attr, p);
                p = p.immediateparent;
            }
            return toreturn;
        </method>

        <method name="doneLoading"><![CDATA[
            //alignment in panel
            var align = "left";
            if (this.x < 0) this.setAttribute('x',0);

           if (this.autoenlarge == "zoom") {

               // This contains the updated height and width values
               // from the newly created panel
               var orig_height = data.getAttr("height");
               var orig_width = data.getAttr("width");
               var offset = 50;

               // Multiplying factor
               // Use offset for margins
               var width = gEnlargePopup.width - offset;
               var mult_factor  = width / orig_width;

               // These variables manipulate the image within the popup window
               var table = this.thetable.contents.borderview.table;
               var wrapper = parent.wrapper;
               var title_ht = 60;

               var title = this.thetable.contents.title;
               if (title) {
                   var titleTxt = "";
                   if(data.hasAttr('title')){
                   		titleTxt = data.getAttr('title');
                   }
                   if(titleTxt.length > 0){
                   		title.setAttribute('visible', true);
                   		title.setAttribute("fontsize", 14);
	                   	title.setAttribute("text", 
	                        '<p align="center">' + decodeBrackets(titleTxt) + '</p>');
	
	                   // Based on (width/height) ratio use an appropriate fontsize
	                   title.setAttribute("fontsize", 
	                               title.fontsize * mult_factor);
					}
					else{
						title.setAttribute('visible', false);
					}
               }

               // Set the image dimensions 
               // We're using the original table measurements, so we only need
               // to use an aspect ratio to correct for the margins 
               //table.setAttribute("stretches", "both");
				
			   //this will give the correct factor
			   mult_factor  = width / table.width;
			   
		       //scale up the table with the correct factor
			   table.setAttribute("xscale" , mult_factor);
			   table.setAttribute("yscale",  mult_factor);
               
               //set the fixed width and scale up the height
               table.setAttribute("width", width);
               table.setAttribute('height',table.height * mult_factor);
              
               // nklein : hack that shouldn't be necessary
               // Need to examine why this occurs
               if (this.x < 0) this.setAttribute('x',0);

               // Set the canvas height of the popup 
               // Sets the height for the scrollbar
               // Account for margins and the height of the title

               parent.wrapper.setAttribute('height',table.height + (offset - 40) + title.height);

               // Remove the scrollbar when the table fits within the popup

//lz.Browser.loadJS('console.log("'+this.height+' : '+gEnlargePopup.height+' : '+this.getAttributeRelative('y', gEnlargePopup)+'")');

				//show scrollbar if cachable table height is greater than the enlargepopup height
				if (parent.wrapper.height < gEnlargePopup.height)
                  gEnlargePopup.contents.scaler.scroller.setAttribute("visible", false);
               else
                  gEnlargePopup.contents.scaler.scroller.setAttribute("visible", true);
               

               super.doneLoading();
               return;
            }
            else if (this.autoenlarge == "yes" && gController.hasFontAccommodation) {
                var contents = this.thetable.contents;

                //use our own get relative to because ours is flaking out.  This will
                //essentially give us the attribute relative to our parent
                var offset = getAttrRelComp("x", this); 
                var fontmag = this.fontsize/canvas.basefontsize;
                var factor = (parent.width - offset - 1)/contents.width;
                //make sure we're not magnified beyond fontmag
                if (factor > fontmag) {
                    factor = fontmag;
                }

                var newh = Math.floor(contents.height * factor);//(contents.width * factor) * contents.height/contents.width;
                //make room for the scrollbar if necessary
                if ( parent.height + (newh - contents.width) > this.panel.height && factor != fontmag) {
                    factor = (parent.width - offset - 15)/contents.width;
                    newh = Math.floor(contents.height * factor);//(contents.width * factor) * contents.height/contents.width;
				}

                // nklein : July 5, 2007
                // These lines were commented to stop the intermittent navigaton problems
                this.thetable.setAttribute("width", Math.floor(contents.width * factor));
                this.thetable.setAttribute("height", newh);
				this.thetable.contents.setAttribute('xscale', (this.thetable.width /this.thetable.contents.width ) );
				this.thetable.contents.setAttribute('yscale', (this.thetable.height /this.thetable.contents.height ) );
				
            } 
            // nklein : July 5, 2007
            // These lines were commented to stop the intermittent navigaton problems
            else {
                this.thetable.setAttribute("width", this.thetable.contents.width);
                this.thetable.setAttribute("height", this.thetable.contents.height);
            }

            if (data.hasAttr("halign")) {
                align = data.getAttr("halign");
            }
            this.setAttribute('align',align);
            
            super.doneLoading();
        ]]></method>
        
        <method name="hide">
        	//do nothing
        </method>

        <!-- ============================
             =====      VIEWS      ======
             ============================ -->
        <simplelayout axis="y" spacing="0"/>

        <!-- enlarge button -->
        <EnlargeButton name="enlarge" 
                    x="${classroot.thetable.width-this.width}"/>
        <view name="thetable" stretches="both">
            <view name="contents" 
                width="${Math.max(title.width, borderview.width)}">
                <simplelayout axis="y" spacing="0"/>

                <!-- title of table
                       Note: The fontsize is set to the canvas' basefontsize,
                             and not this component's, because the enlarging of
                             the entire table takes care of the title as well.
                  -->
                <text name="title" 
                      align="center"
                      multiline="true" 
                      width="${this.titlewidth != -1 ? 
                             this.titlewidth : parent.borderview.width}"
                      fontsize="${canvas.basefontsize+2}" 
                      fgcolor="${classroot.fontcolor}"
					  bgcolor="${classroot.bgcolor}"
                      clickable="${canvas.readable}"
                      onclick="gReadableText.read(gReadableText.stripHtmlTags(text),false)"
                      fontstyle="bold">
                    <attribute name="titlewidth" value="0"/>
                </text>

                <!-- borderview contains the title and table and defines a border -->
                <view name="borderview" bgcolor="${classroot.fontcolor}" align="center"
                      width="${this.table.width + 2 * classroot.bordersize}"
                      height="${this.table.height + 2 * classroot.bordersize}">
                    
                    <!-- table with one top line and row driven by dataset -->
                    <view name="table" 
                          x="${classroot.bordersize}" y="${classroot.bordersize}"/>
                </view>
            </view>
        </view>
    </class>
    
</library>
