<library>
	<include href="CachableComponent.lzx" />


	<!-- ************************************
		Cachable Html Widget
		
		A Cachable Html Widget to render html items.  
		*************************************-->

	<class name="CachableHtmlWidget" extends="CachableComponent"
		comptype="${gCompTypes.WIDGET_HTML}" aaactive="true"
		aasilent="false">
		
		<attribute name="contentLoadedDel" value="$once{new lz.Delegate(this,'func2')}" />
		<attribute name="setStateDel" value="$once{new lz.Delegate(this,'setAnswer')}" />
		<attribute name="setItemDel" value="$once{new lz.Delegate(this,'setItemId')}" />
		<attribute name="answered" type="boolean" value="false" />
		<attribute name="answer" />
		<attribute name="widget_id" />
		<attribute name="answerObjSet" value="$once{new Object()}"/>
		<attribute name="unlocked" type="boolean" value="false"/>
		<attribute name="srcUrl" />
		<attribute name="scratchPadAlreadyPresent" type="boolean" value="false"/>
		<method name="init">
			super.init();
		</method>

		<handler name="oninit">
		Debug.write("Cachaable html widget handlerinit");
		</handler>

		<handler name="ondata" args="data"><![CDATA[
Debug.write("Cachaable html widget ondata");
      	var srcUrl = data.getAttr('src');
      	this.setAttribute('srcUrl', srcUrl);
		this.setAttribute('unlocked', false);
		this.setAttribute('answerObjSet', {});
		if (data.hasAttr("id")) {
	      	var id = data.getAttr('id');
	      	this.setAttribute('widget_id',id);
	        this.setAttribute('widget_id', data.getAttr("id"));
	        var answer = gController.getStateForInputWidgetId(this.widget_id);
		
			if(answer){
				this.setAttribute('answered',false); //We are setting answered as false so that we can setTheState properly. This has to be revisited 
				var selectedValuesArr = [];
				if(answer['checkedVals']){
					var selectedValues = answer['checkedVals'];
					for (var i in selectedValues){
						if(selectedValues.hasOwnProperty(i) && !isNaN(+i)) {
	      					  selectedValuesArr[+i] = selectedValues[i];
	   					}
						
					}
					answer['checkedVals'] = selectedValuesArr;
				}

				this.setAttribute('answerObjSet', answer);

			}
			gController.addHtmlField({"widget_id" : id, "answered" : this.answered, "answer" : this.answer, "ref" : this}); 

		}
		if($dhtml){
			Debug.write("dhtml");
		}
		else{			

			srcUrl = "http:oasitemwrapper.html";
			this.main.ht.setAttribute('src', srcUrl);
			this.main.ht.setAttribute('visible',true);
		}
 		//this.ht.bringToFront();
 		setItemId();
		func2();
		gHotKeys.disableKeys();
		gController.freezeUI();
		//doneLoading();
		
		if(gScratchpad.visible){
			gScratchpad.hide('ignore');
			this.setAttribute('scratchPadAlreadyPresent',true);
		}
		]]>
		</handler>
		
		<method name="func1">
		//Debug.write("FUNC1", this.main.ht.ready);
			if(this.main.ht.ready){
            	var del = new LzDelegate(this, 'handleFunc1');
            	//this.main.ht.callJavascript('accomPkg.isItemAnswered', del);
            	this.main.ht.callJavascript('isAnswered', del);
				
            } 
        </method>
        
        <method name="handleFunc1" args="retVal"><![CDATA[
           // Debug.write('DHTMLComponent handleFunc1: ', retVal);

			if(retVal != null && retVal != undefined){
				if( retVal == true || retVal ==  'true'){
					this.setAttribute('answered', true);
					gController.updateBlueBallForHtmlItem(retVal);
				}else{
					this.setAttribute('answered', false);
					gController.updateBlueBallForHtmlItem(retVal);
					}
				if(!unlocked){
					gHotKeys.enableKeys();
					gController.unlockUI();
					this.setAttribute('unlocked', true);
				}
				
			}
            
       ]]> </method>

		<method name="setAnswer" ><![CDATA[
		   //Debug.write("setAnswer ansObj");
		   var ansObj = gController.teItemState[this.srcUrl];
		   //Debug.write("answerObject setanswer ",ansObj)
		   if(this.main.ht.ready && gController.htmlFields.length > 0){
		    if(!this.answered){
		     var htmlContent = this.answerObjSet.htmlContent;
		     var jsonContent = this.answerObjSet.jsonContent;
		     var checkedVals = []
		     if(this.answerObjSet.checkedVals){
		      checkedVals = this.answerObjSet.checkedVals;
		     }
		     		      
		     if(ansObj){
		   		htmlContent = ansObj.htmlContent;
		   		jsonContent = ansObj.jsonContent;
		   	}
		   this.main.ht.callJavascript('setState', null,htmlContent, jsonContent, checkedVals);
		   //  lz.Timer.resetTimer(setStateDel, 500);
		    }else{
		    // lz.Timer.removeTimer(setStateDel);
		    }
		   }
	   
	    ]]></method>

        
        <method name="func2">
					doneLoading();

        /*   if(this.main.ht.loading){
            	lz.Timer.resetTimer(contentLoadedDel, 1000);
            }else{
            	doneLoading();
            	lz.Timer.removeTimer(contentLoadedDel);
           	
            }*/
        </method>
        
        <method name="handleFunc2" args="retVal1">
    	
            if(retVal1 == true || retVal1 == 'true'){
            	doneLoading();
            	lz.Timer.removeTimer(contentLoadedDel);
            }
        </method>
        
        <method name="getState">
           if(this.main.ht.ready){
            var getStateDel = new LzDelegate(this, 'getStateHandler');
            //this.main.ht.callJavascript('accomPkg.getState', getStateDel);
             this.main.ht.callJavascript('getState', getStateDel);
           } 
        
        </method>
        
	    <method name="getStateHandler" args="retVal">
				this.setAttribute('answer', retVal);
				gController.updateHtmlFields(retVal,this.answered);
	     </method>
        

		<method name="setItemId">
				this.main.ht.callJavascript('setItemId', null,this.srcUrl);
				if (gController.uisemaphore > 0){
				 	lz.Timer.resetTimer(setItemDel, 50);
				 }else{
				 	lz.Timer.removeTimer(setItemDel);
					//setAnswer();
				 }
		</method>
		
		<method name="showHideManipulative" args="arg,manipButton"><![CDATA[
			this.main.ht.callJavascript('showHideManipulative', null,arg);
			
			switch(manipButton.toolid){
			case 'standard_calculator' 	 :  gController.manipStateHtml['standard_calculator'] = manipButton;
			break;
		
			case 'scientific_calculator' : gController.manipStateHtml['scientific_calculator'] = manipButton;
			break;
			
			case 'scratchpad' : 		   gController.manipStateHtml['scratchpad'] = manipButton;
			break;

			case 'FCAT_formula_card' : 	  gController.manipStateHtml['FCAT_formula_card'] = manipButton;

			break;

			case 'TN_formula_card' : 	  gController.manipStateHtml['TN_formula_card'] = manipButton;
			break;
			
			case 'protractor' 	 :  gController.manipStateHtml['protractor'] = manipButton;
			break;
			
			case 'straight_edge' 	 :  gController.manipStateHtml['straight_edge'] = manipButton;
			break;
			
			case 'oneeighth_inch_ruler' 	 :  gController.manipStateHtml['oneeighth_inch_ruler'] = manipButton;
			break;
			
			case 'half_inch_ruler' 	 :  gController.manipStateHtml['half_inch_ruler'] = manipButton;
			break;
			
			case 'mm_ruler' 	 :  gController.manipStateHtml['mm_ruler'] = manipButton;
			break;
			
			case 'cm_ruler' 	 :  gController.manipStateHtml['cm_ruler'] = manipButton;
			break;

			case 'highlighter' 	 :  gController.manipStateHtml['highlighter'] = manipButton;
			break;

			case 'eraser' 	 :  gController.manipStateHtml['eraser'] = manipButton;
			break;
			
			case 'formula_card_resource' : gController.manipStateHtml['formula_card_resource'] = manipButton;
			break;

			case 'masking_ruler'	:  gController.manipStateHtml['masking_ruler'] = manipButton;
			break;
			}
			for(var key in gController.manipStateHtml) {
    			var value = gController.manipStateHtml[key];
				if(key != 'scratchpad'){
    				gController.htmlmanipStateHtml[key] = value;
				}
			}
			//gController.setAttribute('htmlmanipStateHtml',gController.htmlmanipStateHtml);
			Debug.write	("MANIP STATE HTML", gController.manipStateHtml,gController.htmlmanipStateHtml);
		]]></method>
       
		<method name="doneLoading"><![CDATA[	
            super.doneLoading();
        ]]></method>        
        
		<method name="hide">
			this.main.ht.setAttribute('visible',false);
		</method>
		
		<method name="show">
			this.main.ht.setAttribute('visible',true);
			this.main.ht.callJavascript('setFocus',null);
		</method>

		<method name="doReturnToCache"><![CDATA[
			if(!this.answered){
				var obj = gController.answerObj;
				gController.teItemState[this.srcUrl] = obj;			
			}else {
				if(gController.teItemState[this.srcUrl] !=null && typeof gController.teItemState[this.srcUrl] !='undefined')
					delete gController.teItemState[this.srcUrl];			
			}
			var coordinateDel = new LzDelegate(this, 'handleScratchpad');
			this.main.ht.callJavascript('getScratchpadCoordinates',coordinateDel);
       ]]></method>
       
       <method name="handleScratchpad" args="data">
       	var coord = new Object();
       	Debug.write("handleScratchpad", data);
  			data = data.split("|");
  			coord.x = data[0];
  			coord.y = data[1];
  			coord.data = data[2];
  		gController.setAttribute('sptext',data[2]);
		//gScratchpad.setText(unescape(data));
		gScratchpad.setText(unescape(data[2]).split('~|||||||').join('\n'));
       	if(gController.scratchpadOpen){
			gScratchpad.show(coord);
			this.setAttribute('scratchPadAlreadyPresent',false);
			gScratchpad.resetCall();
		}
		var s = "storeScratchPadText('"+data[2]+"')";
		lz.Browser.loadJS(s);
		this.main.ht.setAttribute('visible',false);
		this.main.ht.setAttribute('src',"");
       </method>
       
       <method name="setScratchPadText" args="arg">
       		this.main.ht.callJavascript('setScratchPadText', null,arg);
       </method>
       
        <method name="getScratchPadText">
           if(this.main.ht.ready){
            var getSPDel = new LzDelegate(this, 'getScratchPadHandler');
            this.main.ht.callJavascript('getScratchPadText', getSPDel);
            
           } 
        
        </method>
        
	    <method name="getScratchPadHandler" args="retVal">
						
	     </method>
       
       <view name="main" width="${parent.parent.width - 20}" height="${parent.parent.height - 10}">
 	       <html name="ht" id="htmlwiget" width="${780 * canvas.xscalefactor}" height="${450 * canvas.yscalefactor}" scrollbars="false" >

 	       </html>
       </view>

	</class>
</library>