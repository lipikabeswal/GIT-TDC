<canvas bgcolor="0x6691B4" proxied="false" debug="false" width="100%" height="100%"
	accessible="true">
	<script when="immediate"><![CDATA[
	Debug.messageLevel = "ERROR";
	class FlashUtils {
	#passthrough (toplevel: true) {
		import flash.media.Microphone;
		import flash.display.DisplayObject;
		import flash.geom.Rectangle;		
		import flash.geom.Matrix;		
		import flash.geom.ColorTransform;		
		import flash.display.Bitmap;		
		import flash.display.BitmapData;		
		import flash.filters.*;		
		import flash.events.MouseEvent;
	}#
	
	var mic:Microphone = Microphone.getMicrophone();
	var main:lz.view;
	var temp:lz.view;
	var colorTransform:ColorTransform;
	var rect:Rectangle;

	public function getObject(){
		var micOb:Microphone = Microphone.getMicrophone();
	return micOb;
	}
	
	public function getMicNames(){
	return Microphone.names;
	}
	

	public function getActivityLevel(){	
		return mic.activityLevel;
	}

	
	public function doMouseMove(x:Number,y:Number,ratioW:Number,ratioH:Number) {
		if(temp!= null){
			var x = x;
			var y = y;
			var w = temp.width;
			var h = temp.height;
			var scale = 1.5;				
			var bitmap:BitmapData = new flash.display.BitmapData(w, h, false);
			var matrix = new flash.geom.Matrix();
			matrix.scale(scale, scale);
			matrix.translate(-x * (scale + ratioW), -y * (scale + ratioH));
			bitmap.draw(main.sprite, matrix, colorTransform, "normal", rect);
		
			var myfilter = new flash.filters.DropShadowFilter();
			myfilter.quality = 5;
			myfilter.strength = 2;
			myfilter.angle = 45;
			myfilter.distance = 10;
			temp.sprite.filters = [myfilter];
			var bm:Bitmap = new Bitmap(bitmap);
			temp.sprite.addChild (bm);
			bitmap = null;
			matrix = null;
			//bitmap.remove();
		}
	};
	
	public function show (m:lz.view, t:lz.view) {
	Debug.write("Show called");
	main = m;
	temp = t;
	var temp_mc = temp.sprite; 
	var mainView_mc = main.sprite; 
	var scale = 1.5;
	var x;
	var y;
	var w;
	var h;
	//temp_mc.createEmptyMovieClip("bmp", temp_mc.getNextHighestDepth());
	colorTransform = new flash.geom.ColorTransform();
	Debug.write("Show called flashutils", temp.width,temp.height);
	rect = new flash.geom.Rectangle(0, 0, temp.width, temp.height);
	}	
	
	}
	lz.FlashUtils = new FlashUtils();
	]]></script>

	<debug x="0" y="0" width="80%" height="400" />

	<include href="ctbmodules" />
	
	<Sarsystem id="flash"/>
	
	<script src="lzmodules/lfc/focuspatch.js">
    </script>
	<attribute name="focusobj" />

	<handler name="onfocus">
		Debug.write("NK XXX canvas has focus");
	</handler>

	<script src="lzmodules/lfc/browserpatch.js">
    </script>

	<resource name="waitcursor"
		src="ctbmodules/resources/components/lzwaitcursor_rsc.swf" />

	<script><![CDATA[
        function printBigString( s ) {
            Debug.write( '==========' );
            if (s == null) return;
            for ( var i = 0; i < s.length; i += 100 ) {
                Debug.write(s.substring( i, i + 100 ) );
            }
        }
    ]]></script>
	<script><![CDATA[
        function round( s ) {
            var prev = Math.floor(s);
            var next = Math.ceil(s);
            var toNext = next - s;
            var toPrev = s - prev;
            var result = prev;
            if(toNext < toPrev){
            	result = next;
            }
            return result;
        }
    ]]></script>
	<script><![CDATA[
    	/**
    	 * This method trims the blank spaces ' ' or new lines '\n' from the front
    	 * and end of a string
    	 * @param str - The string that is to be parsed
    	 * @return str - The parsed string after it has been trimmed    
    	 */
        function trim( str ) {
        	if(str == null){
        		str = '';
        		return str;
        	}
            while (str.substr(0,1) == ' ' || str.substr(0,1)=='\n') {
               str = str.substr(1, str.length);
            }
            while (str.substr(str.length-1, str.length) == ' '|| str.substr(str.length-1, str.length) =='\n') {
               str = str.substr(0,str.length-1);
            }
            return str;		
        }
    ]]></script>

	<attribute name="Copyrite" type="string" value="CTB/McGraw-Hill" />
	<attribute name="copyriteColor" type="color" value="0x527DA4" />
	<attribute name="basefontsize" type="number" value="12" />
	<attribute name="readable" value="false" type="boolean" />
	<attribute name="focusclass" value="null" />
	<attribute name="footnotedata" />
	<attribute name="isMultiAudio"/>
	<attribute name="currentCursor" value="null" />
	<attribute name="eliminatorRsrc"
		value="$once{lz.Browser.getInitArg('eliminatorResource')}"
		type="string" />
	<attribute name="useDefaultEliminator" type="boolean" value="true" />
	
	<attribute name="sptext" value="null"/>
	<attribute name="manipstate" value="null"/>
	<attribute name="ttstext" value="null"/>
	<attribute name="setanswer" value="null" />
	<attribute name="exitPleaseWaitPopup" type="boolean" value="false"/>
	
	<attribute name="fontString" value="null"/>
	<attribute name="xscalefactor" value="null"/>
	<attribute name="yscalefactor" value="null"/>
	<attribute name="backColorString" value="null"/>
	<attribute name="htmlGeneralManip" value="$once{new Object()}" />
	<attribute name="htmlManip" value="null" />
	<attribute name="htmlOpenManip" value="null" />
	<attribute name="footnotetext" value="null"/>
	<attribute name="currentEid"/>
	<attribute name="mouseUpFired" value = "false" type = "string"/>
	<attribute name="fromWrapper" value = "false" type = "string"/>
	<attribute name="fromLogin" value = "false" type = "string"/>
	<attribute name="selectionFromLasAsset"/>
	<attribute name="triggeridsave"/>
	<attribute name="triggercrsave"/>
	<attribute name="triggercrpush"/>
	<attribute name="scratchpadRequired" type="boolean" value="false"/>
	<attribute name="keysPressed" value="null"/>
	<attribute name="enableManipBar" value="true" type="boolean"/>
	<attribute name="enableManipulatives" value="true" type="boolean"/>
	<attribute name="iframeIsLoaded" value="false" type="boolean"/>
	
	<handler name="ontriggercrpush" args="data">
		//Debug.write("*************ontriggercrpush******");
		gController.addCrField(data);
	</handler>
	<handler name="ontriggercrsave" args="data"><![CDATA[
		var msg = data.split("||");
		//Debug.write("*************ontriggercrsave******",msg[0],msg[1],msg[2],msg[3]);
		if(msg[3]){		
		if(!isCRWidgetPresent(msg[0])){
			gController.addCrField({"widget_id" : msg[0], 
                                              "answered" : false, "answer" : ''});
			}
		}
		if(msg[2]){
			gController.updateCrField(msg[0],msg[1],msg[2]);
		}else{
			gController.updateCrField(msg[0],'',msg[1]);
		}

	]]></handler>

	<method name="isCRWidgetPresent" args="widgetid"><![CDATA[
		for(var i = 0; i<gController.crFields.length; i++){
			if(gController.crFields[i]['widget_id'] == widgetid){
				return true;
			}
		}
		return false;
	]]></method>
	<handler name="ontriggeridsave" args="data">
		if(data == 'id'){
			if(gController.lasHtmlField.length > 0){
				var msg  = gController.lasHtmlField[0].asset.aw.iframeid;
				var s = "saveIframeId('"+msg+"')";
				lz.Browser.loadJS(s);
			}
		}
	</handler>
	
	<handler name="onselectionFromLasAsset" args="data">
		gController.setAttribute('calledFromLasHtml',true);
		gController.toggleItemSelState(data);
		Debug.write("*************reverse******");
	</handler>
	
	<handler name="onsetanswer" args="data">
		if(gController.htmlFields.length > 0){
			gController.htmlFields[0].ref.setAnswer();
			Debug.write("*************onset answer");
		}
	</handler>
	
	<handler name="onfromWrapper" args="data">
		canvas.setAttribute('mouseUpFired','true');
		 var s = "callManipOutOfFrameCheck('true')";
		 lz.Browser.loadJS(s);
	</handler>
	
	<handler name="onfromLogin" args="data">
		canvas.setAttribute('mouseUpFired','true');
		 var s = "callManipOutOfFrameCheck('true')";
		 lz.Browser.loadJS(s);
	</handler>
	
	<handler name="onttstext" args="data">
		gReadableText.read(data,false);
	</handler>
	<handler name="onsptext" args="data"><![CDATA[
		gController.setAttribute('sptext',data);
		//gScratchpad.setText(unescape(data));
		gScratchpad.setText(unescape(data).split('~|||||||').join('\n'));
		]]>
	</handler>
	  
	<handler name="onmanipstate" args="data"><![CDATA[
	var manip = data.split("|");
	var manipName = manip[0];
	if(gController.htmlmanipStateHtml[manipName]){
		gController.htmlmanipStateHtml[manipName].resetState();
		if(gController.htmlmanipStateHtml[manipName] && manip[1]=='up'){
			delete gController.htmlmanipStateHtml[manipName];
			for(var i=0;i<gController.htmlGeneralManipData.length;i++){
				if(gController.htmlGeneralManipData[i].eid == canvas.currentEid){
					var manipData = new Object();
					manipData = gController.htmlGeneralManipData[i];
					var closedManip = manipData[manipName];
					closedManip['isselected'] = 'false';
				}
			}
		}
	}		
	gController.setManipulativeSelState (manipName, manip[1]);
	]]></handler>
	
	<handler name="onexitPleaseWaitPopup">
		gController.exitPopups();
		gController.hideHtmlWidgets();
		gController.terminate();
	</handler>	

	<handler name="onhtmlManip" args="data">
		gController.addManipulatives(data);
	</handler>
	
	<handler name="onfootnotetext" args="arg">
		gFootNotePopup.show(arg);	
	</handler>

	<method name="setCrFocus"><![CDATA[
		var fo = canvas.focusobj;
		if(typeof fo == 'object' && fo!=null){
			fo.onfocus.sendEvent();
		}]]>
	</method>
	
	<method name="setScale"><![CDATA[
		canvas.setAttribute('xscalefactor',canvas.titleView.mainView.scalingView.xscale);
	canvas.setAttribute('yscalefactor',canvas.titleView.mainView.scalingView.yscale);
	var msg = canvas.titleView.mainView.scalingView.xscale +"|" + canvas.titleView.mainView.scalingView.yscale;
	var s = "setScaleFactor('"+msg+"')";
	lz.Browser.loadJS(s);
	]]></method>
	<handler name="onfootnotedata" args="data">
        gFootNotePopup.show(data);
    </handler>
    
    <handler name="onisMultiAudio"><![CDATA[
		var attr = this.isMultiAudio;
		var temp = attr.substring(attr.indexOf("isPlaying="));

		var id = attr.substring(attr.indexOf("audioId=")+"audioId=".length);
		var isPlaying = temp.substring((temp.indexOf("isPlaying=")+"isPlaying=".length),temp.indexOf(","));

		gController.setAttribute('audioId',id);
		gController.setAttribute('isAudioPlaying',isPlaying);
    	gController.enableAudio();
	    ]]>
    </handler>
    
    <handler name="onkeysPressed" args="arg">
    	gHotKeys.handleHtmlKeyPress(arg);
    </handler>
    
    <handler name="onenableManipBar">
    	if(this.enableManipBar == true || this.enableManipBar == 'true') {
    		this.setAttribute('enableManipulatives', true);
    	}
    	else {
    		this.setAttribute('enableManipulatives', false);
    	}
    </handler>
    
	<handler name="oninit">
    	//Debug.write("HTML Embed Setting:" + flashSystem.Stage.showMenu);
    	//flashSystem.Stage.showMenu = false;
    	//Debug.write("Active Setting:" + flashSystem.Stage.showMenu);
				
		if(canvas.debug){
			canvas.titleView.mainView.scalingView.setAttribute('xscale',canvas.titleView.width/800);
		}
  	</handler>
  	
  	<handler name="onmouseup">
    	 /*if(gController.onStopTest) {
    	 	lz.Cursor.lock();
    	 }*/
    	 canvas.setAttribute('mouseUpFired','true');
		 var s = "callManipOutOfFrameCheck('true')";
		 lz.Browser.loadJS(s);
     </handler>
  	
  	 <handler name="onmousemove">
    	 if(gController.onStopTest) {
    	 	lz.Cursor.lock();
    	 }
		 if(gController.htmlFields.length > 0){
	    	 var s = "callManipOutOfFrameCheck('"+this.mouseUpFired+"')";
			 lz.Browser.loadJS(s);
		 }
     </handler>


	<method name="init">
       super.init();
       var folder = lz.Browser.getInitArg('folder');
       if (folder) this.setAttribute("folder", folder);
       var user = lz.Browser.getInitArg('user');
       if (user) this.setAttribute("user", user);
       <!-- canvas.setDefaultContextMenu(null); -->
       var cmenu = new LzContextMenu();
       cmenu.hideBuiltInItems();
       cmenu.setAttribute('delegate',new lz.Delegate(this,'doNothing'));
	   canvas.setDefaultContextMenu(cmenu);
	   //flashSystem.Stage.showMenu = false;
    </method>

	<method name="doNothing">
    </method>
    
	<!--  this view tests whether or not the eliminator resource is available -->
	<view name="eliminatorTester" visible="false" height="0"
		width="0">
		<handler name="oninit">
			canvas.setAttribute('medialoadtimeout', 3000);
			var eliminatorUrl = lz.Browser.getInitArg('eliminatorResource');
			this.setSource(eliminatorUrl);
			var folderUrl = lz.Browser.getInitArg('folder');
			if (folderUrl) {
			   canvas.folder = folderUrl;
			}
		</handler>
		<handler name="onload">
			canvas.setAttribute('medialoadtimeout', 30000);
			canvas.setAttribute('useDefaultEliminator', false);
			this.unload();
		</handler>
		<handler name="ontimeout">
			canvas.setAttribute('medialoadtimeout', 30000);
		</handler>
	</view>
	<view name="titleView" width="100%" height="100%" >
	<view name="mainView"  width="100%" height="100%">
	
	<!--<view name="mainView"  width="100%" height="100%" bgcolor="0x6691B4">-->
	<!--//800/600 base width and height since unstretched widths and heights are zero-->
	<view name="scalingView" 
		height="${canvas.width/canvas.height &lt; 1.33 
                     ? this.width * 600/800 : canvas.height}" 
		width="${canvas.width/canvas.height &lt;1.33 
                     ? canvas.width 
                     : this.height * 800/600}"		     
		     xscale="${this.height/600}" yscale="${this.height/600}" 
		align="center"
		valign="middle">
<handler name="onwidth">
	Debug.write("width....."+this.width , this.height, this.yscale);

</handler>
		<view name="gView" width="800" height="600">

			<ItemInterface id="gItemInterface" name="gItemInterface"  width="800" height="600"
				visible="false" />
			<Screens id="gScreens" x="100" y="200" width="600"
				height="200" visible="false">
                <text name="copyWriteText" y="200" font="Arial" fontsize="12" 
                
			        fgcolor="${canvas.copyriteColor}" height="16" 
				    text="${canvas.Copyrite}"/>
            </Screens>
            <Tutorial id="gTutorial" width="800" height="600"
                        visible="false"/>

	        <!-- include the please wait popup -->
	        <include href="ctbmodules/question/RevisitFalsePopup.lzx"/>
			<include href="ctbmodules/question/PleaseWaitPopup.lzx"/>
			<include href="ctbmodules/question/MusicPlayer.lzx"/>
			<include href="ctbmodules/manipulatives/maskinganswer/MaskingAnswer.lzx"/>
        </view>

    </view>
    </view>
  
</view>
 <include href="ctbmodules/manipulatives/magnifier/MagnifyingGlass.lzx"/>   

</canvas>
