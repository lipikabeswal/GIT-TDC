<canvas bgcolor="0x6691B4" proxied="false" debug="true"
	accessible="true">

	<debug x="0" y="0" width="80%" height="400" />

	<include href="ctbmodules" />
	
	<Sarsystem id="flash"/>
	
	<script src="lzmodules/lfc/focuspatch.js">
    </script>
	<attribute name="focusobj" />

	<handler name="onfocus">
		Debug.write("NK XXX canvas has focus");
	</handler>

	<script src="lzmodules/lfc/browserpatch.js">
    </script>

	<resource name="waitcursor"
		src="ctbmodules/resources/components/lzwaitcursor_rsc.swf" />

	<script><![CDATA[
        function printBigString( s ) {
            Debug.write( '==========' );
            if (s == null) return;
            for ( var i = 0; i < s.length; i += 100 ) {
                Debug.write(s.substring( i, i + 100 ) );
            }
        }
    ]]></script>
	<script><![CDATA[
        function round( s ) {
            var prev = Math.floor(s);
            var next = Math.ceil(s);
            var toNext = next - s;
            var toPrev = s - prev;
            var result = prev;
            if(toNext < toPrev){
            	result = next;
            }
            return result;
        }
    ]]></script>
	<script><![CDATA[
    	/**
    	 * This method trims the blank spaces ' ' or new lines '\n' from the front
    	 * and end of a string
    	 * @param str - The string that is to be parsed
    	 * @return str - The parsed string after it has been trimmed    
    	 */
        function trim( str ) {
        	if(str == null){
        		str = '';
        		return str;
        	}
            while (str.substr(0,1) == ' ' || str.substr(0,1)=='\n') {
               str = str.substr(1, str.length);
            }
            while (str.substr(str.length-1, str.length) == ' '|| str.substr(str.length-1, str.length) =='\n') {
               str = str.substr(0,str.length-1);
            }
            return str;		
        }
    ]]></script>

	<attribute name="Copyrite" type="string" value="CTB/McGraw-Hill" />
	<attribute name="copyriteColor" type="color" value="0x527DA4" />
	<attribute name="basefontsize" type="number" value="12" />
	<attribute name="readable" value="false" type="boolean" />
	<attribute name="focusclass" value="null" />
	<attribute name="footnotedata" />
	<attribute name="isMultiAudio"/>
	<attribute name="currentCursor" value="null" />
	<attribute name="eliminatorRsrc"
		value="$once{lz.Browser.getInitArg('eliminatorResource')}"
		type="string" />
	<attribute name="useDefaultEliminator" type="boolean" value="true" />
	  
	<method name="setCrFocus">
		var fo = canvas.getAttribute('focusobj');
		if(typeof fo == 'object'){
			fo.onfocus.sendEvent();
		}
	</method>
	<handler name="onfootnotedata" args="data">
        gFootNotePopup.show(data);
    </handler>
    
    <handler name="onisMultiAudio"><![CDATA[
		var attr = this.isMultiAudio;
		var temp = attr.substring(attr.indexOf("isPlaying="));

		var id = attr.substring(attr.indexOf("audioId=")+"audioId=".length);
		var isPlaying = temp.substring((temp.indexOf("isPlaying=")+"isPlaying=".length),temp.indexOf(","));

		gController.setAttribute('audioId',id);
		gController.setAttribute('isAudioPlaying',isPlaying);
    	gController.enableAudio();
	    ]]>
    </handler>
    
	<handler name="oninit">
    	//Debug.write("HTML Embed Setting:" + flashSystem.Stage.showMenu);
    	//flashSystem.Stage.showMenu = false;
    	//Debug.write("Active Setting:" + flashSystem.Stage.showMenu);
  	</handler>


	<method name="init">
       super.init();
       var folder = lz.Browser.getInitArg('folder');
       if (folder) this.setAttribute("folder", folder);
       var user = lz.Browser.getInitArg('user');
       if (user) this.setAttribute("user", user);
       <!-- canvas.setDefaultContextMenu(null); -->
       var cmenu = new LzContextMenu();
       cmenu.hideBuiltInItems();
       cmenu.setAttribute('delegate',new lz.Delegate(this,'doNothing'));
	   canvas.setDefaultContextMenu(cmenu);
	   //flashSystem.Stage.showMenu = false;
    </method>

	<method name="doNothing">
    </method>
    
	<!--  this view tests whether or not the eliminator resource is available -->
	<view name="eliminatorTester" visible="false" height="0"
		width="0">
		<handler name="oninit">
			canvas.setAttribute('medialoadtimeout', 3000);
			var eliminatorUrl = lz.Browser.getInitArg('eliminatorResource');
			this.setSource(eliminatorUrl);
			var folderUrl = lz.Browser.getInitArg('folder');
			if (folderUrl) {
			   canvas.folder = folderUrl;
			}
		</handler>
		<handler name="onload">
			canvas.setAttribute('medialoadtimeout', 30000);
			canvas.setAttribute('useDefaultEliminator', false);
			this.unload();
		</handler>
		<handler name="ontimeout">
			canvas.setAttribute('medialoadtimeout', 30000);
		</handler>
	</view>
	<view name="titleView" width="100%" height="100%" >
	<view name="mainView"  width="100%" height="100%" bgcolor="0x6691B4">
		<!--<handler name="oninit">

		</handler>-->
	<view name="scalingView"  stretches ="both"
		height="${ canvas.width/canvas.height &lt; 1.33 
                     ? this.width * unstretchedheight/unstretchedwidth 
                     : canvas.height}"
		width="${  canvas.width/canvas.height &lt;1.33 
                     ? canvas.width 
                     : this.height * unstretchedwidth/unstretchedheight}"
		valign="middle" align="center">


		<view name="gView" width="800" height="600" >

			<ItemInterface id="gItemInterface" name="gItemInterface" width="800" height="600"
				visible="false" />
			<Screens id="gScreens" x="100" y="200" width="600"
				height="200" visible="false">
                <text y="200" font="Arial" fontsize="12" 
			        fgcolor="${canvas.copyriteColor}" height="16" 
				    text="${canvas.Copyrite}"/>
            </Screens>
            <Tutorial id="gTutorial" width="800" height="600"
                        visible="false"/>

	        <!-- include the please wait popup -->
			<include href="ctbmodules/question/PleaseWaitPopup.lzx"/>
			<include href="ctbmodules/manipulatives/maskinganswer/MaskingAnswer.lzx"/>
        </view>

    </view>
    </view>
  
</view>
    

</canvas>
