<project name="application-las-tdcinstall InstallAnywhere Installer" default="usage" basedir="."> 
 

	<!--property name="project.installer.xsl.dir"            value="${basedir}/antxsl" /-->
	<property name="project.installer.prop.dir"              value="${basedir}/antproperties" />
	<property name="project.base.dir"                        value="${basedir}" />
	<property name="project.artifacts.dir"                   value="${basedir}/artifacts" />
	<property name="project.artifacts.etc.dir"               value="${basedir}/artifacts/etc" />
	<property name="project.artifacts.webapp.resources.dir"  value="${basedir}/artifacts/webapp/resources" />
	<property name="project.artifacts.webapp.classes.dir"    value="${basedir}/artifacts/webapp/WEB-INF/classes" />

	<property file="${project.installer.prop.dir}/build.properties"/>
	<property name="project.installer.application.dir"      value="${INSTALLANYWHERE_HOME}" />
	<property name="project.installer.src"                   value="${TARGET_IA_CONFIG_GILE}" />
	
	<taskdef name="buildinstaller" 
			 classpath="${project.installer.application.dir}\resource\build\iaant.jar" 
			 classname="com.zerog.ia.integration.ant.InstallAnywhereAntTask"/> 
	
	
	<!-- **************************** usage ******************************* -->	
	<target name="usage" description="Displays the usage of this ANT build script.">
		<echo>
			Usage: ant [target]
		</echo>
	</target>
	
	   
	<!-- **************************** clean ******************************* -->	
	<target name="clean" description="Cleans the generated output files.">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}" defaultexcludes="off">
				<include name="__tdc_*_Build_Output/**"/>
				<include name="__tdc_*locales*/**"/>
				<include name="__tdc*.iap_xml" />
				<include name="tdc_Build_Output/**"/>
				<include name="tdc*locales*/**"/>
				<include name="*.tmp"/>
				<include name="dockerfile_Default_Container_Configuration/**"/>
			</fileset>
		</delete>
	</target>
	
	<!-- **************************** postClean ******************************* -->	
	<target name="postClean" >
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}" defaultexcludes="off">
				<include name="__tdc_*locales*/**"/>
				<include name="__tdc*.iap_xml" />
				<include name="tdc_Build_Output/**"/>
				<include name="tdc*locales*/**"/>
				<include name="*.tmp"/>
				<include name="dockerfile_Default_Container_Configuration/**"/>
			</fileset>
		</delete>
	</target>
	
	 
	<!-- **************************** prepArtifacts ******************************* -->	
	<target name="prepArtifacts" description="Clears out the artifats folder in preparation of it coming from application-tdc and application-tdcbootstrap">
		<delete includeemptydirs="true" failonerror="false">
			<fileset defaultexcludes="no" dir="${basedir}/artifacts/data" />
			<fileset defaultexcludes="no" dir="${basedir}/artifacts/etc" />
			<fileset defaultexcludes="no" dir="${basedir}/artifacts/lockdownbrowser" />
			<fileset defaultexcludes="no" dir="${basedir}/artifacts/servletcontainer" />
			<fileset defaultexcludes="no" dir="${basedir}/artifacts/webapp" />
		</delete>
		<delete file="${basedir}/artifacts/bootstrap.jar"/>
	</target>
	
	
	<!-- **************************** build ******************************* -->	
	<target name="build" description="Builds the various installers" depends="clean">
		
		<antcall target="clean" />  
		
		<antcall target="buildLasLink" />  
		
		<antcall target="postClean"/>
		
		<!-- 
		Repeat build target  & postClean for other 		
		products if required
		-->
		
		<antcall target="buildTDCUpdate"/>
	</target>
	
	
	<!-- **************************** Vanilla ******************************* -->	
	<target name="buildVanilla" description="Builds the generic installer" depends="init">
		
		<!-- load vaniall properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/vaniall.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="vanilla" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	<target name="buildVanillaThin" description="Builds the generic installer" depends="init">
		
		<!-- load vaniall-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/vaniall-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="vanilla-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	<!-- **************************** ISTEP ******************************* -->	
	<target name="buildISTEP" description="Builds the ISTEP installer" depends="init">
		
		<!-- load istep properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/istep.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="istep" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	<target name="buildISTEPThin" description="Builds the ISTEP installer" depends="init">
		
		<!-- load istep-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/istep-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="istep-thin" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	<!-- **************************** TABE ******************************* -->	
	<target name="buildTABE" description="Builds the TABE installer" depends="init">
		
		<!-- load tabe properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/tabe.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="tabe" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<target name="buildTABEThin" description="Builds the TABE installer" depends="init">
		
		<!-- load tabe-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/tabe-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="tabe-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<!-- **************************** LasLink ******************************* -->	
	<target name="buildLasLink" description="Builds the LasLink installer" depends="init">
		
		<!-- load laslink properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/laslink.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="laslink" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
 
	<target name="buildLasLinkThin" description="Builds the LasLink installer" depends="init">
		
		<!-- load laslink-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/laslink-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="laslink-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<!-- **************************** Geogia ******************************* -->	
	<target name="buildGA" description="Builds the GA installer" depends="init">
		
		<!-- load ga properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/ga.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="ga" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<target name="buildGAThin" description="Builds the GA installer" depends="init">
		
		<!-- load ga-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/ga-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="ga-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	<!-- **************************** TerraNova ******************************* -->	
	<target name="buildTN" description="Builds the TN installer" depends="init">
		
		<!-- load tn properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/tn.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="tn" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<target name="buildTNThin" description="Builds the TN installer" depends="init">
		
		<!-- load tn-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/tn-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="tn-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	
	<!-- **************************** TerraNova Form G ******************************* -->	
	<target name="buildTNG" description="Builds the TNG installer" depends="init">
		
		<!-- load tng properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/tng.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="tng" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<target name="buildTNGThin" description="Builds the TNG installer" depends="init">
		
		<!-- load tng-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/tng-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="tng-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	

	<!-- **************************** Oklahoma ******************************* -->	
	<target name="buildOK" description="Builds the Oklahoma installer" depends="init">
		
		<!-- load ok properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/ok.properties"/>
		
		<antcall target="buildNonThinClientInstaller">
			<param name="installer.type" value="ok" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>

	<target name="buildOKThin" description="Builds the Oklahoma installer" depends="init">
		
		<!-- load ok-thin properties file -->
		<loadproperties srcfile="${project.installer.prop.dir}/ok-thin.properties"/>
		
		<antcall target="buildThinClientInstaller">
			<param name="installer.type" value="ok-thin" />
			<param name="installer.version" value="${tdc_installer_version}" />
			<param name="installer.primary.url" value="${tdc_installer_primary_url}" />
			<!-- param name="installer.secondary.url" value="${tdc_installer_secondary_url} /-->
		</antcall>
	</target>
	
	<!-- Internal tasks **************************************************** -->
		
		
	<!-- **************************** init ******************************* -->	
	<target name="init">
		<!--
		<copy file="${project.artifacts.etc.dir}/version.properties" tofile="temp.properties" overwrite="true"/>
		<replaceregexp file="temp.properties">
			<regexp pattern="tdc\.version=(.*?)\.(.*?)\.(.*)"/>
			<substitution expression="&lt;project&gt;&lt;artifacts&gt;&lt;version&gt;&lt;major&gt;\1&lt;/major&gt;&lt;minor&gt;\2&lt;/minor&gt;&lt;revision&gt;\3&lt;/revision&gt;&lt;/version&gt;&lt;/artifacts&gt;&lt;/project&gt;" />
		</replaceregexp>
		-->
		<!-- 
		previous expression creates xml properties file containing:
		  project.artifacts.version.major
		  project.artifacts.version.minor
		  project.artifacts.version.revision
		-->
		<!--
		<xmlproperty file="temp.properties"/>
		-->
	</target>
	
	
	<!-- **************************** buildTDCUpdate ******************************* -->	
	<target name="buildTDCUpdate">
		<delete file="${basedir}/../tdcupdate.tar"/>
		<tar basedir="${basedir}/../" destfile="${basedir}/../tdcupdate.tar" >
			<include name="tdcupdate/**/tdcConfig.enc"/>
			<include name="tdcupdate/**/upgrade.txt"/>
		</tar>
	</target>
	
	<!-- ************** buildNonThinClientInstaller *************************** -->	
	<target name="buildNonThinClientInstaller" if="installer.type">
		
		<!-- Copy ${project.artifacts.etc.dir}/tdc_version.properties to installer etc directory -->
		<copy file="${project.artifacts.etc.dir}/tdc_version.properties" tofile="${project.artifacts.etc.dir}/version.properties" overwrite="true" />
		<!-- Update installer tdc_version.properties with correct version no -->
		<replace file="${project.artifacts.etc.dir}/version.properties">
		  <replacefilter token="tdc_version" value="${installer.version}"/>
		</replace>
		
		<!-- Copy ${project.artifacts.webapp.classes.dir}/tdc_url.properties to project.artifacts.webapp.classes.dir/tdc.properties file -->
		<copy file="${project.artifacts.webapp.classes.dir}/tdc_url.properties" tofile="${project.artifacts.webapp.classes.dir}/tdc.properties" overwrite="true" />
		
		<!-- Update ${project.artifacts.webapp.classes.dir}/tdc.properties with correct primary url -->
		<replace file="${project.artifacts.webapp.classes.dir}/tdc.properties">
		  <replacefilter token="primary-url" value="${installer.primary.url}"/>
		  <!--replacefilter token="secondary-url" value="${installer.secondary.url}"/ -->
		</replace>
		
		<!-- Copy the ${project.base.dir}/bootstrap-single.jar to ${project.artifacts.dir}/bootstrap.jar -->
		<copy file="${project.base.dir}/bootstrap-single.jar" tofile="${project.artifacts.dir}/bootstrap.jar" overwrite="true" />
		
		<!-- Copy project.installer.src to __tdc_${installer.type}.iap_xml -->
		<property name="installer.src"  value="__tdc_${installer.type}.iap_xml" />
		<copy file="${project.installer.src}" tofile="${installer.src}" overwrite="true" />
		
		<!--
		  This section is used to update the iap xml file with product specific xsl transformation and string replace. It used  
		  xml tag names, hard code object ids, string replcae in the transformation process. With the upgrade of InstallAnyWhere version 
		  that transformation logic does not work any more becuase xml tag names have been chganged.
		-->
		<!--
		<xslt style="${project.installer.xsl.dir}/${installer.type}.xsl" in="${project.installer.src}" out="${installer.src}" force="true">
			  <outputproperty name="method" value="xml"/>
			  <outputproperty name="encoding" value="UTF-8"/>
			  <outputproperty name="indent" value="yes"/>
			  <outputproperty name="cdata-section-elements" value="string"/>
		</xslt>
		<fixcrlf srcdir="${basedir}" includes="${installer.src}"  />
		<replace file="${installer.src}">
		  <replacefilter token="@@EMPTY.STRING@@"             value=""/>
		  <replacefilter token="@@PRODUCT.VERSION.MAJOR@@"    value="${project.artifacts.version.major}"/>
		  <replacefilter token="@@PRODUCT.VERSION.MINOR@@"    value="${project.artifacts.version.minor}"/>
		  <replacefilter token="@@PRODUCT.VERSION.REVISION@@" value="${project.artifacts.version.revision}"/>
		</replace>
		<replaceregexp file="${installer.src}" flags="g">
			<regexp pattern="\]\]&gt;&lt;!\[CDATA\["/>
			<substitution expression="" />
		</replaceregexp>
		-->
		
		<buildinstaller
			IAlocation="${project.installer.application.dir}"
			IAProjectFile="${installer.src}"
			AutoPopulateLabels="false"
			BuildLinuxWithVM="false"
			BuildLinuxWithoutVM="true"
			BuildHPUXWithVM="false"
			BuildHPUXWithoutVM="false"
			BuildAIXWithVM="false"
			BuildAIXWithoutVM="false"
			BuildSolarisWithVM="false"
			BuildSolarisWithoutVM="false"
			BuildNamedUnixWithVM="false"
			BuildNamedUnixWithoutVM="false"
			BuildWindowsWithVM="false"
			BuildWindowsWithoutVM="true"
			BuildPureJava="false"
			ProjectVersionMajor="${tdc_installer_major_version}"
			ProjectVersionMinor="${tdc_installer_minor_version}"
			ProjectVersionRevision="${tdc_installer_revision_version}"
			BuildTimeVarPropfile="${project.installer.prop.dir}/${installer.type}.properties" />
		
		<!-- Clean tdc properties from ${project.artifacts.webapp.classes.dir} -->
		<delete file="${project.artifacts.webapp.classes.dir}/tdc.properties"/>
		
	</target>
	
	
	<!-- ************** buildThinClientInstaller *************************** -->	
	<target name="buildThinClientInstaller" if="installer.type">
		
		<!-- Copy ${project.artifacts.etc.dir}/tdc_version.properties to installer etc directory -->
		<copy file="${project.artifacts.etc.dir}/tdc_version.properties" tofile="${project.artifacts.etc.dir}/version.properties" overwrite="true" />
		<!-- Update installer tdc_version.properties with correct version no -->
		<replace file="${project.artifacts.etc.dir}/version.properties">
		  <replacefilter token="tdc_version" value="${installer.version}"/>
		</replace>
		
		<!-- Copy ${project.artifacts.webapp.classes.dir}/tdc_url.properties to project.artifacts.webapp.classes.dir/tdc.properties file -->
		<copy file="${project.artifacts.webapp.classes.dir}/tdc_url.properties" tofile="${project.artifacts.webapp.classes.dir}/tdc.properties" overwrite="true" />
		
		<!-- Update ${project.artifacts.webapp.classes.dir}/tdc.properties with correct primary url -->
		<replace file="${project.artifacts.webapp.classes.dir}/tdc.properties">
		  <replacefilter token="primary-url" value="${installer.primary.url}"/>
		  <!--replacefilter token="secondary-url" value="${installer.secondary.url}"/-->
		</replace>
		
		<!-- Copy the ${project.base.dir}/bootstrap-multi.jar to ${project.artifacts.dir}/bootstrap.jar -->
		<copy file="${project.base.dir}/bootstrap-multi.jar" tofile="${project.artifacts.dir}/bootstrap.jar" overwrite="true" />
		
		<!-- Copy project.installer.src to __tdc_${installer.type}.iap_xml -->
		<property name="installer.src"  value="__tdc_${installer.type}.iap_xml" />
		<copy file="${project.installer.src}" tofile="${installer.src}" overwrite="true" />
		
		<!--
		  This section is used to update the iap xml file with product specific xsl transformation and string replace. It used  
		  xml tag names, hard code object ids, string replcae in the transformation process. With the upgrade of InstallAnyWhere version 
		  that transformation logic does not work any more becuase xml tag names have been chganged.
		-->
		<!--
		<xslt style="${project.installer.xsl.dir}/${installer.type}.xsl" in="${project.installer.src}" out="${installer.src}" force="true">
			  <outputproperty name="method" value="xml"/>
			  <outputproperty name="encoding" value="UTF-8"/>
			  <outputproperty name="indent" value="yes"/>
			  <outputproperty name="cdata-section-elements" value="string"/>
		</xslt>
		<fixcrlf srcdir="${basedir}" includes="${installer.src}"  />
		<replace file="${installer.src}">
		  <replacefilter token="@@EMPTY.STRING@@"             value=""/>
		  <replacefilter token="@@PRODUCT.VERSION.MAJOR@@"    value="${project.artifacts.version.major}"/>
		  <replacefilter token="@@PRODUCT.VERSION.MINOR@@"    value="${project.artifacts.version.minor}"/>
		  <replacefilter token="@@PRODUCT.VERSION.REVISION@@" value="${project.artifacts.version.revision}"/>
		</replace>
		<replaceregexp file="${installer.src}" flags="g">
			<regexp pattern="\]\]&gt;&lt;!\[CDATA\["/>
			<substitution expression="" />
		</replaceregexp>
		-->
			
		<buildinstaller
			IAlocation="${project.installer.application.dir}"
			IAProjectFile="${installer.src}"
			AutoPopulateLabels="false"
			BuildLinuxWithVM="false"
			BuildLinuxWithoutVM="false"
			BuildHPUXWithVM="false"
			BuildHPUXWithoutVM="false"
			BuildAIXWithVM="false"
			BuildAIXWithoutVM="false"
			BuildSolarisWithVM="false"
			BuildSolarisWithoutVM="false"
			BuildNamedUnixWithVM="false"
			BuildNamedUnixWithoutVM="false"
			BuildWindowsWithVM="false"
			BuildWindowsWithoutVM="true"
			BuildMacOSX="false" 
			BuildPureJava="false"
			ProjectVersionMajor="${tdc_installer_major_version}"
			ProjectVersionMinor="${tdc_installer_minor_version}"
			ProjectVersionRevision="${tdc_installer_revision_version}"
			BuildTimeVarPropfile="${project.installer.prop.dir}/${installer.type}.properties"/>
		
		<!-- Clean tdc properties from ${project.artifacts.webapp.classes.dir} -->
		<delete file="${project.artifacts.webapp.classes.dir}/tdc.properties"/>
		
	</target>
</project>