<library>
	<include href="../resources.lzx"/>
    <include href="../MaskingManipulative.lzx"/>

    <class name="MaskingRuler" 
			extends="MaskingManipulative"
           clickable="true" 
           showhandcursor="false">

      
        <attribute name="labelrsr" value="" type="string"/>
		
		<handler name="onmousedown" >
			this.bringToFront();
		</handler>

		<handler name="onlabelrsr">
			if(this.labelrsr != null){
				console.log("onlabelrsr  maskign ruler");
				this.ruler.label.setAttribute('resource',this.labelrsr);
			}
		</handler>
		<handler name="oninit">
        	this.setAttribute('visible' , false);
            this.setAttribute ('y', this.height);
			 this.ruler.setAttribute ('width', 800);
        </handler>

        <attribute name="dragxmin" value="null"/>
        <attribute name="dragymin" value="null"/>
        <attribute name="dragxmax" value="null"/>
        <attribute name="dragymax" value="null"/>
		<attribute name="minLength" value="100" type="number" />
		<attribute name="maxLength" value="800" type="number" />
		
		<attribute name="LABEL_PADDING" value="10"/>
		<attribute name="GRABBER_PADDING" value="35"/>
		<attribute name="LABEL_Y" value="25" />
		<attribute name="ROTATOR_Y" value="38" />
		<attribute name="GRABBER_Y" value="29" />
		<attribute name="DRAGGER_MIN_X" value="0" />
		<attribute name="DRAGGER_MAX_X" value="800" />
		<attribute name="DRAGGER_MIN_Y" value="0" />
		<attribute name="DRAGGER_MAX_Y" value="460" />
		
        <dragstate name="dragger"
                   drag_min_x="${this.dragxmin}"
                   drag_min_y="${this.dragymin}"
                   drag_max_x="${this.dragxmax}"
                   drag_max_y="${this.dragymax}">
            <attribute name="rrotation" value="$once{this.rotation * (Math.PI/180)}"/>
			<attribute name="actualX" value="$once{this.xoffset - this.getMouse( 'x' )}" />
			<attribute name="actualY" value="$once{this.yoffset - this.getMouse( 'y' )}" />
			
            <attribute name="__dragstate_ydoffset" 
                       value="$once {this.actualX * Math.sin (this.rrotation) +
                                     this.actualY * Math.cos (this.rrotation)}"/>
            <attribute name="__dragstate_xdoffset" 
                       value="$once {this.actualX * Math.cos (this.rrotation) -
                                     this.actualY * Math.sin (this.rrotation)}"/>

            <handler name="onapply">
                classroot.updateDraggerAttributes();
            </handler>

        </dragstate>

		<method name="updateDraggerAttributes">
			var dv = getDraggerValues(this.rotation, ruler.width);

           	this.setAttribute ('dragxmin', dv[0]);
			this.setAttribute ('dragymin', dv[1]);
			this.setAttribute ('dragxmax', dv[2]);
			this.setAttribute ('dragymax', dv[3]);
		</method>
		
		<method name="getDraggerValues" args="degrees, lngth">
			var result = new Array();
			var gb = getRelativeGrabberBounds(degrees, lngth);
            result[0] = - gb[0];
            result[1] = - gb[1];
            result[2] = this.parent.width - gb[2];
            result[3] = this.parent.height - 6  - gb[3];

			return result;
		</method>
		
		<method name="getRelativeGrabberBounds" args="degrees, lngth">
			var result = new Array();
			var rads = degreesToRads(degrees);
			var grabber = ruler.grabber;
            var sin = Math.sin(rads);
            var cos = Math.cos(rads);
            var gx = this.ruler.x + lngth/2 - grabber.width/2;
            var gxplus = gx + grabber.width;
            var gy = grabber.y;
            var gyplus = grabber.y + grabber.height;
			
            var gx1 = (cos * gx) - (sin * gy);
            var gy1 = (sin * gx) + (cos * gy);
            var gx2 = (cos * gx) - (sin * gyplus);
            var gy2 = (sin * gx) + (cos * gyplus);
            var gx3 = (cos * gxplus) - (sin * gy);
            var gy3 = (sin * gxplus) + (cos * gy);
            var gx4 = (cos * gxplus) - (sin * gyplus);
            var gy4 = (sin * gxplus) + (cos * gyplus);

            result[0] = getMin(gx1, gx2, gx3, gx4);
            result[1] = getMin(gy1, gy2, gy3, gy4);
            result[2] = getMax(gx1, gx2, gx3, gx4);
            result[3] = getMax(gy1, gy2, gy3, gy4);

			return result;
		</method>
		
		<method name="getRotateGrabberBounds" args="degrees, lngth">
			var result = new Array();
			var grabber = ruler.grabber;

			var rads = degreesToRads(degrees);
            var sin = Math.sin(rads);
            var cos = Math.cos(rads);
            
            var gx = lngth/2 - grabber.width/2;
            var gxplus = gx + grabber.width;
            var gy = -grabber.height/2;
            var gyplus = grabber.height/2;

            var gx1 = (cos * gx) - (sin * gy);
            var gy1 = (sin * gx) + (cos * gy);
            var gx2 = (cos * gx) - (sin * gyplus);
            var gy2 = (sin * gx) + (cos * gyplus);
            var gx3 = (cos * gxplus) - (sin * gy);
            var gy3 = (sin * gxplus) + (cos * gy);
            var gx4 = (cos * gxplus) - (sin * gyplus);
            var gy4 = (sin * gxplus) + (cos * gyplus);

            result[0] = getMin(gx1, gx2, gx3, gx4);
            result[1] = getMin(gy1, gy2, gy3, gy4);
            result[2] = getMax(gx1, gx2, gx3, gx4);
            result[3] = getMax(gy1, gy2, gy3, gy4);

			return result;
		</method>
		
		<method name="getGrabberBounds" args="degrees, lngth">
			var result = new Array();
			var gb = getRotateGrabberBounds(degrees, lngth);            
            var minx = gb[0];
            var maxx = gb[2];
            var miny = gb[1];
            var maxy = gb[3];
            var ro = getRelativeOrigin(degrees);
			var xstart = ro[0];
			var ystart = ro[1];
            
            result[0] = xstart + minx;
            result[1] = ystart + miny;
            result[2] = xstart + maxx;
            result[3] = ystart + maxy;

            return result;
		</method>
		
		<method name="getMin" args="val1, val2, val3, val4">
			var first = Math.min(val1, val2);
			var second = Math.min(val3, val4);
			return Math.min(first, second);
		</method>
		
		<method name="getMax" args="val1, val2, val3, val4">
			var first = Math.max(val1, val2);
			var second = Math.max(val3, val4);
			return Math.max(first, second);
		</method>
		
		<method name="degreesToRads" args="degrees">
			return degrees * (Math.PI/180);
		</method>
		
 		<method name="radsToDegrees" args="rads">
			return rads * (180/Math.PI);
		</method>
		
        <handler name="ondata" args="data"><![CDATA[
Debug.write("ondata masking ruler..."+data);
            if (!data) return;
            var hasstate = false;
            for (var i in data.attributes) {
                hasstate = true;
                break;
            }
            
            if (data && hasstate) {
Debug.write("if "+data +" : "+ hasstate);
                this.setAttribute ('rotation', data.getAttr ('rotation'));
                this.ruler.setAttribute ('width', data.getAttr ('rulerlength'));

                this.setAttribute ('x', data.getAttr ('x'));
                this.setAttribute ('y', data.getAttr ('y'));
                // if restoring manipulative with Scratchpad open - need Scratchpad to be top window
            	if(gScratchpad.visible){
                	gScratchpad.bringToFront();
            	}
             } else {
Debug.write("else "+data +" : "+ hasstate);
                this.setAttribute ('rotation', 0);
				this.ruler.setAttribute ('width', classroot.width);
                this.setAttribute ('x', 0);
                this.setAttribute ('y', (classroot.height - this.height)/2);

                //set default values in data    
                if (data) {
                    data.setAttr ('rotation', this.rotation);
                    data.setAttr ('width', this.width);
                    data.setAttr ('x', this.x);
                    data.setAttr ('y', this.y);
                }
            }
            
        ]]></handler>    
        
		<method name="getRelativeOrigin" args="degrees">
			var result = new Array();
				result[0] = this.x;
				result[1] = this.y;
			return result;
		</method>

		<method name="getDeltas" args="xpos, ypos, degrees">
			var result = new Array();
			
			var rads = degreesToRads(degrees);
           	var sin = Math.sin(rads);
            var cos = Math.cos(rads);
            
            result[0] = cos * xpos - sin * ypos;
            result[1] = sin * xpos + cos * ypos;

			return result;
		</method>
		
        <view name="ruler" 
              x="0" 
              clip="true">
            <view name="bg" 
                  resource="masking_ruler_background" 
                  opacity="1" width="${canvas.width}" xscale="1.54">
                <handler name="onload">
            		classroot.setAttribute("maxLength", this.resourcewidth);
            	</handler>
            </view>
            <view name="lines" resource="masking_ruler_lines" width="${canvas.width}" xscale="1.54"/>
			<view name="grabber" resource="grabber_rsrc" y="$once{classroot.GRABBER_Y}" align="center" visible="false">
                  <handler name="onmouseover">
                     // gController.setCurrentCursor('cangrab_cursor');
                  </handler>
                  <handler name="onmouseout">
                     // gController.clearAndRestoreCurrentCursor();
                  </handler>
                  <handler name="onmousedown">
                  	  classroot.bringToFront();
                      lz.Cursor.setCursorGlobal ('grabbing_cursor');
                      lz.Cursor.lock ();
                      classroot.dragger.apply ();
                  </handler>
                  <handler name="onmouseup">
                      lz.Cursor.unlock ();
                      gController.restoreCurrentCursor();
                      classroot.dragger.remove ();

                     // classroot.datapath.p.setAttr ('x', classroot.x);
                     // classroot.datapath.p.setAttr ('y', classroot.y);
                  </handler>
            </view>

        </view>
        <handler name="onmousedown">
        	this.bringToFront();
            lz.Cursor.setCursorGlobal ('grabbing_cursor');
            lz.Cursor.lock ();
            this.dragger.apply ();
        </handler>
        <handler name="onmouseup">
            lz.Cursor.unlock ();
            //gController.restoreCurrentCursor();
            this.dragger.remove ();
Debug.write("masking ruler datapath ",this.datapath.p);
            //this.datapath.p.setAttr ('x', this.x);
            //this.datapath.p.setAttr ('y', this.y);
        </handler>
        
    </class>

</library>
