<library>
 	
	
	<include href="ScratchpadWindow.lzx" />
	<include href="scrolledittext.lzx" />

    <class name="Scratchpad" 
           extends="ScratchpadWindow"
           visible="true"
           height="227"   
		   width="400" 
		   title="Scratchpad"
		   resizable="true" 
		   closeable="true"
		   bgcolor="0xFFFFB0"
		   fontsize="12"
		   minwidth="130"
		   minheight="130"
		   focustrap="true">
		<datapath/>
		<attribute name="DEFAULT_HEIGHT" type="number" value="227" />
		<attribute name="DEFAULT_WIDTH" type="number" value="400" />
		<attribute name="DEFAULT_X" type="number" value="200" />
		<attribute name="DEFAULT_Y" type="number" value="113" />
        <attribute name="toolid" type="string"/>
        <attribute name="toolstate" value="$once{new lz.datapointer ()}"/>
        <attribute name="scratchpadHasFocus" type="boolean" value="false"/>
        <attribute name="scratchpadJustLostFocus" value="false" />
        <attribute name="scrollPosition" value="$once{new Array()}"/>
        
        <handler name="onmousedown">
        	this.bringToFront();
        	this.sp.inp.setSelectable(false);
            lz.Cursor.setCursorGlobal ('grabbing_cursor');
            lz.Cursor.lock ();
        </handler>

		<handler name="onmouseup" reference="lz.GlobalMouse" args="who">
			if(who){
				if(lz.Focus.getFocus() == sp.inp){  // user may have changed selection using mouse
					this.sp.storeSelection();
				}
				else if(isScratchpadSubcomponent(who)){ // user clicked on scrollbar, etc.
					//gScratchpad.restoreFocusAndCursor();
				}
				else if (who == this){
					this.sp.inp.setSelectable(true);
	            	lz.Cursor.unlock ();
	            	//gController.restoreCurrentCursor();
	            //	restoreFocusAndCursor();
				}

				this.setAttribute("scratchpadJustLostFocus", false);
			}
		</handler>
		
		<method name="isScratchpadSubcomponent" args="who">
			var ancestor = _getAncestor(who);
			var parentalUnit = typeof (who.parent) == "undefined" ? null : who.parent;
			return (parentalUnit == gScratchpad || ancestor == gScratchpad);
		</method>
		
		<!--  eliminate annoying Debug warnings -->
		<method name="_getAncestor" args="who">
			var result = null;
			if(typeof (who.parent) != "undefined"){
				if(typeof (who.parent.parent) != "undefined"){
					if(typeof (who.parent.parent.parent) != "undefined"){
						if(typeof (who.parent.parent.parent.parent) != "undefined"){
							result = who.parent.parent.parent.parent;
						}
					}
				}
			}
			return result;
		</method>
		
 		<handler name="onmouseover">
            //gController.setCurrentCursor('cangrab_cursor');
        </handler>
        
        <handler name="onmouseout">
            //gController.clearAndRestoreCurrentCursor();
        </handler>
        
        <method name="restoreFocusAndCursor">
        	this.sp.inp.onfocus.sendEvent();
        	this.sp.resetTheSelection();
        	this.setAttribute("scratchpadHasFocus", true);
			//gHotKeys.disableKeys();
        </method>
        <method name="setManipulativeSelState" args="id,status">
			var messg = id + "|"+ status;
			var s = "passManipulativeState('"+messg+"')";
			lz.Browser.loadJS(s);
		</method>
        
        <method name="getText">
        	return this.sp.getText();
        </method>
        
        <method name="read">
 	    	//gReadableText.read(sp.getSelectedText(), true);
        	//restoreFocusAndCursor();
        </method>
        
        <method name="setText" args="txt">
          this.sp.inp.onfocus.sendEvent();
          this.sp.inp.onblur.sendEvent();
          this.sp.setAttribute('text',formatXml(txt));
        </method>
        
        <method name="replace" args="s, t, u"><![CDATA[
			  /*
			  **  Replace a token in a string
			  **    s  string to be processed
			  **    t  token to be found and removed
			  **    u  token to be inserted
			  **  returns new String
			  */
			var i = s.indexOf(t);
			var r = "";
			if (i == -1) return s;
			r += s.substring(0,i) + u;
			if ( i + t.length < s.length)
				r += replace(s.substring(i + t.length, s.length), t, u);
			return r;
		]]></method>
        
        <method name="formatXml" args="txt"><![CDATA[
        	var result = txt;
        	if(typeof txt != "undefined"){
        		result = replace(txt, '&', '&amp;');
				result = replace(result, '<', '&lt;');
				result = replace(result, '>', '&gt;');
				result = replace(result, '"', '&quot;');
				result = replace(result, "'", '&apos;');
			}
			return result;
       ]]></method>
        <handler name="oninit">
            this.toolstate.setAttribute ('rerunxpath', true);
            this.toolstate.setXPath (this.datapath.xpath + '/@' + this.toolid);
            //this.datapath.setXPath (this.toolid);
			this.setAttribute('visible',false);
        </handler>
        <method name="show">
        	this.setAttribute('visible',true);
        </method>
        
        <method name="hide">
        	this.setAttribute('visible',false);
        </method>

		        <handler name="onvisible">
			if(this.visible){  // restore defaults
				this.setAttribute("height", this.DEFAULT_HEIGHT);
				this.setAttribute("width", this.DEFAULT_WIDTH);
				this.setAttribute("x", this.DEFAULT_X);
				this.setAttribute("y", this.DEFAULT_Y);
           		//this.restoreFocusAndCursor();
           }else{
           		//gReadableText.stopReading(true);
				gScratchpad.sp.inp.onblur.sendEvent();
            }       
         </handler>
         
         <handler name="onblur" reference="sp.inp">
			this.setAttribute("scratchpadHasFocus", false);
			this.setAttribute("scratchpadJustLostFocus", true);
			//gHotKeys.enableKeys();
         </handler>
         
	     <scrolledittext name="sp" 
	                             height="${immediateparent.height}" 
	                             width="${immediateparent.width}" 
	                             focusable="true"
	                             clickable="true">
	            	<attribute name="start" type="number" value="0" />
	            	<attribute name="end" type="number" value="0" />
	            	<attribute name="scrollPos" type="number" value="0" />
	            <method name="init">
	                super.init();
	                var elem = this.getDisplayObject();
	                elem.setAttribute('id', "scratchPadContent");
	                this.style.setAttribute("textfieldcolor", '0xFFFFB0');
					//this.setAttribute('fontcolor','');
			//	 	if(gController.hasFontAccommodation){
				//		this.setAttribute('fontsize',18);
					//}
				//	else{
						this.setAttribute('fontsize',12);
					//}
					//this.inp.setMaxLength(10000);
	            </method>
	            
	            <method name="updateScrollText" args="a">
						this.setAttribute('text',a);	
						var s = "updateScratchPadText('"+a+"')";
						lz.Browser.loadJS(s);
				</method>
				
				<handler name="ontext"><![CDATA[
					var textContent = this.text;
					storeSelection();
					var s = "updateScratchPadText('"+textContent+"')";
					lz.Browser.loadJS(s);
				 	if(this.text.length > 10000){
								textContent = this.text;
								textContent = textContent.substring(0,Number(classroot.characterLimit));
								updateScrollText(textContent);
							}
				]]></handler>
					
         		  
         		<handler name="onpos" reference="this.inp" args="_pos">
				  	if(typeof _pos == 'number'){
        				//this.setAttribute("scrollPos", _pos);
       			  	}
        	    </handler>
        
				<handler name="onfocus" reference="inp">
					classroot.setAttribute("scratchpadHasFocus", true);
					//gHotKeys.disableKeys();
					classroot.bringToFront();
				</handler>
				
				<handler name="onblur" reference="inp">
					//Debug.write("onblur.....");
				//	if(gItemInterface.visible == true || gTutorial.visible == true){
					//	gHotKeys.enableKeys();
					//}
				</handler>
				
				<handler name="onkeyup" reference="inp">
					storeSelection();
				</handler>
				
				<method name="storeSelection">
					var pos = getSelectionPosition();
					var size = getSelectionSize();
					if(pos == -1){
						pos = 0;
					}
					if(size == -1){
						size = 0;
					}
					this.setAttribute('start', pos);
					this.setAttribute('end', pos + size);
				</method>
				
				<method name="resetTheSelection">
        			this.setSelection(this.start, this.end);
        			//this.inp.setAttribute('pos', this.scrollPos);
				</method>
				
				<method name="getSelectedText">
					if(start == end){
						return getText();
					}
					else{
						return getText().substring(start, end);
					}
				</method>
	       </scrolledittext>
     </class>
</library>
